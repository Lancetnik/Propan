{"config":{"lang":["en","ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Propan","text":""},{"location":"#propan","title":"Propan","text":"<p>Propan - just another HTTP a declarative Python Messaging framework.</p> <p>Inspired by FastAPI and Kombu, Propan was created to simplify Message Brokers' code writing and to provide a helpful development toolkit, which existed only in HTTP-frameworks world until now.</p> <p>It's designed to create reactive microservices around Messaging.</p> <p>It is a modern, high-level framework on top of popular specific Python brokers libraries, based on pydantic, FastAPI, and pytest concepts.</p>"},{"location":"#deprecation-notice","title":"Deprecation notice","text":"<p>Propan project is superceeded by FastStream.</p> <p>FastStream is a new package based on the ideas and experiences gained from FastKafka and Propan. By joining our forces, we picked up the best from both packages and created a unified way to write services capable of processing streamed data regardless of the underlying protocol.</p> <p>I\u2019ll continue to maintain Propan package, but new development will be in FastStream. If you are starting a new service, FastStream is the recommended way to do it.</p> <p>For now FastStream supports Kafka and RabbitMQ. Other brokers support will be added in a few months.</p> <p>You can find a detail migration guide in the documentation</p>"},{"location":"#the-key-features-are","title":"The key features are","text":"<ul> <li>Simple: Designed to be easy to use and learn.</li> <li>Intuitive: Great editor support. Autocompletion everywhere.</li> <li>Dependencies management: Minimization of code duplication. Access to dependencies at any level of the call stack.</li> <li>Integrations: Propan is fully compatible with any HTTP framework you want</li> <li>MQ independent: Single interface to popular MQ:<ul> <li>Redis (based on redis-py)</li> <li>RabbitMQ (based on aio-pika)</li> <li>Kafka (based on aiokafka)</li> <li>SQS (based on aiobotocore)</li> <li>Nats (based on nats-py)</li> </ul> </li> <li>RPC: The framework supports RPC requests on top of message brokers, which will allow performing long operations on remote services asynchronously.</li> <li>Great to develop: CLI tool provides great development experience:<ul> <li>framework-independent way to manage the project environment</li> <li>application code hot reload</li> <li>robust application templates</li> </ul> </li> <li>Documentation: Propan automatically generates and presents an interactive AsyncAPI documentation for your project</li> <li>Testability: Propan allows you to test your app without external dependencies: you do not have to set up a Message Broker, you can use a virtual one!</li> </ul>"},{"location":"#declarative","title":"Declarative","text":"<p>With declarative tools you can define what you need to get. With traditional imperative tools you must write what you need to do.</p> <p>Take a look at classic imperative tools, such as aio-pika, pika, redis-py, nats-py, aiokafka, etc.</p> <p>This is the Quickstart with the aio-pika:</p> <pre><code>import asyncio\nimport aio_pika\n\nasync def main():\n    connection = await aio_pika.connect_robust(\n        \"amqp://guest:guest@127.0.0.1/\"\n    )\n\n    queue_name = \"test_queue\"\n\n    async with connection:\n        channel = await connection.channel()\n\n        queue = await channel.declare_queue(queue_name)\n\n        async with queue.iterator() as queue_iter:\n            async for message in queue_iter:\n                async with message.process():\n                    print(message.body)\n\nasyncio.run(main())\n</code></pre> <p>aio-pika is a great tool with a really easy learning curve. But it's still imperative. You need to connect, declare channel, queues, exchanges by yourself. Also, you need to manage connection, message, queue context to avoid any troubles.</p> <p>It is not a bad way, but it can be much easier.</p> <pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\napp = PropanApp(broker)\n\n@broker.handle(\"test_queue\")\nasync def base_handler(body):\n    print(body)\n</code></pre> <p>This is the Propan declarative way to write the same code. That is so much easier, isn't it?</p>"},{"location":"#type-casting","title":"Type casting","text":"<p>Propan uses <code>pydantic</code> to cast incoming function arguments to types according to their annotation.</p> <pre><code>from pydantic import BaseModel\n\n...\n\nclass SimpleMessage(BaseModel):\n    key: int\n\n@broker.handle(\"test2\")\nasync def second_handler(body: SimpleMessage):\n    assert isinstance(body.key, int)\n</code></pre>"},{"location":"#dependencies","title":"Dependencies","text":"<p>Propan has a dependencies management policy close to <code>pytest fixtures</code> and <code>FastAPI Depends</code> at the same time. Function arguments declare which dependencies you want are needed, and a special decorator delivers them from the global Context object.</p> <p>Already declared context fields are: app, broker, context (itself), logger and message. If you call a non-existent field, raises pydantic.error_wrappers.ValidationError value.</p> <p>But you can specify your own dependencies, call dependencies functions and more.</p> <pre><code>from logging import Logger\nfrom propan import Context, Depends\n\n...\n\nasync def base_dep(user_id: int) -&gt; bool:\n    return True\n\n@broker.handle(\"test\")\nasync def base_handler(user_id: int,\n                       dep: bool = Depends(base_dep),\n                       logger: Logger = Context()):\n    assert dep is True\n    logger.info(body)\n</code></pre>"},{"location":"#project-documentation","title":"Project Documentation","text":"<p>Propan automatically generates documentation for your project according to the AsyncAPI specification. You can work with both generated artifacts and place a Web view of your documentation on resources available to related teams.</p> <p>The availability of such documentation significantly simplifies the integration of services: you can immediately see what channels and message format the application works with. And most importantly, it won't cost anything - Propan has already created the docs for you!</p> <p></p>"},{"location":"#http-frameworks-integrations","title":"HTTP Frameworks integrations","text":""},{"location":"#any-framework","title":"Any Framework","text":"<p>You can use Propan <code>MQBrokers</code> without <code>PropanApp</code>. Just start and stop them according to your application lifespan.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import RedisBroker\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = RedisBroker(\"redis://localhost:6379\")\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n</code></pre> <pre><code>from propan import RabbitBroker\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n</code></pre> <pre><code>from propan import KafkaBroker\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = KafkaBroker(\"localhost:9092\")\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n</code></pre> <pre><code>from propan import SQSBroker\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = SQSBroker(\"http://localhost:9324\", ...)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n</code></pre> <pre><code>from propan import NatsBroker\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = NatsBroker(\"nats://localhost:4222\")\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n</code></pre>"},{"location":"#fastapi-plugin","title":"FastAPI Plugin","text":"<p>Also, Propan can be used as part of FastAPI.</p> <p>Just import a PropanRouter you need and declare the message handler using the <code>@event</code> decorator. This decorator is similar to the decorator <code>@handle</code> for the corresponding brokers.</p> <p>Tip</p> <p>When used this way, Propan does not utilize its own dependency system, but integrates into FastAPI. That is, you can use <code>Depends</code>, <code>BackgroundTasks</code> and other tools FastAPI as if it were a regular HTTP endpoint.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import RedisRouter\n\nrouter = RedisRouter(\"redis://localhost:6379\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, world!\"}\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, world!\"}\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import KafkaRouter\n\nrouter = KafkaRouter(\"localhost:9092\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, world!\"}\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import SQSRouter\n\nrouter = SQSRouter(\"http://localhost:9324\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, world!\"}\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import NatsRouter\n\nrouter = NatsRouter(\"nats://localhost:4222\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, world!\"}\n\napp.include_router(router)\n</code></pre> <p>Note</p> <p>More integration examples can be found here</p>"},{"location":"#supported-mq-brokers","title":"Supported MQ brokers","text":"<p>Need your help</p> <p>The framework is now in active development. We have a very long list of what has yet to be implemented and various brokers are only part of it. If you want to implement something from this list or help in any other way, take a look here</p> async sync RabbitMQ stable  WIP  Redis stable  planning  Nats stable  planning  Kafka beta  planning  SQS beta  planning  NatsJS beta  planning  ZeroMQ  WIP   planning  MQTT  planning   planning  Redis Streams  planning   planning  Pulsar  planning   planning  ActiveMQ  planning   planning  AzureSB  planning   planning"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#2023-07-03-0150-nastjs","title":"2023-07-03 0.1.5.0 NastJS","text":"<p>This update adds NATS JetStream(a persistent layer of NATS) supporting.</p> <p>Now you can work with this great broker without fear of losing messages, using the acknowledgment confirmation mechanism and the built-in <code>key-value</code> and <code>object</code> storages.</p> <p>Also, some internal classes were changed to further create synchronous interfaces based on them.</p>"},{"location":"CHANGELOG/#2023-06-26-0140-pydanticv2","title":"2023-06-26 0.1.4.0 PydanticV2","text":"<p>The main change in this update is the support for the PydanticV2 beta version.</p> <p>Also, this update still supports Pydantic v1, so if something with PydanticV2 breaks you can simply roll it back - the latest Propan continues to work without changes.</p> <p>Be careful: if you use Propan together with FastAPI when migrating to PydanticV2, you must install the version <code>fastapi&gt;=0.100.0b1</code>, which is also compatible with both versions of Pydantic. However, if you are working on versions of FastAPI <code>0.9*</code>, the current release is compatible with them as well (but only using PydanticV1).</p> <p>All test suites work correctly with all variations of the dependencies and on all supported Python versions.</p> <p>Other changes:</p> <p>Improved compatibility with FastAPI:</p> <ul> <li> <p>PropanRouter supports top-level dependencies      <pre><code>from propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(dependencies=[...])\n@router.event(\"test\", dependencies=[...])\nasync def handler(a: str, b: int):\n     ...\n</code></pre></p> </li> <li> <p>You can test <code>router.event</code> using <code>build_message</code> directly      <pre><code>import pytest, pydantic\nfrom propan.fastapi import RabbitRouter\nfrom propan.test.rabbit import build_message\n\nrouter = RabbitRouter()\n\n@router.event(\"test\")\nasync def handler(a: str, b: int):\n     ...\n\nwith pytest.raises(pydantic.ValidationError):\nhandler(build_message(\"Hello\", \"test\"), reraise_exc=True)\n</code></pre></p> </li> </ul> <p>Implemented BrokerRouter for the convenience of splitting the application code into imported submodules.</p> <pre><code>from propan import RabbitBroker, RabbitRouter\n\nrouter = RabbitRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n     ...\n\nbroker = RabbitBroker()\nbroker.include_router(router)\n</code></pre> <p>Added documentation section about custom message serialization (using the example with Protobuf).</p> <p>And also updated several other sections of the documentation, fixed several non-critical bugs, removed RabbitBroker deprecated methods, and increased test coverage of rare scenarios.</p>"},{"location":"CHANGELOG/#2023-06-14-0130-asyncapi","title":"2023-06-14 0.1.3.0 AsyncAPI","text":"<p>The current update adds functionality that I've been working hard on for the last month: Now Propan can automatically generate and host documentation for your application according to the AsyncAPI specification.</p> <p>You can simply provide related teams with a link to your documentation page, where they can get acquainted with all the parameters of the server used, channels, and the format of messages consumed by your service.</p> <p></p> <p>You can learn more about this functionality in the corresponding [documentation section] (getting_started/9_documentation.md).</p> <p>Also, the ability to determine the dependencies of the broker level and consumers has been added.:</p> <pre><code>from propan import RabbitBroker, Depends\n\nbroker = RabbitBroker(dependencies=[Depends(...)])\n\n@broker.handler(..., dependencies=[Depends(...)])\nasync def handler():\n    ...\n</code></pre>"},{"location":"CHANGELOG/#2023-06-13-01217","title":"2023-06-13 0.1.2.17","text":"<p>The current update is a sum of several changes and improvements released from the previous release.</p> <p>The main change - Propan no longer obliges you to receive a message in the form of only one argument. Your handler function can consume as many arguments as needed and also combine them with pydantic.BaseModel.</p> <pre><code>@router.handle(...)\nasync def handler(a: int, b: float):\n...\nasync def handler(a: Message, b: float, c: str):\n</code></pre> <p>A few public methods for declaring objects RabbitMQ were added to RabbitBroker:</p> <pre><code>broker = RabbitBroker()\n...\n     await broker.declare_exchange(RabbitExchange(\"test\"))\n     await broker.declare_queue(RabbitQueue(\"test\"))\n     channel: aio_pika.RobustChannel = broker.channel\n</code></pre> <p>To maintain the ability to send messages and initialize channels, an <code>after_startup</code> hook has been added to all FastAPI PropanRouters.</p> <pre><code>router = RabbitRouter()\n\n@router.after_startup\nasync def init_whatever(app: FastAPI): ...\n</code></pre> <p>In addition, the behavior of the <code>__init__</code> and <code>connect</code> methods for all brokers have been improved (now the <code>connect</code> parameters have priority and override the <code>__init__</code> parameters when connecting to the broker), a correct exception has been implemented when accessing an object unavailable for import, several errors have been fixed and other minor internal changes.</p>"},{"location":"CHANGELOG/#2023-05-28-0123-sqs-beta","title":"2023-05-28 0.1.2.3 SQS Beta","text":"<p>Propan added support for SQS as a message broker. This functionality is full tested.</p> <p>SQSBroker supports:</p> <ul> <li>message delivery</li> <li>test client, without the need to run ElasticMQ or connect to cloud SQS</li> <li>FastAPI Plugin</li> </ul> <p>SQSBroker not supports RPC yet.</p> <p>Also, current release include the following fixes:</p> <ul> <li>Kafka connection recovery</li> <li>Nats connection recovery</li> <li>Redis connection methods supports not-url parameters</li> </ul>"},{"location":"CHANGELOG/#2023-05-26-0122-nats-stable","title":"2023-05-26 0.1.2.2 NATS Stable","text":"<p><code>NatsBroker</code> is full tested now.</p> <p>Also, to Nats supporting added:</p> <ul> <li><code>TestNatsBroker</code> and test messages to local testing</li> <li>RPC supporting</li> <li><code>NatsRouter</code> for FastAPI</li> </ul>"},{"location":"CHANGELOG/#2023-05-23-0120-kafka","title":"2023-05-23 0.1.2.0 Kafka","text":"<p>Propan added support for Kafka as a message broker. This functionality is full tested.</p> <p>KafkaBroker supports:</p> <ul> <li>message delivery</li> <li>test client, without the need to run Kafka</li> <li>FastAPI Plugin</li> </ul> <p>KafkaBroker not supports RPC yet.</p>"},{"location":"CHANGELOG/#2023-05-18-0110-redis","title":"2023-05-18 0.1.1.0 REDIS","text":"<p>Propan added support for Redis Pub/Sub as a message broker. This functionality is full tested and described in the documentation.</p> <p>RedisBroker supports:</p> <ul> <li>message delivery by key or pattern</li> <li>test client, without the need to run Redis</li> <li>RPC requests over Redis Pub/Sub</li> <li>FastAPI Plugin</li> </ul> <p>Also, Propan CLI is able to generate templates to any supported broker</p> <pre><code>propan create async [broker] [APPNAME]\n</code></pre>"},{"location":"CHANGELOG/#2023-05-15-0100-stable","title":"2023-05-15 0.1.0.0 STABLE","text":"<p>Stable and fully documented Propan release!</p> <p>From the current release, no more breaking changes - use the framework safely!</p> <p>At the current release, all RabbitMQ use cases are supported, tested, and described in the documentation. Expect support for Redis (testing now), Kafka (in development), and full support for Nats (also in development) soon.</p>"},{"location":"CHANGELOG/#2023-05-01-0094","title":"2023-05-01 0.0.9.4","text":"<p>Great news! Now Propan can be used as a full part of FastAPI!</p> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.event(\"test\")\nasync def hello(m: dict) -&gt; dict:\n     return { \"response\": \"Hello Propan!\" }\n\napp.include_router(router)\n</code></pre> <p>You can find a complete example in documentation</p> <p>Also, added the ability to test your application without running external dependencies as a broker (for now only for RabbitMQ)!</p> <pre><code>from propan import RabbitBroker\nfrom propan.test import TestRabbitBroker\n\nbroker = RabbitBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n     return \"pong\"\n\nasync def test_publish():\n     async with TestRabbitBroker(broker) as test_broker:\n         await test_broker.start()\n         r = await test_broker.publish(\"ping\", queue=\"ping\", callback=True)\n     assert r == \"pong\"\n</code></pre> <p>Also added support for RPC over MQ (RabbitMQ only for now): <code>return</code> of your handler function will be sent in response to a message if a response is expected.</p> Breaking changes: <ul> <li>Brokers <code>publish_message</code> method has been renamed to <code>publish</code></li> <li>removed <code>declare</code> argument in <code>RabbitQueue</code> and <code>RabbitExchange</code> - now you need to use <code>passive</code></li> </ul>"},{"location":"CHANGELOG/#2023-04-18-009","title":"2023-04-18 0.0.9","text":"<p>Release is timed to accompany the release of fast-depends. Now it's used as the Propan Dependency Injection system deep inside. Context is an fast-depends CustomField child now.</p> Features: <ul> <li>Deep <code>Depends</code> nesting</li> <li>More flexable <code>Context</code> behavior</li> <li>Full tested and stable decorating system</li> <li>Add <code>propan.annotation</code> module to faster access to already declared context fields</li> </ul> Breaking changes <ul> <li><code>@use_context</code> was removed. Use <code>@apply_types</code> to solve <code>Context</code> now</li> <li><code>Alias</code> was merged with the <code>Context</code> field</li> <li>Access to context fields is not granted by function arguments decalration anymore</li> </ul> <p>Now you should use the following code:</p> <pre><code>from propan import Context, apply_types\n@apply_types\ndef func(logger = Context()): ...\n\n# or\nfrom propan import Context, apply_types\n@apply_types\ndef func(l = Context(\"logger\")): ...\n\n# or\nfrom propan import apply_types\nfrom propan.annotations import Logger\n@apply_types\ndef func(logger: Logger): ...\n</code></pre>"},{"location":"CHANGELOG/#2023-04-05-initial","title":"2023-04-05 INITIAL","text":"<p>Hello there! Congratulate everybody and me with the first stable Propan release!</p> Release features: Stable <ul> <li>async RabbitMQ broker</li> <li>depedencies injection features</li> <li>type casting</li> <li>CLI tool</li> </ul> Experimental <p>As an experimental feature in this release was added NATS (not Jetstream) supporting.</p> Next steps <ul> <li>Full NATS supporting (with Jetstream)</li> <li>Syncronous version of all brokers and app</li> <li>Kafka brokers</li> </ul>"},{"location":"alternatives/","title":"Alternative Frameworks","text":"<p>Propan is a pretty young framework. It has a lot of features, but you should know about possible alternatives. Some of them are focused on other aspects of microservices development, so you can find other features in them that can be helpful in your case.</p>"},{"location":"alternatives/#minos","title":"Minos","text":"<p>Minos is a framework which helps you create reactive microservices in Python. Internally, it leverages Event Sourcing, CQRS and a message driven architecture to fulfil the commitments of an asynchronous environment.</p> <p>The <code>minos</code> framework is built strongly inspired by the following set of patterns:</p> <ul> <li>Microservice architecture: Architect an application as a collection of loosely coupled services.</li> <li>Decompose by subdomain: Define services corresponding to Domain-Driven Design (DDD) subdomains</li> <li>Self-contained Service: Microservices can respond to request without waiting for the response from other service.</li> <li>Domain event: A service often needs to publish events when it updates its data. These events might be needed, for example, to update a CQRS view.</li> <li>Event Sourcing: Event sourcing persists the state of a business entity such an Order or a Customer as a sequence of state-changing events. Whenever the state of a business entity changes, a new event is appended to the list of events. Since saving an event is a single operation, it is inherently atomic. The application reconstructs an entity's current state by replaying the events.</li> <li>Messaging: Services communicating by exchanging messages over messaging channels. (Apache Kafka is used in this case)</li> <li>API gateway: Single entry point for all clients. The API gateway proxy/route to the appropriate service.</li> <li>Self Registration: Each service instance register on startup and unregister on stop.</li> </ul>"},{"location":"alternatives/#kombu","title":"Kombu","text":"<p>Kombu is a messaging library for Python.</p> <p>The aim of Kombu is to make messaging in Python as easy as possible by providing an idiomatic high-level interface for the AMQ protocol, and also provide proven and tested solutions to common messaging problems.</p> <ul> <li>Allows application authors to support several message server solutions by using pluggable transports.<ul> <li>AMQP transport using the py-amqp, redis, or <code>SQS</code>_ libraries.</li> <li>Virtual transports makes it really easy to add support for non-AMQP transports. There is already built-in support for Redis, Amazon SQS, Azure Storage Queues, Azure Service Bus, ZooKeeper, SoftLayer MQ, MongoDB and Pyro.</li> <li>In-memory transport for unit testing.</li> </ul> </li> <li>Supports automatic encoding, serialization and compression of message payloads.</li> <li>Consistent exception handling across transports.</li> <li>The ability to ensure that an operation is performed by gracefully handling connection and channel errors.</li> <li>Several annoyances with amqplib has been fixed, like supporting timeouts and the ability to wait for events on more than one channel.</li> <li>Projects already using carrot can easily be ported by using a compatibility layer.</li> </ul>"},{"location":"alternatives/#nameko","title":"Nameko","text":"<p>Nameko is a framework for building microservices in Python.</p> <p>It comes with built-in support for:</p> <ul> <li>RPC over AMQP</li> <li>Asynchronous events (pub-sub) over AMQP</li> <li>Simple HTTP GET and POST</li> <li>Websocket RPC and subscriptions (experimental)</li> </ul> <p>Out of the box you can build a service that can respond to RPC messages, dispatch events on certain actions, and listen to events from other services. It could also have HTTP interfaces for clients that can\u2019t speak AMQP, and a websocket interface for, say, Javascript clients.</p> <p>Nameko is also extensible. You can define your own transport mechanisms and service dependencies to mix and match as desired.</p> <p>Nameko strongly encourages the dependency injection pattern, which makes building and testing services clean and simple.</p>"},{"location":"help/","title":"HELP","text":"<p>Do you like Propan?</p> <p>Maybe you want to help the project, other users or the author?</p> <p>There are several ways you can do it.</p>"},{"location":"help/#support","title":"Support","text":"<p>Now the project is in active development on the bare enthusiasm of its author. If you want to help, but are not ready to spend time writing code/documentation, you can just give your feedback. This is the fuel that fires  enthusiasm.</p>"},{"location":"help/#tweet-about-propan","title":"Tweet about Propan","text":"<p>Tweet about Propan and let me and others know why you like it. \ud83c\udf89</p> <p>It's very impotant for now to let others know about the project: the bigger community we have - the better project will be!</p>"},{"location":"help/#follow-propan-on-twitter","title":"Follow Propan on Twitter","text":"<p>Follow @PropanFramework on Twitter to get the latest news about Propan. \ud83d\udc26</p> <p>Here I publish all backstages and news about Propan development!</p>"},{"location":"help/#star-propan-in-github","title":"Star Propan in GitHub","text":"<p>You can show your interest by putting a \"star\" Propan on GitHub(clicking the star button at the top right):</p> <p>https://github.com/Lancetnik/Propan/</p> <p>The more stars are there, the easier for other users it is to find the project and to see that is it already useful for many others.</p>"},{"location":"help/#watch-the-github-repository-for-releases","title":"Watch the GitHub repository for releases","text":"<p>You can \"watch\" Propan on GitHub  (clicking the \"watch\" button at the top right):</p> <p>https://github.com/Lancetnik/Propan/</p> <p>There you can also specify in the settings - \"Release only\". This way you will receive notifications only about important changes in the repository.</p>"},{"location":"help/#contact-the-author","title":"Contact the author","text":"<p>You can directly contact me (Nikita Pastukhov / <code>Lancetnik</code>), the author.</p> <p>I will be very grateful if you tell your opinion about the project or its usage experience.</p> <p>You can also subscribe to me on GitHub to receive notifications about my other open-source projects.</p> <p>Follow me on Twitter to hear when I make announcements or release new tools.</p>"},{"location":"help/#participate-in-discussions","title":"Participate in discussions","text":"<p>You can participate in discussions on GitHub.</p> <p>Ask your question, tell about your usage experience, suggest an idea or help others solve their problems - in any case, thank you for your participation in the life of the project.</p>"},{"location":"help/#contributors","title":"Contributors","text":"<p>Or you can join to the following list</p> <p> </p> <p>Thanks for all of these amazing peoples made the project better!</p>"},{"location":"migration/","title":"Migration to FastStream","text":"<p>Propan project is superceeded by FastStream.</p> <p>FastStream is a new package based on the ideas and experiences gained from FastKafka and Propan. By joining our forces, we picked up the best from both packages and created a unified way to write services capable of processing streamed data regardless of the underlying protocol.</p> <p>I\u2019ll continue to maintain Propan package, but new development will be in FastStream. If you are starting a new service, FastStream is the recommended way to do it.</p> <p>For now FastStream supports Kafka and RabbitMQ. Other brokers support will be added in a few months.</p>"},{"location":"migration/#migration","title":"Migration","text":"<p>Your current Propan application should work with the FastStream as well. You just need to change a few lines of code:</p> <ul> <li>Replace your <code>PropanApp</code> instance with <code>FastStream</code> one</li> <li>replace all <code>@broker.hanler(...)</code> usages to <code>@broker.subscriber(...)</code></li> <li>change broker imports to <code>fasttream.rabbit</code>, <code>faststream.kafka</code>, e.t.c.</li> </ul> <p>Also, if you are using RPC-supporting brokers, you should mv all <code>broker.publish(..., callback=True)</code> calls to <code>broker.publish(..., rpc=True)</code>.</p> <p>And so the job is done! Your Propan application was migrated to the FastStream!</p>"},{"location":"migration/#removed-features","title":"Removed features","text":"<p>Unfortunately, during the development of FastStream, some features were removed, namely:</p> <ul> <li>template generation</li> <li>Kafka-RPC (and SQS in future) requests</li> </ul> <p>Now the project templates will be implemented in a separate repository and distributed via cookiecutter.</p> <p>In the case of RPC requests, it was a mistake to claim that we would be able to support their implementation through a unified syntax. Support for RPC in brokers that were not designed for such functionality (for example, Kafka and SQS) was implemented in a poorly scalable way, and the high-level syntax hid implementation flaws from the user. Now you will have to implement this functionality yourself, but in the documentation, you will find a detailed guide on how to do it.</p>"},{"location":"migration/#added-features","title":"Added Features","text":"<p>FastStream contains many additional features. Here is a short list of them:</p> Multiple subscription <p>Now you can subscribe one function to many different message sources <pre><code>@broker.subscriber(\"stream1\")\n@broker.subscriber(\"stream2\")\nasync def handler(msg): ...\n</code></pre></p> Application level filters <p>You can declare multiple handlers for your message flow and determine which one to use right at the application level <pre><code>@broker.subscriber(\n    \"stream\",\n    filter=lambda msg: msg.content_type == \"application/json\",\n)\nasync def json_handler(msg): ...\n\n@broker.subscriber(\"stream\")\nasync def default_handler(msg): ...\n</code></pre></p> Structured publishers <p>FastStream contains a fundamentally new decorator - <code>@broker.publisher(...)</code>, which allows you to describe your services as structured stages of message processing, as well as display outgoing flows in the AsyncAPI schema <pre><code>@broker.subscriber(\"in-stream\")\n@broker.publisher(\"out-stream\")\nasync def handler(msg): ...\n</code></pre></p> <p>And also:</p> <ul> <li>new testing features (testable lifespans, publisher and subscriber mock objects)</li> <li>better customization: decoders, new middleware</li> <li>better AsyncAPI support</li> <li>performance improvement</li> </ul> <p>But the most important difference is that now there is a whole AirtAI team behind the framework (and me), so you will get the best support and maintenance of the framework!</p>"},{"location":"contributing/1_todo/","title":"TODO","text":"<p>The project is currently under active development and I really need your help to bring it to release as soon as possible!</p>"},{"location":"contributing/1_todo/#documentation","title":"Documentation","text":"<p>At the moment, the main activity for the development of the project is the preparation of documentation.</p> <p>You will be very helpful if</p> <ul> <li>Correct errors, typos, inaccuracies</li> <li>Edit or supplement individual sections where something is not described clearly enough</li> <li>Add translations of individual pages or sections</li> </ul> <p>To participate in the development of documentation, go to the following section</p>"},{"location":"contributing/1_todo/#code","title":"Code","text":"<p>All actual tasks you can find at project Issues.</p> <p>To start developing the project, go to the following section.</p> <p>If you want to develop your own adapter for any broker, you will find a lot of useful information in this section.</p>"},{"location":"contributing/2_contributing-index/","title":"Developing","text":"<p>If you already cloned the repository and you know that you need to deep dive in the code, here are some guidelines to set up your environment.</p>"},{"location":"contributing/2_contributing-index/#commits","title":"Commits","text":"<p>When making commits, use semantic commit messages system.</p> <p>Format: <code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></p> <p>Where <code>&lt;scope&gt;</code> is optional.</p> <pre><code>feat: add synchronous RabbitMQ wrapper\n^--^  ^------------^\n|     |\n|     +-&gt; Summary in present tense.\n|\n+-------&gt; Type: chore, docs, feat, fix, refactor, style, or test.\n</code></pre> <p>More Examples:</p> <ul> <li><code>feat</code>: (New feature for the user, not a new feature for build script)</li> <li><code>fix</code>: (Bug fix for the user, not a fix to a build script)</li> <li><code>docs</code>: (Changes to the documentation)</li> <li><code>style</code>: (Formatting, linting)</li> <li><code>refactor</code>: (Refactoring code, eg. renaming a variable)</li> <li><code>test</code>: (Adding missing tests, refactoring tests)</li> <li><code>chore</code>: (Updating grunt tasks etc.)</li> </ul> <p>References:</p> <ul> <li>https://www.conventionalcommits.org/</li> <li>https://sparkbox.com/foundry/semantic_commit_messages</li> <li>http://karma-runner.github.io/1.0/dev/git-commit-msg.html</li> </ul>"},{"location":"contributing/2_contributing-index/#virtual-environment-with-venv","title":"Virtual environment with <code>venv</code>","text":"<p>You can create a virtual environment in a directory using Python's <code>venv</code> module:</p> <pre><code>python -m venv venv\n</code></pre> <p>That will create a directory <code>./venv/</code> with the Python binaries and then you will be able to install packages for that isolated environment.</p>"},{"location":"contributing/2_contributing-index/#activate-the-environment","title":"Activate the environment","text":"<p>Activate the new environment with:</p> <pre><code>source ./venv/bin/activate\n</code></pre> <p>Make sure you have the latest pip version on your virtual environment to</p> <pre><code>python -m pip install --upgrade pip\n</code></pre>"},{"location":"contributing/2_contributing-index/#pip","title":"pip","text":"<p>After activating the environment as described above:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>It will install all the dependencies and your local Propan in your local environment.</p>"},{"location":"contributing/2_contributing-index/#using-your-local-propan","title":"Using your local Propan","text":"<p>If you create a Python file that imports and uses Propan, and run it with the Python from your local environment, it will use your local Propan source code.</p> <p>And if you update that local Propan source code, as it is installed with <code>-e</code>, when you run that Python file again, it will use the fresh version of Propan you just edited.</p> <p>That way, you don't have to \"install\" your local version to be able to test every change.</p> <p>To use your local Propan CLI type:</p> <pre><code>python -m propan ...\n</code></pre>"},{"location":"contributing/2_contributing-index/#tests","title":"Tests","text":""},{"location":"contributing/2_contributing-index/#pytest","title":"Pytest","text":"<p>To run tests with your current Propan application and Python environment use:</p> <pre><code>pytest tests\n# or\nbash ./scripts/test.sh\n# with coverage output\nbash ./scripts/test-cov.sh\n</code></pre> <p>There are some pytest marks at project:</p> <ul> <li>slow</li> <li>rabbit</li> <li>nats</li> <li>sqs</li> <li>kafka</li> <li>redis</li> <li>all</li> </ul> <p>Default pytest calling runs \"not slow\" tests.</p> <p>To run all tests use:</p> <pre><code>pytest -m 'all'\n</code></pre> <p>Also if you didn't up local rabbit or nats intance, run tests without that dependencies</p> <pre><code>pytest -m 'not rabbit and not nats'\n</code></pre> <p>To run all tests based on RabbitMQ, NATS or another dependencies you should run first following docker-compose.yml</p> <pre><code>version: \"3\"\n\nservices:\n  rabbit:\n    image: rabbitmq:3\n    ports:\n      - 5672:5672\n\n  redis:\n    image: redis:alpine3.18\n    ports:\n      - 6379:6379\n\n  nats:\n    image: nats\n    command: -js\n    ports:\n      - 4222:4222\n      - 8222:8222  # management\n\n  kafka:\n    image: bitnami/kafka:3.5.0\n    ports:\n      - 9092:9092\n    environment:\n      - KAFKA_ENABLE_KRAFT=yes\n      - KAFKA_CFG_NODE_ID=1\n      - KAFKA_CFG_PROCESS_ROLES=broker,controller\n      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER\n      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093\n      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT\n      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092\n      - KAFKA_BROKER_ID=1\n      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093\n      - ALLOW_PLAINTEXT_LISTENER=yes\n\n  sqs:\n    image: softwaremill/elasticmq-native\n    ports:\n      - 9324:9324\n</code></pre> <pre><code>docker compose up -d\n</code></pre>"},{"location":"contributing/2_contributing-index/#hatch","title":"Hatch","text":"<p>If you are using hatch use following environments to run tests:</p>"},{"location":"contributing/2_contributing-index/#test","title":"TEST","text":"<p>Run tests at all python 3.7-3.11 versions.</p> <p>All python versions should be avalilable at your system.</p> <pre><code># Run fast smoketesting at all python 3.7-3.11 versions\nhatch run test:run\n\n# Run all tests at all python versions\nhatch run test:run-all\n</code></pre>"},{"location":"contributing/2_contributing-index/#test-last","title":"TEST-LAST","text":"<p>Run tests at python 3.11 version.</p> <pre><code># Run smoke tests at python 3.11\nhatch run test-last:run\n\n# Run all tests at python 3.11\nhatch run test-last:run-all\n\n# Run all tests at python 3.11 and show coverage\nhatch run test-last:cov\n</code></pre>"},{"location":"contributing/3_docs/","title":"DOCS","text":""},{"location":"contributing/3_docs/#how-to-help","title":"How to help","text":"<p>You will be of invaluable help if you contribute to the documentation.</p> <p>Such a contribution can be:</p> <ul> <li>Indications of inaccuracies, errors, typos</li> <li>Suggestions for editing individual sections</li> <li>Making additions</li> </ul> <p>You can report all this in [discussions] (https://github.com/Lancetnik/Propan/discussions ) on GitHub, start issue, or write about it in our telegram the group.</p> <p>Note</p> <p>Special thanks to those who are ready to offer help with the case and help in ** developing documentation , as well as translating it into ** other languages.</p>"},{"location":"contributing/3_docs/#how-to-get-started","title":"How to get started","text":"<p>To develop the documentation, you don't even need to install the entire Propan project as a whole.</p> <p>Enough:</p> <ol> <li>Clone the project repository</li> <li>Go to the <code>docs/</code> directory</li> <li>Create a virtual environment     <pre><code>python -m venv venv\n</code></pre></li> <li>Activate it     <pre><code>source venv/bin/activate\n</code></pre></li> <li>Install documentation dependencies     <pre><code>pip install -r requirements.txt\n</code></pre></li> <li>Start the local documentation server     <pre><code>mkdocs serve\n</code></pre></li> </ol> <p>Now all changes in the documentation files will be reflected on your local version of the site. After making all the changes, you can issue a <code>PR</code> with them - and I will gladly accept it!</p>"},{"location":"contributing/4_adapters/","title":"Create Custom Propan Broker","text":"<p>If you want to help me with the development of the project and develop a new PropanBroker for a not yet supported message broker from the plan or you just want to expand the functionality of Propan for internal usage, this instruction can be very helpful to you.</p> <p>In this section, we will go through the details of the implementation of brokers using examples from Propan.</p>"},{"location":"contributing/4_adapters/#parent-class","title":"Parent class","text":"<p>All brokers Propan are inherited from the parent class <code>propan.brokers.model.BrokerAsyncUsecase</code>.</p> <p>In order to create a broker, it is necessary to inherit from this class and implement all its abstract methods.</p> <pre><code>from typing import Any, Callable, Optional, TypeVar\n\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import PropanMessage\nfrom propan.brokers.push_back_watcher import BaseWatcher\nfrom propan.types import HandlerWrapper, SendableMessage\n\n\nT = TypeVar(\"T\")\n\n\nclass MyBroker(BrokerAsyncUsecase):\n    async def _connect(self, *args: Any, **kwargs: Any) -&gt; Any:\n        pass\n\n    async def close(self) -&gt; None:\n        pass\n\n    def handle(self, *args: Any, **kwargs: Any) -&gt; HandlerWrapper:\n        pass\n\n    async def start(self) -&gt; None:\n        pass\n\n    async def _parse_message(self, message: Any) -&gt; PropanMessage:\n        pass\n\n    async def _process_message(\n        self,\n        func: Callable[[PropanMessage], T],\n        watcher: Optional[BaseWatcher],\n    ) -&gt; Callable[[PropanMessage], T]:\n        pass\n\n    async def publish(\n        self,\n        message: SendableMessage,\n        *args: Any,\n        callback: bool = False,\n        callback_timeout: Optional[float] = None,\n        raise_timeout: bool = False,\n        **kwargs: Any,\n    ) -&gt; Any:\n        pass\n</code></pre> <p>Let's tackle each method one by one.</p>"},{"location":"contributing/4_adapters/#connecting-to-a-message-broker","title":"Connecting to a message broker","text":"<p>Two key methods, <code>_connect</code> and <code>close</code>, are responsible for the lifespan of your broker connection. Once these are implemented, the application with your adapter should initialize correctly and establish a connection with the message broker, (but will not process messages just yet).</p>"},{"location":"contributing/4_adapters/#_connect","title":"_connect","text":"<p>The <code>_connect</code> method initializes the connection to your message broker and returns the connection object, which will afterwards be available as <code>self._connection</code>.</p> <p>Tip</p> <p>If your broker requires the initialization of additional objects, they should be instantiated within this method as well.</p> <pre><code>import asyncio\nfrom typing import Any, Optional\n\n\nimport aio_pika\nfrom propan.brokers._model import BrokerAsyncUsecase\n\nclass RabbitBroker(BrokerAsyncUsecase):\n    _connection: Optional[aio_pika.RobustConnection]\n    _channel: Optional[aio_pika.RobustChannel]\n\n    async def _connect(\n        self,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; aio_pika.RobustConnection:\n        connection = await aio_pika.connect_robust(\n            *args, **kwargs, loop=asyncio.get_event_loop()\n        )\n\n        if self._channel is None:\n            self._channel = await connection.channel()\n\n        return connection\n</code></pre> <p>Note</p> <p><code>args</code> and <code>kwargs</code> will be passed to your method from either the  <code>__init__</code> or <code>connect</code> methods' arguments. The logic to resolve these arguments is implemented in the parent class, so you don't have to worry about it.</p> <p>Pay attention to the following lines: here, we initialize the <code>_channel</code> object, which is specific to the RabbitBroker.</p> <pre><code>class RabbitBroker(BrokerAsyncUsecase):\n    _connection: Optional[aio_pika.RobustConnection]\n    _channel: Optional[aio_pika.RobustChannel]\n\n    async def _connect(\n        self,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; aio_pika.RobustConnection:\n        connection = await aio_pika.connect_robust(\n            *args, **kwargs, loop=asyncio.get_event_loop()\n        )\n\n        if self._channel is None:\n            self._channel = await connection.channel()\n\n        return connection\n</code></pre>"},{"location":"contributing/4_adapters/#close","title":"close","text":"<p>Now, to shut down our broker properly, we implement the <code>close</code> method.</p> <pre><code>class RabbitBroker(BrokerAsyncUsecase):\n    ...\n\n    async def close(self) -&gt; None:\n        if self._channel is not None:\n            await self._channel.close()\n            self._channel = None\n\n        if self._connection is not None:\n            await self._connection.close()\n            self._connection = None\n</code></pre> <p>Note</p> <p>In the parent's <code>connect</code> method, the <code>_connect</code> method is invoked under the condition <code>self._connection is not None</code>. Therefore, it is important to set <code>self._connection</code> to <code>None</code> after terminating the connection.</p> <p>Once these methods are implemented, an application with your broker should be able to run successfully.</p>"},{"location":"contributing/4_adapters/#register-handlers","title":"Register handlers","text":"<p>In order for your broker to start processing messages, it is necessary to implement the handler registration method itself (<code>handle</code>) and the broker launch method (<code>start</code>).</p> <p>Also, your broker must store information about all registered handlers, so you will need to implement a <code>Handler</code> class specific to each broker.</p>"},{"location":"contributing/4_adapters/#handle","title":"handle","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Union, Optional\n\nfrom propan.types import HandlerWrapper, HandlerCallable\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import BaseHandler\nfrom propan.brokers.rabbit import RabbitExchange, RabbitQueue\n\n\n@dataclass\nclass Handler(BaseHandler):\n    queue: RabbitQueue\n    exchange: Optional[RabbitExchange] = None\n\n\nclass RabbitBroker(BrokerAsyncUsecase):\n    handlers: List[Handler]\n\n    def handle(\n        self,\n        queue: RabbitQueue,\n        exchange: Union[RabbitExchange, None] = None,\n        *,\n        retry: Union[bool, int] = False,\n    ) -&gt; HandlerWrapper:\n        def wrapper(func: HandlerCallable) -&gt; HandlerCallable:\n            func = self._wrap_handler(func, retry=retry)\n            handler = Handler(callback=func, queue=queue, exchange=exchange)\n            self.handlers.append(handler)\n\n            return func\n\n        return wrapper\n</code></pre> <p>In the highlighted fragments, we store information about registered handlers inside our broker.</p> <p>Additionally, it's crucial to call the parent method <code>_wrap_handler</code>. This arranges all decorators in the correct order, transforming the original function into a Propan handler.</p> <pre><code>            func = self._wrap_handler(func, retry=retry)\n            handler = Handler(callback=func, queue=queue, exchange=exchange)\n            self.handlers.append(handler)\n\n            return func\n</code></pre>"},{"location":"contributing/4_adapters/#start","title":"start","text":"<p>In the <code>start</code> method, we establish a connection to our message broker and perform all the necessary operations to launch our handlers.</p> <p>Here is a somewhat simplified code for registering the <code>handlers</code>, however, it demonstrates the concept in full.</p> <pre><code>class RabbitBroker(BrokerAsyncUsecase):\n    ...\n    async def start(self) -&gt; None:\n        await super().start()\n\n        for handler in self.handlers:\n            queue = await self._channel.declare_queue(**handler.queue.dict())\n            func = handler.callback\n            await queue.consume(func)\n</code></pre> <p>There are two possible options here:</p> <ul> <li>the library we use to work with the broker supports the <code>callbacks</code> mechanism (like aio-pika does for RabbitMQ)</li> <li>the library supports message iteration only</li> </ul> <p>In the second case, we were less lucky, so we need to convert the loop into a <code>callback</code>. This can be done, for example, using <code>asyncio.Task</code>, as in the Redis example. However, in this case, do not forget to correctly cancel these tasks in the <code>close</code> method.</p> <pre><code>import asyncio\nfrom dataclasses import dataclass\nfrom typing import Any, List, NoReturn, Optional\n\nfrom redis.asyncio.client import PubSub, Redis\n\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import BaseHandler\n\n\n@dataclass\nclass Handler(BaseHandler):\n    channel: str\n    pattern: bool = False\n\n    task: Optional[\"asyncio.Task[Any]\"] = None\n    subscription: Optional[PubSub] = None\n\n\nclass RedisBroker(BrokerAsyncUsecase):\n    handlers: List[Handler]\n    _connection: Redis\n\n    async def close(self) -&gt; None:\n        for h in self.handlers:\n            if h.task is not None:\n                h.task.cancel()\n\n            if h.subscription is not None:\n                await h.subscription.unsubscribe()\n                await h.subscription.reset()\n\n        if self._connection is not None:\n            await self._connection.close()\n            self._connection = None\n\n    async def start(self) -&gt; None:\n        await super().start()\n\n        for handler in self.handlers:\n            psub = self._connection.pubsub()\n            await psub.subscribe(handler.channel)\n\n            handler.subscription = psub\n            handler.task = asyncio.create_task(_consume(handler, psub))\n\n\nasync def _consume(handler: Handler, psub: PubSub) -&gt; NoReturn:\n    while True:\n        m = await psub.get_message(\n            ignore_subscribe_messages=True,\n            timeout=1.0,\n        )\n        if m:\n            await handler.callback(m)\n        await asyncio.sleep(0.01)\n</code></pre> <p>After that, your broker should send a received message to the functions decorated with <code>handle</code>. However, these functions will fail with an error.</p>"},{"location":"contributing/4_adapters/#processing-incoming-messages","title":"Processing incoming messages","text":"<p>In order for incoming messages to be processed correctly, two more methods must be implemented: <code>_parse_message</code> and <code>_process_message</code>.</p>"},{"location":"contributing/4_adapters/#_parse_message","title":"_parse_message","text":"<p>This method converts an incoming message to the Propan message type.</p> <pre><code>import aio_pika\n\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import PropanMessage\n\n\nclass RabbitBroker(BrokerAsyncUsecase):\n    ...\n    @staticmethod\n    async def _parse_message(\n        message: aio_pika.message.IncomingMessage,\n    ) -&gt; PropanMessage:\n        return PropanMessage(\n            body=message.body,\n            headers=message.headers,\n            reply_to=message.reply_to or \"\",\n            message_id=message.message_id,\n            content_type=message.content_type or \"\",\n            raw_message=message,\n        )\n</code></pre> <p>In this case, only <code>body: bytes</code> and <code>raw_message: Any</code> are required fields. The remaining fields can be obtained both from an incoming message headers and from its body, if the message broker used does not have built-in mechanisms for transmitting the corresponding parameters. It all depends on your implementation of the <code>publish</code> method.</p>"},{"location":"contributing/4_adapters/#_process_message","title":"_process_message","text":"<p>Everything is relatively simple here: if the message broker used supports the <code>ack</code>, <code>nack</code> mechanisms, then we should process them here. Also in this place, response publishing should be implemented to support RPC over MQ. If the broker does not support confirmation of message processing, then we simply execute our <code>handler</code>.</p> <p>Here, for example, is an option with message status processing:</p> <pre><code>from functools import wraps\nfrom typing import Optional, TypeVar, Callable\n\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import PropanMessage\nfrom propan.brokers.push_back_watcher import BaseWatcher, WatcherContext\n\nT = TypeVar(\"T\")\n\nclass RabbitBroker(BrokerAsyncUsecase):\n    ...\n    def _process_message(\n        self, func: Callable[[PropanMessage], T], watcher: Optional[BaseWatcher]\n    ) -&gt; Callable[[PropanMessage], T]:\n        @wraps(func)\n        async def wrapper(message: PropanMessage) -&gt; T:\n            pika_message = message.raw_message\n            if watcher is None:\n                context = pika_message.process()\n            else:\n                context = WatcherContext(\n                    watcher,\n                    message,\n                    on_success=pika_message.ack,\n                    on_error=pika_message.nack,\n                    on_max=pika_message.reject,\n                )\n\n            async with context:\n                r = await func(message)\n                if message.reply_to:\n                    await self.publish(\n                        message=r,\n                        routing_key=message.reply_to,\n                        correlation_id=pika_message.correlation_id,\n                    )\n\n                return r\n\n        return wrapper\n</code></pre> <p>And without processing:</p> <pre><code>from functools import wraps\nfrom typing import Optional, TypeVar, Callable\n\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import PropanMessage\nfrom propan.brokers.push_back_watcher import BaseWatcher\n\nT = TypeVar(\"T\")\n\nclass RedisProcess(BrokerAsyncUsecase):\n    ...\n    def _process_message(\n            self,\n            func: Callable[[PropanMessage], T],\n            watcher: Optional[BaseWatcher],\n        ) -&gt; Callable[[PropanMessage], T]:\n            @wraps(func)\n            async def wrapper(message: PropanMessage) -&gt; T:\n                r = await func(message)\n                if message.reply_to:\n                    await self.publish(r or \"\", message.reply_to)\n                return r\n\n            return wrapper\n</code></pre> <p>P.S: the following code is correct too, but without state processing and RPC support.</p> <pre><code>def _process_message(\n    self, func: Callable[[PropanMessage], T], watcher: Optional[BaseWatcher]\n) -&gt; Callable[[PropanMessage], T]:\n    @wraps(func)\n    async def wrapper(message: PropanMessage) -&gt; T:\n        return await func(message)\n\n    return wrapper\n</code></pre>"},{"location":"contributing/4_adapters/#publishing-messages","title":"Publishing messages","text":"<p>The last step we need to implement a sending messages method. This can be either the simplest stage (if we don't want or can't implement RPC right now) or the most complex and creative.</p> <p>In the example below, I will omit the implementation of RPC, since each broker needs its own implementation. We will just send messages here.</p> <pre><code>from typing import Optional, Dict, Any\n\nfrom propan.types import SendableMessage\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers.redis.schemas import RedisMessage\n\n\nclass RedisProcess(BrokerAsyncUsecase):\n    ...\n    async def publish(\n        self,\n        message: SendableMessage = \"\",\n        channel: str = \"\",\n        *,\n        reply_to: str = \"\",\n        headers: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        if self._connection is None:\n            raise ValueError(\"Redis connection not established yet\")\n\n        msg, content_type = self._encode_message(message)\n\n        await self._connection.publish(\n            channel,\n            RedisMessage(\n                data=msg,\n                headers={\n                    \"content-type\": content_type or \"\",\n                    **(headers or {}),\n                },\n                reply_to=reply_to,\n            ).json(),\n        )\n</code></pre> <p>Congratulations, after implementing all these methods, you will have a broker capable of correctly sending and receiving messages.</p>"},{"location":"contributing/4_adapters/#logging","title":"Logging","text":"<p>In order to log incoming messages in a broker specific format, you also need to override several methods.</p> <p>First you need to reset the standard logging method by overriding the <code>__init__</code> method.</p> <pre><code>from typing import Any, Optional\n\nfrom propan.brokers._model import BrokerAsyncUsecase\n\n\nclass RabbitBroker(BrokerAsyncUsecase):\n    def __init__(\n        self,\n        *args: Any,\n        log_fmt: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        super().__init__(*args, log_fmt=log_fmt, **kwargs)\n</code></pre> <p>Then, you should define a logging format</p> <pre><code>class RabbitBroker(BrokerAsyncUsecase):\n    __max_exchange_len: int\n    __max_queue_len: int\n\n    def __init__(\n        self,\n        *args: Any,\n        log_fmt: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        super().__init__(*args, log_fmt=log_fmt, **kwargs)\n\n        self.__max_queue_len = 4\n        self.__max_exchange_len = 4\n\n    @property\n    def fmt(self) -&gt; str:\n        return super().fmt or (\n            \"%(asctime)s %(levelname)s - \"\n            f\"%(exchange)-{self.__max_exchange_len}s | \"\n            f\"%(queue)-{self.__max_queue_len}s | \"\n            f\"%(message_id)-10s \"\n            \"- %(message)s\"\n        )\n</code></pre> <p>The next step is to implement the <code>_get_log_context</code> method, which will add broker specific fields to log message.</p> <pre><code>class RabbitBroker(BrokerAsyncUsecase):\n    def _get_log_context(\n        self,\n        message: Optional[PropanMessage],\n        queue: RabbitQueue,\n        exchange: Optional[RabbitExchange] = None,\n    ) -&gt; Dict[str, Any]:\n        return {\n            \"queue\": queue.name,\n            \"exchange\": exchange.name if exchange else \"default\",\n            **super()._get_log_context(message),\n        }\n</code></pre> <p>This method always takes <code>message</code> as the first argument. You must pass other arguments there by yourself.</p> <p>Where? - Right in the <code>handle</code> method</p> <pre><code>    ...\n    def handle(\n        self,\n        queue: RabbitQueue,\n        exchange: Union[RabbitExchange, None] = None,\n        *,\n        retry: Union[bool, int] = False,\n    ) -&gt; HandlerWrapper:\n\n        def wrapper(func: HandlerCallable) -&gt; HandlerCallable:\n            func = self._wrap_handler(\n                func,\n                queue=queue,\n                exchange=exchange,\n                retry=retry,\n            )\n            ....\n</code></pre> <p>All custom arguments passed to the <code>_wrap_handler</code> function will be further passed to your <code>_get_log_context</code> method.</p> <p>Now your broker not only sends and receives messages, but also logs incoming messages in its own format. Congratulations, you are breathtaken!</p> <p>Success</p> <p>If you have implemented a broker for your source I am waiting for your PR! I am ready to help you with testing, implementation of specific parts, documentation and everything else. Your work will definitely become a part of Propan.</p>"},{"location":"getting_started/10_settings/","title":"Settings and Environment Variables","text":"<p>In many cases your application could need some external settings or configurations, for example Message Broker connection or database credentials.</p> <p>For this reason it's common to provide them in environment variables that are read by the application.</p>"},{"location":"getting_started/10_settings/#pydantic-settings","title":"Pydantic <code>Settings</code>","text":"<p>Fortunately, Pydantic provides a great utility to handle these settings coming from environment variables with Pydantic: Settings management.</p>"},{"location":"getting_started/10_settings/#install-pydantic-settings","title":"Install <code>pydantic-settings</code>","text":"<p>First, install the <code>pydantic-settings</code> package:</p> <pre><code>$ pip install pydantic-settings\n---&gt; 100%\n</code></pre> <p>Info</p> <p>In Pydantic v1 it came included with the main package. Now it is distributed as this independent package so that you can choose to install it or not if you don't need that functionality.</p>"},{"location":"getting_started/10_settings/#create-the-settings-object","title":"Create the <code>Settings</code> object","text":"<p>Import <code>BaseSettings</code> from Pydantic and create a sub-class, very much like with a Pydantic model.</p> <p>The same way as with Pydantic models, you declare class attributes with type annotations, and possibly default values.</p> <p>You can use all the same validation features and tools you use for Pydantic models, like different data types and additional validations with <code>Field()</code>.</p> Pydantic v2Pydantic v1 config.py<pre><code>from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    url: str = \"\"\n    queue: str = \"test-queue\"\n\nsettings = Settings()\n</code></pre> <p>Info</p> <p>In Pydantic v1 you would import <code>BaseSettings</code> directly from <code>pydantic</code> instead of from <code>pydantic_settings</code>.</p> config.py<pre><code>from pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    url: str = \"\"\n    queue: str = \"test-queue\"\n\nsettings = Settings()\n</code></pre> <p>Then, when you create an instance of that <code>Settings</code> class (in this case, in the <code>settings</code> object), Pydantic will read the environment variables in a case-insensitive way, so, an upper-case variable <code>APP_NAME</code> will still be read for the attribute <code>app_name</code>.</p> <p>Next it will convert and validate the data. So, when you use that <code>settings</code> object, you will have data of the types you declared (e.g. <code>items_per_user</code> will be an <code>int</code>).</p>"},{"location":"getting_started/10_settings/#use-the-settings","title":"Use the <code>settings</code>","text":"<p>Then you can use the new <code>settings</code> object in your application:</p> serve.py<pre><code>from propan import PropanApp\nfrom propan.rabbit import RabbitBroker\n\nfrom config import setting\n\nbroker = RabbitBroker(settings.url)\napp = PropanApp(broker)\n\n@broker.handle(settings.queue)\nasync def handler(msg):\n    ...\n</code></pre>"},{"location":"getting_started/10_settings/#run-the-application","title":"Run the application","text":"<p>Next, you would run the application passing the configurations as environment variables, for example you could set an <code>URL</code>:</p> <pre><code>$ URL=\"amqp://guest:guest@localhost:5672\" propan run serve:app\n</code></pre> <p>Tip</p> <p>To set multiple env vars for a single command just separate them with a space, and put them all before the command.</p>"},{"location":"getting_started/10_settings/#reading-a-env-file","title":"Reading a <code>.env</code> file","text":"<p>If you have many settings that possibly change a lot, maybe in different environments, it might be useful to put them on a file and then read them from it as if they were environment variables.</p> <p>This practice is common enough that it has a name, these environment variables are commonly placed in a file <code>.env</code>, and the file is called a \"dotenv\".</p> <p>Tip</p> <p>A file starting with a dot (<code>.</code>) is a hidden file in Unix-like systems, like Linux and macOS.</p> <p>But a dotenv file doesn't really have to have that exact filename.</p> <p>Pydantic has support for reading from these types of files using an external library. You can read more at Pydantic Settings: Dotenv (.env) support.</p> <p>Tip</p> <p>For this to work, you need to <code>pip install python-dotenv</code>.</p>"},{"location":"getting_started/10_settings/#the-env-file","title":"The <code>.env</code> file","text":"<p>You could have a <code>.env</code> file with:</p> <pre><code>URL=\"amqp://guest:guest@localhost:5672\"\nQUEUE=\"test-queue\"\n</code></pre>"},{"location":"getting_started/10_settings/#read-settings-from-env","title":"Read settings from <code>.env</code>","text":"<p>And then update your <code>config.py</code> with:</p> <pre><code>import os\n\nclass Settings(BaseSettings):\n    url: str\n    queue: str = \"test-queue\"\n\nsettings = Settings(_env_file=os.getenv(\"ENV\", \".env\"))\n</code></pre> <p>This way you are able to specify different <code>.env</code> files right from your terminal. It can be extremely helpful in testing/production cases.</p> <p>Note</p> <p>By default Pydantic tries to find <code>.env</code> field in this case, but it is OK, if there are no any <code>.env</code> file. Pydantic just use a default fields values.</p>"},{"location":"getting_started/10_settings/#choose-env-file-at-start","title":"Choose <code>.env</code> file at start","text":"<p>Now you can run the apllication with various <code>.env</code> files like:</p> <pre><code>$ ENV=.local.env propan run serve:app\n</code></pre> <p>Or, probably, production</p> <pre><code>$ ENV=.production.env propan run serve:app\n</code></pre> <p>Or even test environment</p> <pre><code>$ ENV=.test.env pytest\n</code></pre> &lt;/div"},{"location":"getting_started/1_quick-start/","title":"QUICK START","text":"<p>Install using <code>pip</code>:</p> RedisRabbitMQKafkaSQSNATS <p> <pre><code>$ pip install \"propan[async-redis]\"\n---&gt; 100%\n</code></pre> </p> <p>Tip</p> <p>To start a new project we need a test broker container <pre><code>docker run -d --rm -p 6379:6379 --name test-mq redis\n</code></pre></p> <p> <pre><code>$ pip install \"propan[async-rabbit]\"\n---&gt; 100%\n</code></pre> </p> <p>Tip</p> <p>To start a new project we need a test broker container <pre><code>docker run -d --rm -p 5672:5672 --name test-mq rabbitmq\n</code></pre></p> <p> <pre><code>$ pip install \"propan[async-kafka]\"\n---&gt; 100%\n</code></pre> </p> <p>Tip</p> <p>To start a new project we need a test broker container <pre><code>docker run -d --rm -p 9092:9092 --name test-mq \\\n-e KAFKA_ENABLE_KRAFT=yes \\\n-e KAFKA_CFG_NODE_ID=1 \\\n-e KAFKA_CFG_PROCESS_ROLES=broker,controller \\\n-e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER \\\n-e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093 \\\n-e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT \\\n-e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092 \\\n-e KAFKA_BROKER_ID=1 \\\n-e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093 \\\n-e ALLOW_PLAINTEXT_LISTENER=yes \\\nbitnami/kafka\n</code></pre></p> <p> <pre><code>$ pip install \"propan[async-sqs]\"\n---&gt; 100%\n</code></pre> </p> <p>Tip</p> <p>To start a new project we need a test broker container <pre><code>docker run -d --rm -p 9324:9324 --name test-mq softwaremill/elasticmq-native\n</code></pre></p> <p> <pre><code>$ pip install \"propan[async-nats]\"\n---&gt; 100%\n</code></pre> </p> <p>Tip</p> <p>To start a new project we need a test broker container <pre><code>docker run -d --rm -p 4222:4222 --name test-mq nats -js\n</code></pre></p>"},{"location":"getting_started/1_quick-start/#basic-usage","title":"Basic usage","text":"<p>To create a basic application, add the following code to a new file (e.g. <code>serve.py</code>):</p> RedisRabbitMQKafkaSQSNATS serve.py<pre><code>from propan import PropanApp, RedisBroker\n\nbroker = RedisBroker(\"redis://localhost:6379\")\n\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n</code></pre> serve.py<pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n</code></pre> serve.py<pre><code>from propan import PropanApp, KafkaBroker\n\nbroker = KafkaBroker(\"localhost:9092\")\n\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n</code></pre> serve.py<pre><code>from botocore import UNSIGNED\nfrom aiobotocore.config import AioConfig\nfrom propan import PropanApp, SQSBroker\n\nbroker = SQSBroker(\n    url=\"http://localhost:9324\",\n    region_name=\"us-west-2\",\n    config = AioConfig(signature_version=UNSIGNED)\n)\n\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n</code></pre> serve.py<pre><code>from propan import PropanApp, NatsBroker\n\nbroker = NatsBroker(\"nats://localhost:4222\")\n\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n</code></pre> <p>And just run this command:</p> <pre><code>$ propan run serve:app\n\n2023-04-10 23:39:41,145 INFO     - Propan app starting...\n2023-04-10 23:39:41,151 INFO     - `base_handler` waiting for messages\n2023-04-10 23:39:41,152 INFO     - Propan app started successfully! To exit press CTRL+C\n</code></pre>"},{"location":"getting_started/1_quick-start/#project-template","title":"Project template","text":"<p>Propan CLI is able to generate a production-ready application template:</p> <pre><code>$ propan create async [broker] [projectname]\nCreate Propan project template at: /home/user/projectname\n</code></pre> <p>Note</p> <p>Project template requires <code>pydantic[dotenv]</code> installation to run</p> <p>Just run the created project:</p> <pre><code>### Run broker first\n$ docker compose --file [projectname]/docker-compose.yaml up -d [broker]\n\n### Run project\n$ propan run [projectname].app.serve:app --env=.env --reload\n\n2023-04-10 23:39:41,140 INFO     - Started reloader process [115536] using WatchFiles\n2023-04-10 23:39:41,145 INFO     - Propan app starting...\n2023-04-10 23:39:41,151 INFO     - `base_handler` waiting for messages\n2023-04-10 23:39:41,152 INFO     - Propan app started successfully! To exit press CTRL+C\n</code></pre> <p>Enjoy your new development experience!</p> Don't forget to stop the test broker container <pre><code>docker container stop test-mq\n</code></pre>"},{"location":"getting_started/2_cli/","title":"CLI","text":"<p>Propan has its own built-in CLI tool for your maximum comfort as a developer.</p> <p>Thanks to typer and watchfiles. Their work is the basis of this tool.</p> <pre><code>$ propan --help\n\nUsage: propan [OPTIONS] COMMAND [ARGS]...\n\n  Generate, run, and manage Propan apps for greater development experience\n\nOptions:\n  --version             Show current platform, python and propan version\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create  Create a new Propan project at [APPNAME] directory\n  run     Run [MODULE:APP] Propan application\n</code></pre>"},{"location":"getting_started/2_cli/#project-generation","title":"Project generation","text":"<p>To start a new project template, you can use the standard template Propan:</p> <pre><code>$ propan create async rabbit app\n\nCreate Rabbit Propan project template at: ./app\n</code></pre> <p>The template includes:</p> <ul> <li>a simple yet working Dockerfile</li> <li>docker-compose.yml configured for development</li> <li>a project configured to use pydantic as the environment manager</li> </ul>"},{"location":"getting_started/2_cli/#reloading-the-project","title":"Reloading the project","text":"<p>Thanks to watchfiles, written in Rust, you can work with your project easily. Edit the code as much as you like - the new version has already been launched and is waiting for your requests!</p> <pre><code>$ propan run app.app.serve:app --reload\n\n2023-04-10 23:39:41,140 INFO     - Started reloader process [115536] using WatchFiles\n2023-04-10 23:39:41,145 INFO     - Propan app starting...\n2023-04-10 23:39:41,151 INFO     - `base_handler` waiting for messages\n2023-04-10 23:39:41,152 INFO     - Propan app started successfully! To exit press CTRL+C\n</code></pre>"},{"location":"getting_started/2_cli/#environment-management","title":"Environment Management","text":"<p>You can pass any custom flags and launch options to the Propan CLI even without first registering them. Just use them when launching the application - and they will be right in your environment.</p> <p>Use this option to select environment files, configure logging, or at your discretion.</p> <p>For example, we will pass the .env file to the context of our application:</p> <pre><code>$ propan run serve:app --env=.env.dev\n\n2023-04-10 23:39:41,145 INFO     - Propan app starting...\n2023-04-10 23:39:41,151 INFO     - `base_handler` waiting for messages\n2023-04-10 23:39:41,152 INFO     - Propan app started successfully! To exit press CTRL+C\n</code></pre> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = RedisBroker()\n\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"redis://localhost:6379\"\n\n@app.on_startup\nasync def setup(env: str, context: ContextRepo):\n    settings = Settings(_env_file=env)\n    await broker.connect(settings.host)\n    context.set_global(\"settings\", settings)\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = RabbitBroker()\n\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"amqp://guest:guest@localhost:5672/\"\n\n@app.on_startup\nasync def setup(env: str, context: ContextRepo):\n    settings = Settings(_env_file=env)\n    await broker.connect(settings.host)\n    context.set_global(\"settings\", settings)\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = KafkaBroker()\n\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"localhost:9092\"\n\n@app.on_startup\nasync def setup(env: str, context: ContextRepo):\n    settings = Settings(_env_file=env)\n    await broker.connect(settings.host)\n    context.set_global(\"settings\", settings)\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = SQSBroker()\n\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"http://localhost:9324\"\n\n@app.on_startup\nasync def setup(env: str, context: ContextRepo):\n    settings = Settings(_env_file=env)\n    await broker.connect(settings.host)\n    context.set_global(\"settings\", settings)\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = NatsBroker()\n\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"nats://localhost:4222\"\n\n@app.on_startup\nasync def setup(env: str, context: ContextRepo):\n    settings = Settings(_env_file=env)\n    await broker.connect(settings.host)\n    context.set_global(\"settings\", settings)\n</code></pre> <p>Note</p> <p>Note that the <code>env</code> parameter was passed to the <code>setup</code> function directly from the command line</p> <p>All passed values can be of type <code>bool</code>, <code>str</code> or <code>list[str]</code>.</p> <p>In this case, the flags will be interpreted as follows:</p> <p><pre><code>$ propan run app:app --flag       # flag = True\n$ propan run app:app --no-flag    # flag = False\n$ propan run app:app --my-flag    # my_flag = True\n$ propan run app:app --key value  # key = \"value\"\n$ propan run app:app --key 1 2    # key = [\"1\", \"2\"]\n</code></pre> You can use them both individually and together in unlimited quantities.</p>"},{"location":"getting_started/3_app/","title":"PropanApp","text":"<p>If you are using the Propan CLI, you need to create an instance of the application for the project to work:</p> <pre><code>from propan import PropanApp\napp = PropanApp()\n</code></pre> <p>Tip</p> <p>When initializing, <code>PropanApp</code> writes itself to <code>ContextRepo</code> with the name <code>\"app\"</code>, so you can always access it from context.</p>"},{"location":"getting_started/3_app/#using-brokers","title":"Using Brokers","text":"<p>In order for <code>PropanApp</code> to launch your broker, you need to put it in the application object.</p> <p>This is usually done when declaring the application itself:</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker\n\nbroker = RedisBroker(\"redis://localhost:6379\")\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker\n\nbroker = KafkaBroker(\"localhost:9092\")\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker\n\nbroker = SQSBroker(\"http://localhost:9324\", ...)\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker\n\nbroker = NatsBroker(\"nats://localhost:4222\")\napp = PropanApp(broker)\n</code></pre> <p>But, sometimes you may need to initialize the broker elsewhere. In this case, you can use the <code>app.set_broker</code> method:</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker\n\napp = PropanApp()\n\n@app.on_startup\ndef init_broker():\n    broker = RedisBroker(\"redis://localhost:6379\")\n    app.set_broker(broker)\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker\n\napp = PropanApp()\n\n@app.on_startup\ndef init_broker():\n    broker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n    app.set_broker(broker)\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker\n\napp = PropanApp()\n\n@app.on_startup\ndef init_broker():\n    broker = KafkaBroker(\"localhost:9092\")\n    app.set_broker(broker)\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker\n\napp = PropanApp()\n\n@app.on_startup\ndef init_broker():\n    broker = SQSBroker(\"http://localhost:9324\", ...)\n    app.set_broker(broker)\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker\n\napp = PropanApp()\n\n@app.on_startup\ndef init_broker():\n    broker = NatsBroker(\"nats://localhost:4222\")\n    app.set_broker(broker)\n</code></pre>"},{"location":"getting_started/3_app/#launching-other-apps","title":"Launching other apps","text":"<p>If the broker is not passed to <code>PropanApp</code>, the following functions will still work:</p> <ul> <li>Life Cycle Hooks</li> <li>Hot-reload code</li> <li>Multiprocessing of execution</li> </ul> <p>In fact, as a broker, you can pass an instance of any class that will have asynchronous methods <code>start</code> and <code>close</code>:</p> <pre><code>class ABCBroker:\n    async def start(self) -&gt; None:\n        ...\n\n    async def close(self) -&gt; None:\n        ...\n</code></pre> <p>If your code satisfies this interface, PropanApp can be used as a convenient tool for project management.</p>"},{"location":"getting_started/6_lifespans/","title":"LIFESPANS","text":"<p>Sometimes you need to define the logic that should be executed before launching the application. This means that the code will be executed once - even before your application starts receiving messages.</p> <p>Also, you may need to terminate some processes after stopping the application. In this case, your code will also be executed exactly once: but after the completion of the main application.</p> <p>Since this code is executed before the application starts and after it stops, it covers the entire lifecycle (lifespan) of the application.</p> <p>This can be very useful for initializing your application settings at startup, raising a pool of connections to a database, or running machine learning models.</p>"},{"location":"getting_started/6_lifespans/#usage-example","title":"Usage example","text":"<p>Let's imagine that your application uses pydantic as your settings manager.</p> <p>I highly recommend using pydantic for these purposes, because this dependency is already used at Propan and you don't have to install an additional package</p> <p>Also, let's imagine that you have several <code>.env</code>, <code>.env.development</code>, <code>.env.test</code>, <code>.env.production</code> files with your application settings, and you want to switch them at startup without any code changes.</p> <p>By passing optional arguments with the command line to your code Propan allows you to do this easily.</p>"},{"location":"getting_started/6_lifespans/#lifespan","title":"Lifespan","text":"<p>Let's write some code for our example</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, SQSBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = SQSBroker()\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"http://localhost:9324\"\n\n@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"amqp://guest:guest@localhost:5672/\"\n\n@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = KafkaBroker()\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"localhost:9092\"\n\n@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>from propan import PropanApp, RedisBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = RedisBroker()\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"redis://localhost:6379\"\n\n@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = NatsBroker()\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"nats://localhost:4222\"\n\n@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <p>Now this application can be run using the following command to manage the environment:</p> <pre><code>propan run serve:app --env .env.test\n</code></pre>"},{"location":"getting_started/6_lifespans/#details","title":"Details","text":"<p>Now let's look into a little more detail</p> <p>To begin with, we used a decorator</p> RedisRabbitMQKafkaSQSNATS <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <p>to declare a function that should run when our application starts</p> <p>The next step is to declare the arguments that our function will receive</p> RedisRabbitMQKafkaSQSNATS <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <p>In this case, the <code>env</code> field will be passed to the <code>setup</code> function from the arguments with the command line</p> <p>Tip</p> <p>The default lifecycle functions are used with the decorator `@apply_types', therefore, all context fields and dependencies are available in them</p> <p>Then, we initialized the settings of our application using the file passed to us from the command line</p> RedisRabbitMQKafkaSQSNATS <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <p>And put these settings in a global context</p> RedisRabbitMQKafkaSQSNATS <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> Note <p>Now we can access our settings anywhere in the application right from the context</p> <pre><code>from propan import Context, apply_types\n@apply_types\nasync def func(settings = Context()): ...\n</code></pre> <p>The last step we initialized our broker: now, when the application starts, it will be ready to receive messages</p> RedisRabbitMQKafkaSQSNATS <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre>"},{"location":"getting_started/6_lifespans/#another-example","title":"Another example","text":"<p>Now let's imagine that we have a machine learning model that needs to process messages from some broker.</p> <p>Initialization of such models usually takes a long time. It would be wise to do this at the start of the application, and not when processing each message.</p> <p>You can initialize your model somewhere at the top of your module/file. However, in this case, this code will be run even just in case of importing this module, for example, during testing. It is unlikely that you want to run your model on every test run...</p> <p>Therefore, it is worth initializing the model in the <code>@app.on_startup</code> hook.</p> <p>Also, we don't want the model to finish its work incorrectly when the application is stopped. To avoid this, we need the hook <code>@app.on_shutdown</code></p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, Context, RedisBroker\nfrom propan.annotations import ContextRepo\n\nbroker = RedisBroker(\"redis://localhost:6379\")\napp = PropanApp(broker)\n\nml_models = {}  # fake ML model\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n@app.on_startup\nasync def setup_model(context: ContextRepo):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    context.set_global(\"model\", ml_models)\n\n@app.on_shutdown\nasync def shutdown_model(model: dict = Context()):\n    # Clean up the ML models and release the resources\n    model.clear()\n\n@broker.handle(\"test\")\nasync def predict(x: float, model = Context()):\n    result = model[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <pre><code>from propan import PropanApp, Context, RabbitBroker\nfrom propan.annotations import ContextRepo\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\napp = PropanApp(broker)\n\nml_models = {}  # fake ML model\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n@app.on_startup\nasync def setup_model(context: ContextRepo):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    context.set_global(\"model\", ml_models)\n\n@app.on_shutdown\nasync def shutdown_model(model: dict = Context()):\n    # Clean up the ML models and release the resources\n    model.clear()\n\n@broker.handle(\"test\")\nasync def predict(x: float, model = Context()):\n    result = model[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <pre><code>from propan import PropanApp, Context, KafkaBroker\nfrom propan.annotations import ContextRepo\n\nbroker = KafkaBroker(\"localhost:9092\")\napp = PropanApp(broker)\n\nml_models = {}  # fake ML model\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n@app.on_startup\nasync def setup_model(context: ContextRepo):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    context.set_global(\"model\", ml_models)\n\n@app.on_shutdown\nasync def shutdown_model(model: dict = Context()):\n    # Clean up the ML models and release the resources\n    model.clear()\n\n@broker.handle(\"test\")\nasync def predict(x: float, model = Context()):\n    result = model[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <pre><code>from propan import PropanApp, Context, SQSBroker\nfrom propan.annotations import ContextRepo\n\nbroker = SQSBroker(\"http://localhost:9324\", ...)\napp = PropanApp(broker)\n\nml_models = {}  # fake ML model\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n@app.on_startup\nasync def setup_model(context: ContextRepo):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    context.set_global(\"model\", ml_models)\n\n@app.on_shutdown\nasync def shutdown_model(model: dict = Context()):\n    # Clean up the ML models and release the resources\n    model.clear()\n\n@broker.handle(\"test\")\nasync def predict(x: float, model = Context()):\n    result = model[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <pre><code>from propan import PropanApp, Context, NatsBroker\nfrom propan.annotations import ContextRepo\n\nbroker = NatsBroker(\"nats://localhost:4222\")\napp = PropanApp(broker)\n\nml_models = {}  # fake ML model\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n@app.on_startup\nasync def setup_model(context: ContextRepo):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    context.set_global(\"model\", ml_models)\n\n@app.on_shutdown\nasync def shutdown_model(model: dict = Context()):\n    # Clean up the ML models and release the resources\n    model.clear()\n\n@broker.handle(\"test\")\nasync def predict(x: float, model = Context()):\n    result = model[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre>"},{"location":"getting_started/6_lifespans/#multiple-hooks","title":"Multiple hooks","text":"<p>If you want to declare multiple lifecycle hooks, they will be used in the order they are registered:</p> <pre><code>from propan import PropanApp, Context\nfrom propan.annotations import ContextRepo\n\napp = PropanApp()\n\n@app.on_startup\nasync def setup(context: ContextRepo):\n    context.set_global(\"field\", 1)\n\n@app.on_startup\nasync def setup_later(field: int = Context()):\n    assert field == 1\n</code></pre>"},{"location":"getting_started/6_lifespans/#some-more-details","title":"Some more details","text":""},{"location":"getting_started/6_lifespans/#async-or-not-async","title":"Async or not async","text":"<p>In the asynchronous version of the application, both asynchronous and synchronous methods can be used as hooks. In the synchronous version, only synchronous methods are available.</p>"},{"location":"getting_started/6_lifespans/#command-line-arguments","title":"Command line arguments","text":"<p>Command line arguments are available in all <code>@app.on_startup</code> hooks. To use them in other parts of the application, put them in the <code>ContextRepo</code>.</p>"},{"location":"getting_started/6_lifespans/#broker-initialization","title":"Broker initialization","text":"<p>The <code>@app.on_startup</code> hooks are called BEFORE the broker is launched by the application. The <code>@app.after_shutdown</code> hooks are triggered AFTER stopping the broker.</p> <p>If you want to perform some actions AFTER initializing the broker: send messages, initialize objects, etc., you should use the <code>@app.after_startup</code> hook.</p>"},{"location":"getting_started/7_testing/","title":"Testing","text":"<p>To test your app locally or in a CI pipeline, you want to reduce the number of external dependencies. This allows running a test suite more quickly than when a container with your Message Broker needs to be instantiated within the CI pipeline.</p> <p>Also, the absence of dependencies helps to avoid test failures that are due to errors in transmitting data to the broker, or accessing the broker too early (when the container is not yet ready to receive connections).</p> <p>Note</p> <p>To run asynchronous tests using pytest, you need to install extensions.</p> <p>You can use, for example, pytest-asyncio or anyio</p>"},{"location":"getting_started/7_testing/#broker-modification","title":"Broker modification","text":"<p>Propan allows you to modify the behavior of your broker so that it passes messages \"in memory\" without requiring you to discover external dependencies.</p> <p>Let's imagine we have an application like so:</p> RedisRabbitMQKafkaSQSNATS main.py<pre><code>from propan import PropanApp, RedisBroker\n\nbroker = RedisBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n    if msg == \"ping\":\n        return \"pong\"\n    else:\n        return \"wrong\"\n\napp = PropanApp(broker)\n</code></pre> <p>In order to test it without running Redis you need to modify the broker with <code>propan.test.TestRedisBroker</code>:</p> test_ping.py<pre><code>from propan.test import TestRedisBroker\n\nfrom main import broker\n\nasync def test_publish():\n    async with TestRedisBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> main.py<pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n    if msg == \"ping\":\n        return \"pong\"\n    else:\n        return \"wrong\"\n\napp = PropanApp(broker)\n</code></pre> <p>In order to test it without running RabbitMQ you need to modify the broker with <code>propan.test.TestRabbitBroker</code>:</p> test_ping.py<pre><code>from propan.test import TestRabbitBroker\n\nfrom main import broker\n\nasync def test_publish():\n    async with TestRabbitBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> main.py<pre><code>from propan import PropanApp, KafkaBroker\n\nbroker = KafkaBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n    if msg == \"ping\":\n        return \"pong\"\n    else:\n        return \"wrong\"\n\napp = PropanApp(broker)\n</code></pre> <p>In order to test it without running Kafka you need to modify the broker with <code>propan.test.TestKafkaBroker</code>:</p> test_ping.py<pre><code>from propan.test import TestKafkaBroker\n\nfrom main import broker\n\nasync def test_publish():\n    async with TestKafkaBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> main.py<pre><code>from propan import PropanApp, SQSBroker\n\nbroker = SQSBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n    if msg == \"ping\":\n        return \"pong\"\n    else:\n        return \"wrong\"\n\napp = PropanApp(broker)\n</code></pre> <p>In order to test it without running ElasticMQ you need to modify the broker with <code>propan.test.TestSQSBroker</code>:</p> test_ping.py<pre><code>from propan.test import TestSQSBroker\n\nfrom main import broker\n\nasync def test_publish():\n    async with TestSQSBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> main.py<pre><code>from propan import PropanApp, NatsBroker\n\nbroker = NatsBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n    if msg == \"ping\":\n        return \"pong\"\n    else:\n        return \"wrong\"\n\napp = PropanApp(broker)\n</code></pre> <p>In order to test it without running NATS you need to modify the broker with <code>propan.test.TestNatsBroker</code>:</p> test_ping.py<pre><code>from propan.test import TestNatsBroker\n\nfrom main import broker\n\nasync def test_publish():\n    async with TestNatsBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <p>Then make an RPC request to check the result of the execution:</p> RedisRabbitMQKafkaSQSNATS <pre><code>    async with TestRedisBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <pre><code>    async with TestRabbitBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <pre><code>    async with TestKafkaBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <pre><code>    async with TestSQSBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <pre><code>    async with TestNatsBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <p>Note</p> <p>When using the test broker this way, it is always possible to perform RPC requests even if the broker doesn't support it in regular mode.</p>"},{"location":"getting_started/7_testing/#using-fixtures","title":"Using fixtures","text":"<p>For large applications to reuse the test broker, you can use the following fixture:</p> RedisRabbitMQKafkaSQSNATS test_broker.py<pre><code>import pytest\nfrom propan.test import TestRedisBroker\n\nfrom main import broker\n\n@pytest.fixture()\nasync def test_broker():\n    async with TestRedisBroker(broker) as b:\n        yield b\n\nasync def test_publish(test_broker):\n    r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> test_broker.py<pre><code>import pytest\nfrom propan.test import TestRabbitBroker\n\nfrom main import broker\n\n@pytest.fixture()\nasync def test_broker():\n    async with TestRabbitBroker(broker) as b:\n        yield b\n\nasync def test_publish(test_broker):\n    r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> test_broker.py<pre><code>import pytest\nfrom propan.test import TestKafkaBroker\n\nfrom main import broker\n\n@pytest.fixture()\nasync def test_broker():\n    async with TestKafkaBroker(broker) as b:\n        yield b\n\nasync def test_publish(test_broker):\n    r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> test_broker.py<pre><code>import pytest\nfrom propan.test import TestSQSBroker\n\nfrom main import broker\n\n@pytest.fixture()\ndef test_broker():\n    async with TestSQSBroker(broker) as b:\n        yield b\n\nasync def test_publish(test_broker):\n    r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> test_broker.py<pre><code>import pytest\nfrom propan.test import TestNatsBroker\n\nfrom main import broker\n\n@pytest.fixture()\nasync def test_broker():\n    async with TestNatsBroker(broker) as b:\n        yield b\n\nasync def test_publish(test_broker):\n    r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <p>Tip</p> <p>This approach has a major weakness: Errors that raises inside handler cannot be captured inside your tests.</p> <p>For example, the following test will return <code>None</code> and inside the handler, a <code>pydantic.ValidationError</code> will be raised:</p> <pre><code>async def test_publish(test_broker):\n    r = await test_broker.publish(\n        {\"msg\": \"ping\"}, \"ping\",\n        callback=True, callback_timeout=1\n    )\n    assert r == None\n</code></pre> <p>Also this test will be blocked for <code>callback_timeout</code> (default 30 seconds), which can be very annoying when a handler development error occures, and your tests fail with a long timeout of <code>None</code>.</p>"},{"location":"getting_started/7_testing/#regular-function-calling","title":"Regular function calling","text":"<p>Propan provides the ability to run handler functions as if they were regular functions.</p> <p>To do this, you need to construct a message using the <code>build_message</code>, if it was <code>publish</code> (same method signatures), and passe this message to your handler as the single function argument.</p> RedisRabbitMQKafkaSQSNATS test_ping.py<pre><code>from propan.test.redis import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message(\"ping\", \"ping\")\n    assert (await healthcheck(msg)) == \"pong\"\n</code></pre> test_ping.py<pre><code>from propan.test.rabbit import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message(\"ping\", \"ping\")\n    assert (await healthcheck(msg)) == \"pong\"\n</code></pre> test_ping.py<pre><code>from propan.test.kafka import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message(\"ping\", \"ping\")\n    assert (await healthcheck(msg)) == \"pong\"\n</code></pre> test_ping.py<pre><code>from propan.test.sqs import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message(\"ping\", \"ping\")\n    assert (await healthcheck(msg)) == \"pong\"\n</code></pre> test_ping.py<pre><code>from propan.test.nats import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message(\"ping\", \"ping\")\n    assert (await healthcheck(msg)) == \"pong\"\n</code></pre> <p>That being said, if you want to catch handler exceptions, you need to use the <code>reraise_exc=True</code> calling flag:</p> RedisRabbitMQKafkaSQSNATS test_ping.py<pre><code>import pytest\nimport pydantic\nfrom propan.test.redis import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message({ \"msg\": \"ping\" }, \"ping\")\n    with pytest.raises(pydantic.ValidationError):\n        await healthcheck(msg, reraise_exc=True)\n</code></pre> test_ping.py<pre><code>import pytest\nimport pydantic\nfrom propan.test.rabbit import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message({ \"msg\": \"ping\" }, \"ping\")\n    with pytest.raises(pydantic.ValidationError):\n        await healthcheck(msg, reraise_exc=True)\n</code></pre> test_ping.py<pre><code>import pytest\nimport pydantic\nfrom propan.test.kafka import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message({ \"msg\": \"ping\" }, \"ping\")\n    with pytest.raises(pydantic.ValidationError):\n        await healthcheck(msg, reraise_exc=True)\n</code></pre> test_ping.py<pre><code>import pytest\nimport pydantic\nfrom propan.test.sqs import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message({ \"msg\": \"ping\" }, \"ping\")\n    with pytest.raises(pydantic.ValidationError):\n        await healthcheck(msg, reraise_exc=True)\n</code></pre> test_ping.py<pre><code>import pytest\nimport pydantic\nfrom propan.test.nats import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message({ \"msg\": \"ping\" }, \"ping\")\n    with pytest.raises(pydantic.ValidationError):\n        await healthcheck(msg, reraise_exc=True)\n</code></pre> <p>Thus, Propan provides you with a complete toolkit for testing your handlers, from checking RPC responses to correctly executing body functions.</p>"},{"location":"getting_started/8_logging/","title":"LOGGING","text":"<p>Propan uses 2 previously configured loggers:</p> <ul> <li><code>propan</code> - using by PropanApp</li> <li><code>propan.access</code> - using by broker</li> </ul>"},{"location":"getting_started/8_logging/#logging-requests","title":"Logging requests","text":"<p>To log requests, it is strongly recommended to use the <code>access_logger</code> of your broker, since it is available from the Context of your application.</p> <pre><code>from propan import RabbitBroker\nfrom propan.annotations import Logger\n\nbroker = RabbitBroker()\n\n@broker.handle(\"test\")\nasync def func(logger: Logger):\nlogger.info(\"message received\")\n</code></pre> <p>This approach has several advantages:</p> <ul> <li>the logger already contains the request context: message ID, broker-based params</li> <li>by replacing the <code>logger</code> at broker initializing, you will automatically replace all loggers inside your functions</li> </ul>"},{"location":"getting_started/8_logging/#logging-levels","title":"Logging levels","text":"<p>If you use the Propan CLI, you can change the current logging level of the entire application directly from the command line.</p> <p>The <code>--log-level</code> flag sets the current logging level for both a broker and a PropanApp. This way you can configure the levels of not only default loggers, but also your own, if you use them inside Propan</p> <pre><code>$ propan run serve:app --log-level debug\n</code></pre> <p>If you want to completely disable the default logging of <code>Propan</code>, you can set `logger=None'</p> <pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker(logger=None) # disables broker logs\napp = PropanApp(broker, logger=None) # disables application logs\n</code></pre> <p>Warning</p> <p>Be careful: the <code>logger</code> that you get from the context will also have the value `None' if you turn off the broker logging</p> <p>If you don't want to lose access to the `logger' inside your context, but want to get rid of the default logs Propan, you can lower the level of logs that the broker publishes itself.</p> <pre><code>import logging\nfrom propan import PropanApp, RabbitBroker\n\n# sets the broker logs to the DEBUG level\nbroker = RabbitBroker(log_level=logging.DEBUG)\n</code></pre>"},{"location":"getting_started/8_logging/#formatting-logs","title":"Formatting logs","text":"<p>If you are not satisfied with the current format of your application logs, you can change it directly in your broker's constructor</p> <pre><code>from propan import PropanApp, RabbitBroker\nbroker = RabbitBroker(log_fmt=\"%(asctime)s %(levelname)s - %(message)s\")\n</code></pre>"},{"location":"getting_started/8_logging/#using-your-own-loggers","title":"Using your own loggers","text":"<p>Since Propan works with the standard <code>logging.Logger</code> object, you can initiate an application and a broker using your own logger</p> <pre><code>import logging\nfrom propan import PropanApp, RabbitBroker\n\nlogger = logging.getLogger(\"my_logger\")\n\nbroker = RabbitBroker(logger=logger)\napp = PropanApp(broker, logger=logger)\n</code></pre> <p>Doing so, you will lose information about the context of the current request. However, you can get it directly from the context anywhere in your code:</p> <pre><code>from propan import context\nlog_context: dict[str, str] = context.get_local(\"log_context\")\n</code></pre>"},{"location":"getting_started/8_logging/#logger-access","title":"Logger access","text":"<p>If you want to override default loggers behavior, you can access them directly via <code>logging</code>:</p> <pre><code>import logging\nlogger = logging.getLogger(\"propan\")\naccess_logger = logging.getLogger(\"propan.access\")\n</code></pre> <p>Or by importing them from Propan</p> <pre><code>from propan.log import access_logger, logger\n</code></pre>"},{"location":"getting_started/9_documentation/","title":"Documenting","text":"<p>Propan allows you not to think about the documentation of your project - it is already generated automatically in accordance with the  AsyncAPI specification !</p> <p>To work with a documentation you should install an extra requirements:</p> <pre><code>pip install \"propan[doc]\"\n</code></pre>"},{"location":"getting_started/9_documentation/#example","title":"Example","text":"<p>Let's look at an example.</p> <p>To begin with, we will write a small application with the following content:</p> <pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.brokers.rabbit import RabbitQueue, RabbitExchange, ExchangeType\n\nbroker = RabbitBroker()\napp = PropanApp(\n    broker=broker,\n    title=\"Smartylighting Streetlights Propan API\",\n    version=\"1.0.0\",\n    description=\"\"\"\n    The Smartylighting Streetlights API.\n    ### Check out its awesome features:\n    * Turn a specific streetlight on/off \ud83c\udf03\n    * Receive real-time information about environmental \ud83d\udcc8\n    \"\"\"\n)\n\n@broker.handle(\n    queue=RabbitQueue(\"*.info\", durable=True),\n    exchange=RabbitExchange(\"logs\", durable=True, type=ExchangeType.TOPIC)\n)\nasync def handle_logs(level: int, message: str = \"\"):\n    \"\"\"Handle all environmental events\"\"\"\n    ...\n</code></pre>"},{"location":"getting_started/9_documentation/#yaml-schema","title":"YAML schema","text":"<p>To generate the AsyncAPI specification of your project in the <code>.yaml</code> format use the following command:</p> <pre><code>$ propan docs gen example:app\n\nYour project AsyncAPI scheme was placed to `./asyncapi.yaml`\n</code></pre> <p>Now you have a scheme of your project: you can use it to generate various clients in any language using an AsyncAPI tools.</p> Asyncapi.yaml <pre><code>asyncapi: 2.6.0\ndefaultContentType: application/json\ninfo:\n  title: Smartylighting Streetlights Propan API\n  version: 1.0.0\n  description: \"\\n    The Smartylighting Streetlights API.\\n    ### Check out its\\\n    \\ awesome features:\\n    * Turn a specific streetlight on/off \\U0001F303\\n   \\\n    \\ * Receive real-time information about environmental \\U0001F4C8\\n    \"\nservers:\n  dev:\n    url: amqp://guest:guest@localhost:5672/\n    protocol: amqp\n    protocolVersion: 0.9.1\nchannels:\n  HandleLogs:\n    servers:\n    - dev\n    bindings:\n      amqp:\n        is: routingKey\n        bindingVersion: 0.2.0\n        queue:\n          name: '*.info'\n          durable: true\n          exclusive: false\n          autoDelete: false\n          vhost: /\n        exchange:\n          name: logs\n          type: topic\n          durable: true\n          autoDelete: false\n          vhost: /\n    subscribe:\n      description: Handle all environmental events\n      bindings:\n        amqp:\n          cc: '*.info'\n          ack: true\n          bindingVersion: 0.2.0\n      message:\n        $ref: '#/components/messages/HandleLogsMessage'\ncomponents:\n  messages:\n    HandleLogsMessage:\n      title: HandleLogsMessage\n      correlationId:\n        location: $message.header#/correlation_id\n      payload:\n        $ref: '#/components/schemas/HandleLogsPayload'\n  schemas:\n    HandleLogsPayload:\n      title: HandleLogsPayload\n      type: object\n      properties:\n        level:\n          title: Level\n          type: integer\n        message:\n          title: Message\n          default: ''\n          type: string\n      required:\n      - level\n      example:\n        level: 4015\n        message: evwWheCeRIGhHEHYxKSJ\n</code></pre>"},{"location":"getting_started/9_documentation/#online-documentation","title":"Online documentation","text":"<p>Also, Propan allows you to host HTML representation of your documentation with the following command</p> <p>The online representation of documentation does not work without an internet connection, since CDN dependencies are used to display it.</p> <pre><code>$ propan docs serve example:app\n</code></pre> <p>This way you can provide all external consumers with access to your project documentation without additional development costs.</p> HTML page <p></p> <p>Tip</p> <p>Propan can also host <code>asyncapi.yaml</code> files.</p> <pre><code>propan docs serve asyncapi.yaml\n</code></pre> <p>This can be useful if you want to extend the automatically generated AsyncAPI documentation: you just generate a file, modify and host it!</p> <p>When using online documentation, you can also download it using the following paths:</p> <ul> <li><code>/asyncapi.json</code> - JSON schema (available when hosting an application)</li> <li><code>/asyncapi.yaml</code> - YAML schema (available for an application and a file both)</li> </ul>"},{"location":"getting_started/9_documentation/#fastapi-plugin","title":"FastAPI Plugin","text":"<p>When using Propan as a router for FastAPI, the framework automatically registers endpoints for hosting AsyncAPI documentation in your application with the following default values:</p> <pre><code>from propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\n    schema_url=\"/asyncapi\",\n    include_in_schema=True,\n)\n</code></pre>"},{"location":"getting_started/9_documentation/#own-hosting","title":"Own hosting","text":"<p>For hosting documentation Propan uses FastAPI + uvicorn. You may want to implement the logic of displaying documentation yourself: restrict access rights, customize content regardless of access rights, embed documentation in your frontend application, and so on. To do this, you can generate a <code>json</code>/<code>yaml</code>/<code>html</code> document yourself and use it in your own service.</p> <pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.asyncapi.main import AsyncAPISchema\nfrom propan.cli.docs.gen import gen_app_schema_json, gen_app_schema_yaml, get_app_schema\nfrom propan.cli.docs.serving import get_asyncapi_html\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nschema: AsyncAPISchema = get_app_schema(app)\njson_schema = gen_app_schema_json(app)\nyaml_schema = gen_app_schema_yaml(app)\nhtml = get_asyncapi_html(yaml_schema)\n</code></pre>"},{"location":"getting_started/4_broker/1_index/","title":"Basics","text":""},{"location":"getting_started/4_broker/1_index/#separation-of-dependencies","title":"Separation of dependencies","text":"<p>Propan supports various message brokers using special classes:</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import RedisBroker\n</code></pre> <pre><code>from propan import RabbitBroker\n</code></pre> <pre><code>from propan import KafkaBroker\n</code></pre> <pre><code>from propan import SQSBroker\n</code></pre> <pre><code>from propan import NatsBroker\n</code></pre> <p>Be careful! Different brokers require different dependencies. If you have not installed these dependencies, the imported broker will have the <code>None</code> value.</p> <p>To install Propan with the necessary dependencies for your broker, select one of the installation options:</p> RedisRabbitMQKafkaSQSNATS <pre><code>pip install \"propan[async-redis]\"\n</code></pre> <pre><code>pip install \"propan[async-rabbit]\"\n</code></pre> <pre><code>pip install \"propan[async-kafka]\"\n</code></pre> <pre><code>pip install \"propan[async-sqs]\"\n</code></pre> <pre><code>pip install \"propan[async-nats]\"\n</code></pre>"},{"location":"getting_started/4_broker/1_index/#broker-initialization","title":"Broker Initialization","text":"<p>Data for connecting Propan Broker to your message broker can be transmitted in 2 ways:</p> RedisRabbitMQKafkaSQSNATS <ol> <li> <p>In the broker constructor</p> <pre><code>from propan import RedisBroker\nbroker = RedisBroker(\"redis://localhost:6379/\")\n</code></pre> </li> <li> <p>In the <code>connect</code> method     <pre><code>from propan import RedisBroker\nbroker = RedisBroker()\n...\nawait broker.connect(\"redis://localhost:6379/\")\n</code></pre></p> </li> </ol> <ol> <li> <p>In the broker constructor</p> <pre><code>from propan import RabbitBroker\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n</code></pre> </li> <li> <p>In the <code>connect</code> method</p> <pre><code>from propan import RabbitBroker\nbroker = RabbitBroker()\n...\nawait broker.connect(\"amqp://guest:guest@localhost:5672/\")\n</code></pre> </li> </ol> <ol> <li> <p>In the broker constructor</p> <pre><code>from propan import KafkaBroker\nbroker = KafkaBroker(\"localhost:9092\")\n</code></pre> </li> <li> <p>In the <code>connect</code> method</p> <pre><code>from propan import KafkaBroker\nbroker = KafkaBroker()\n...\nawait broker.connect(\"localhost:9092\")\n</code></pre> </li> </ol> <ol> <li> <p>In the broker constructor</p> <pre><code>from propan import SQSBroker\nbroker = SQSBroker(\"http://localhost:9324\")\n</code></pre> </li> <li> <p>In the <code>connect</code> method</p> <pre><code>from propan import SQSBroker\nbroker = SQSBroker()\n...\nawait broker.connect(\"http://localhost:9324\")\n</code></pre> </li> </ol> <ol> <li> <p>In the broker constructor</p> <pre><code>from propan import NatsBroker\nbroker = NatsBroker(\"nats://localhost:4222\")\n</code></pre> </li> <li> <p>In the <code>connect</code> method</p> <pre><code>from propan import NatsBroker\nbroker = NatsBroker()\n...\nawait broker.connect(\"nats://localhost:4222\")\n</code></pre> </li> </ol> <p>In the simplest case, initializing through the constructor is enough for most use cases.</p> <p>However, if you need more granularity in a complex scenario, for example, when configuring a project via environment variables, you may need the second option. The full example is described here.</p> <p>Note</p> <p>The parameters passed to <code>connect</code> override the parameters passed to the constructor. Be careful with this.</p> <p>In addition, calling <code>connect</code> again will have no effect. Therefore, you do not have to worry that <code>broker.start()</code> call (used inside <code>PropanApp</code> to run the broker) will cause any errors.</p>"},{"location":"getting_started/4_broker/2_routing/","title":"Routing","text":""},{"location":"getting_started/4_broker/2_routing/#general-behavior","title":"General behavior","text":"<p>To declare a broker message handler function, use the decorator <code>@broker.handle</code>:</p> <pre><code>@broker.handle(\"test\")\nasync def base_handler(body: str):\n    ...\n</code></pre> <p>This behavior is the same for all brokers, but the parameters passed to <code>@broker.handle</code> are specific for each broker.</p> <p>To learn more about the behavior of specialized brokers, go to the following sections:</p> <ul> <li>RabbitBroker</li> <li>NatsBroker</li> <li>RedisBroker</li> </ul>"},{"location":"getting_started/4_broker/2_routing/#delayed-handlers-registration","title":"Delayed handlers registration","text":"<p>If you don't want to mix an application \"business logic\" with the routing one, you can use the standard Python decorators behavior \"without sugar\": just define a handler function, and register it later.</p> <pre><code>async def base_handler(body: str):\n    ...\n\nbroker.handle(\"test\")(base_handler)\n</code></pre>"},{"location":"getting_started/4_broker/2_routing/#brokerrouter","title":"BrokerRouter","text":"<p>Sometimes it can be convenient to divide handlers into groups that can be connected to your application with just one command. To do this, Propan provides BrokerRouter: you can register your handlers within the router, and then connect this router to your broker.</p> <p>This will help to better organize your application's code and also allow you to divide it into plug-ins.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker, RedisRouter\n\nrouter = RedisRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n    ...\n\nbroker = RedisBroker()\nbroker.include_router(router)\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker, RabbitRouter\n\nrouter = RabbitRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n    ...\n\nbroker = RabbitBroker()\nbroker.include_router(router)\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker, KafkaRouter\n\nrouter = KafkaRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n    ...\n\nbroker = KafkaBroker()\nbroker.include_router(router)\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker, SQSRouter\n\nrouter = SQSRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n    ...\n\nbroker = SQSBroker()\nbroker.include_router(router)\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker, NatsRouter\n\nrouter = NatsRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n    ...\n\nbroker = NatsBroker()\nbroker.include_router(router)\napp = PropanApp(broker)\n</code></pre> <p>In this case, the router prefix will be added to the name of the queue of your handlers.</p> <pre><code>@app.after_startup\nasync def publish_test():\n    await broker.publish(\"user-fake-uuid\", \"user/created\")\n</code></pre>"},{"location":"getting_started/4_broker/2_routing/#error-handling","title":"Error handling","text":"<p>However, all brokers that support acknowledgement have the <code>retry</code> flag in the <code>@broker.handle</code> method, which is responsible for error handling logic.</p> <p>By default, this flag has the value <code>False</code>, which indicates that if an error has occurred during message processing, it can still be retrieved from the queue:</p> <pre><code>@broker.handle(\"test\", retry=False) # don't handle exceptions\nasync def base_handler(body: str):\n    ...\n</code></pre> <p>If this flag is set to <code>True</code>, the message will be placed back in the queue every time an error occurs. In this case, the message can be processed both by another consumer (if there are several of them) and by the same one:</p> <pre><code>@broker.handle(\"test\", retry=True)  # try again indefinitely\nasync def base_handler(body: str):\n    ...\n</code></pre> <p>If the <code>retry</code> flag is set to <code>int</code>, the message will be placed back in the queue and the number of retries will be limited to this number:</p> <pre><code>@broker.handle(\"test\", retry=3)     # make up to 3 attempts\nasync def base_handler(body: str):\n    ...\n</code></pre> <p>Bug</p> <p>At the moment, attempts are taken into account only by the current consumer. If the message goes to another consumer, he will have his own counter. Subsequently, this logic will be reworked.</p> <p>Tip</p> <p>At more complex error handling cases you can use tenacity</p>"},{"location":"getting_started/4_broker/3_type-casting/","title":"Type casting","text":"<p>The first argument of the function decorated by <code>@broker.handle</code> is the decrypted body of the incoming message.</p> <p>Incoming message body can be of three types:</p> <ul> <li><code>str</code> - if the message has the header <code>content-type: text/plain</code></li> <li><code>dict</code> - if the message has the header <code>content-type: application/json</code></li> <li><code>bytes</code> - if the message has any other header</li> </ul> <p>Either these types can be used as an annotation, or any primitive types to which pydantic can cast incoming arguments (for example, <code>str -&gt; float</code>).</p> <p>A few examples:</p>"},{"location":"getting_started/4_broker/3_type-casting/#textplain","title":"text/plain","text":"<pre><code>@broker.handle(\"test\")\nasync def base_handler(body: str):\n    '''\n    We are expecting a text/plain message\n    Messages of a different kind will raise an error\n    '''\n</code></pre>"},{"location":"getting_started/4_broker/3_type-casting/#applicationjson","title":"application/json","text":"<pre><code>@broker.handle(\"test\")\nasync def base_handler(body: dict):\n    '''\n    We are expecting an application/json message\n    Messages of a different kind will raise an error\n    '''\n</code></pre>"},{"location":"getting_started/4_broker/3_type-casting/#any-type","title":"Any type","text":"<pre><code>@broker.handle(\"test\")\nasync def base_handler(body: bytes):\n    '''\n    We are expecting a 'raw' message\n    Messages of a different kind will raise an error\n    '''\n</code></pre>"},{"location":"getting_started/4_broker/3_type-casting/#pydantic","title":"Pydantic","text":"<p>Also, if you use a <code>pydantic</code> object as the type annotation, Propan will also result in an incoming message of this kind, if possible:</p> <pre><code>from pydantic import BaseModel\n\nclass Message(BaseModel):\n    key: float\n\n@broker.handle(\"test\")\nasync def base_handler(body: Message):\n    '''\n    We are expecting an application/json message\n    Type { key: 1.0 }\n    Messages of a different kind will raise an error\n    '''\n</code></pre>"},{"location":"getting_started/4_broker/3_type-casting/#multiple-arguments","title":"Multiple arguments","text":"<p>When annotating multiple incoming arguments, the result will be equivalent to using a similar `pydantic' model.</p> <pre><code>from pydantic import BaseModel\n\nclass Message(BaseModel):\n    a: int\n    b: float\n\n@broker.handle(\"test\")\nasync def base_handler(a: int, b: float):\n# async def base_handler(body: Message): - equivalent to using separate parameters\n    '''\n    We are expecting an application/json message\n    Type { a: 1, b: 1.0 }\n    Messages of a different kind will raise an error\n    '''\n</code></pre>"},{"location":"getting_started/4_broker/4_custom_serialization/","title":"Custom Serialization","text":"<p>By default, Propan uses the JSON format to send and receive messages. However, if you need to handle messages in other formats or with extra serialization steps such as gzip, Avro, Protobuf, and the like, you can modify the serialization logic.</p>"},{"location":"getting_started/4_broker/4_custom_serialization/#serialization-steps","title":"Serialization Steps","text":"<p>Before the message gets into your handler, Propan applies 2 functions to it sequentially: <code>parse_message</code> and <code>decode_message</code>. You can modify one or both stages depending on your needs.</p>"},{"location":"getting_started/4_broker/4_custom_serialization/#message-parsing","title":"Message Parsing","text":"<p>At this stage, Propan serializes an incoming message of the framework that is used to work with the broker into a general view - PropanMessage. At this stage, the message body remains in the form of raw bytes.</p> <p>The signature of the function looks like this:</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanMessage\n\nasync def parse_message(\n    message: bytes\n) -&gt; PropanMessage[bytes]:\n    return PropanMessage(\n        body=message,\n        raw_message=message,\n    )\n</code></pre> <pre><code>from aio_pika.message import IncomingMessage\nfrom propan import PropanMessage\n\nasync def parse_message(\n    message: IncomingMessage\n) -&gt; PropanMessage[IncomingMessage]:\n    return PropanMessage(\n        body=message.body,\n        headers=message.headers,\n        reply_to=message.reply_to or \"\",\n        message_id=message.message_id,\n        content_type=message.content_type or \"\",\n        raw_message=message,\n    )\n</code></pre> <pre><code>from aiokafka.structs import ConsumerRecord\nfrom propan import PropanMessage\n\nasync def parse_message(\n    message: ConsumerRecord\n) -&gt; PropanMessage[ConsumerRecord]:\n    headers = {i: j.decode() for i, j in message.headers}\n    return PropanMessage(\n        body=message.value,\n        raw_message=message,\n        message_id=f\"{message.offset}-{message.timestamp}\",\n        reply_to=headers.get(\"reply_to\", \"\"),\n        content_type=headers.get(\"content-type\"),\n        headers=headers,\n    )\n</code></pre> <pre><code>from typing import Dict, Any\nfrom propan import PropanMessage\n\nasync def parse_message(\n    message: Dict[str, Any],\n) -&gt; PropanMessage[Dict[str, Any]]:\n    attributes = message.get(\"MessageAttributes\", {})\n    headers = {i: j.get(\"StringValue\") for i, j in attributes.items()}\n    return PropanMessage(\n        body=message.get(\"Body\", \"\").encode(),\n        message_id=message.get(\"MessageId\"),\n        content_type=headers.pop(\"content-type\", None),\n        reply_to=headers.pop(\"reply_to\", None) or \"\",\n        headers=headers,\n        raw_message=message,\n    )\n</code></pre> <pre><code>from nats.aio.msg import Msg\nfrom propan import PropanMessage\n\nasync def parse_message(\n    message: Msg\n) -&gt; PropanMessage[Msg]:\n    return PropanMessage(\n        body=message.data,\n        content_type=message.header.get(\"content-type\", \"\"),\n        headers=message.header,\n        reply_to=message.reply,\n        raw_message=message,\n    )\n</code></pre> <p>This stage is strongly related to the features of the broker used and in most cases, its redefinition is not necessary.</p> <p>However, it is still possible. You can override this method both for the entire broker and for individual handlers:</p> <pre><code>from propan import RabbitBroker\n\nasync def custom_parse(msg, original_parser):\n    return original_parser(msg)\n\nbroker = RabbitBroker(parse_message=custom_parse)\n\n@broker.handle(\"test\", parse_message=custom_parse)\nasync def handler(): ...\n</code></pre> <p>Your function should take 2 arguments: a \"raw\" message itself and the original handler function. Thus, you can either completely redefine the message parsing logic, or partially modify a message, and then use the original Propan mechanism.</p> <p>The parser declared at the <code>broker</code> level will be applied to all handlers. The parser declared at the <code>handle</code> level is applied only to this handler (it ignores the `broker' parser if it was specified earlier).</p>"},{"location":"getting_started/4_broker/4_custom_serialization/#message-decoding","title":"Message Decoding","text":"<p>At this stage, the body of PropanMessage is transformed to the form in which it enters your handler function. This method you will have to redefine more often.</p> <p>In the original, its signature is quite simple (this is a simplified version):</p> <pre><code>import json\nfrom propan import PropanMessage\n\nasync def decode_message(message: PropanMessage):\n    body = message.body\n    if message.content_type is not None:\n        return json.loads(body.decode())\n    else:\n        return body\n</code></pre> <p>To redefine it, use the same way as the parser:</p> <pre><code>from propan import RabbitBroker\n\nasync def custom_decode(msg, original_decoded):\n    return original_decoded(msg)\n\nbroker = RabbitBroker(decode_message=custom_decode)\n\n@broker.handle(\"test\", decode_message=custom_decode)\nasync def handler(): ...\n</code></pre>"},{"location":"getting_started/4_broker/4_custom_serialization/#example-with-protobuf","title":"Example with Protobuf","text":"<p>In this section, we will look at an example using Protobuf, however, it is also applicable for any other serialization methods.</p> Protobuf <p>Protobuf is an alternative message serialization method commonly used in GRPC. Its main advantage is much smaller <sup>1</sup> message size (compared to JSON), but it requires a message schema (<code>.proto</code> files) both on the client side and on the server side.</p> <p>To begin with, install the dependencies:</p> <pre><code>pip install grpcio-tools\n</code></pre> <p>Then we will describe the scheme of our message</p> message.proto<pre><code>syntax = \"proto3\";\n\nmessage Person {\n    string name = 1;\n    float age = 2;\n}\n</code></pre> <p>Now we will generate a Python class for working with messages in the Protobuf format</p> <pre><code>python -m grpc_tools.protoc --python_out=. --pyi_out=. -I . message.proto\n</code></pre> <p>At the output, we get 2 files: <code>message_pb2.py</code> and <code>message_pb2.pyi</code>. Now we are ready to use the generated class to serialize our messages.</p> <pre><code>from message_pb2 import Person\n\nfrom propan import PropanApp, RabbitBroker\nfrom propan.annotations import Logger, NoCast\nfrom propan.brokers.rabbit import RabbitMessage\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nasync def decode_message(msg: RabbitMessage, original) -&gt; Person:\n    decoded = Person()\n    decoded.ParseFromString(msg.body)\n    return decoded\n\n@broker.handle(\"test\", decode_message=decode_message)\nasync def consume(body: NoCast[Person], logger: Logger):\n    logger.info(body)\n\n@app.after_startup\nasync def publish():\n    body = Person(name=\"john\", age=25).SerializeToString()\n    await broker.publish(body, \"test\")\n</code></pre> <p>Note that we used the <code>NoCast</code> annotation, which excludes the message from the <code>pydantic</code> representation of our handler.</p> <pre><code>async def consume(body: NoCast[Person], logger: Logger):\n</code></pre> <ol> <li> <p>For example, a message like <code>{ \"name\": \"john\", \"age\": 25 }</code> in JSON takes 27 bytes, and in Protobuf - 11. With lists and more complex structures, the savings can be even more significant (up to 20x times).\u00a0\u21a9</p> </li> </ol>"},{"location":"getting_started/4_broker/5_publishing/","title":"Message Publishing","text":"<p>Propan uses a unified method to send messages</p> <pre><code>await broker.publish(message, ...)\n</code></pre> <p>This method, regardless of the broker, takes <code>message</code> as the first argument. However, the rest of the arguments are specific to different brokers.</p> <p>You can get acquainted with all the features specific to your broker here:</p> <ul> <li>Redis</li> <li>RabbitBroker</li> <li>NatsBroker</li> </ul>"},{"location":"getting_started/4_broker/5_publishing/#valid-types-to-submit","title":"Valid types to submit","text":"Type Send header Method of casting to bytes <code>dict</code> application/json json.dumps(message).encode() <code>Sequence</code> application/json json.dumps(message).encode() <code>pydantic.BaseModel</code> application/json message.json().encode() <code>str</code> text/plain message.encode() <code>bytes</code> message <p>Also, some brokers support sending special types, which are described in the relevant section of your broker's documentation.</p>"},{"location":"getting_started/4_broker/5_publishing/#broker-initialization","title":"Broker initialization","text":"<p>To send a message to a queue, you must first connect to it.</p> <p>If you are inside a running Propan application, you don't need to do anything: the broker is already running. Just access it and send a message.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker\n\nbroker = RedisBroker(\"redis://localhost:6379\")\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def handle(m: str):\n    await broker.publish(m, \"another-channel\")\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def handle(m: str):\n    await broker.publish(m, \"another-queue\")\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker\n\nbroker = KafkaBroker(\"localhost:9092\")\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def handle(m: str):\n    await broker.publish(m, \"another-topic\")\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker\n\nbroker = SQSBroker(\"http://localhost:9324\", ...)\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def handle(m: str):\n    await broker.publish(m, \"another-queue\")\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker\n\nbroker = NatsBroker(\"nats://localhost:4222\")\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def handle(m: str):\n    await broker.publish(m, \"another-subject\")\n</code></pre> <p>If you are only using Propan to send asynchronous messages within another framework, you can use broker as context manager to send.</p> RedisRabbitMQKafkaSQSNATS <pre><code>async with RedisBroker(\"redis://localhost:6379\") as broker:\n    await broker.publish(m, \"another-channel\")\n</code></pre> <pre><code>async with RabbitBroker(\"amqp://guest:guest@localhost:5672/\") as broker:\n    await broker.publish(m, \"another-queue\")\n</code></pre> <pre><code>async with KafkaBroker(\"localhost:9092\") as broker:\n    await broker.publish(m, \"another-topic\")\n</code></pre> <pre><code>async with SQSBroker(\"http://localhost:9324\", ...) as broker:\n    await broker.publish(m, \"another-queue\")\n</code></pre> <pre><code>async with NatsBroker(\"nats://localhost:4222\") as broker:\n    await broker.publish(m, \"another-subject\")\n</code></pre> <p>Tips</p> <p>Within this context, you can send an unlimited number of messages, as well as synchronously wait for a response to them. However, <code>handle</code> cannot be initialized within this context: they will complete their execution along with the context.</p> <p>This will be discribed in more detail in the next section.</p>"},{"location":"getting_started/4_broker/6_rpc/","title":"RPC","text":""},{"location":"getting_started/4_broker/6_rpc/#reasons-to-use-rpc-over-mq","title":"Reasons to use RPC over MQ","text":"<p>Sometimes you may need to not just send a message but also get a response to it. HTTP is usually used for this, but we already have a message delivery system, so why don't we use it?</p> <p>RPC requests on top of message brokers are executed very simply: we send a message to one queue, and receive a response from another. It looks a bit awkward, but this strategy has some advantages.</p> <ol> <li>The time between a request and a response is unlimited: we can send a request, and receive a response in a day. The HTTP request does not allow us such do that.     This can be extremely useful for services that perform long-term work: process files, run neural networks, etc.</li> <li>Asynchrony: we can decide for ourselves whether to wait for an answer right now or just send a request and process it when it is ready.</li> <li>One request - many responses: Using message brokers, we may get many responses to a single request. For example, with a request, we can initialize a communication channel through which data will be sent back as soon as it is ready.</li> </ol>"},{"location":"getting_started/4_broker/6_rpc/#implementation","title":"Implementation","text":""},{"location":"getting_started/4_broker/6_rpc/#server","title":"Server","text":"<p>From the server side (the receiving side), you do not need to change the code: <code>return</code> of your function will be automatically sent to the client if he is waiting for a response to your message.</p> <p>Note</p> <p>The result of your function must match the valid types of the <code>message</code> parameter of the <code>broker.publish</code> function.</p> <p>Acceptable types are <code>str</code>, <code>dict</code>, <code>Sequence</code>, <code>pydantic.BaseModel</code>, <code>bytes</code> and a native message of the library used for the broker.</p> RedisRabbitMQNATS <pre><code>from propan import RedisBroker\n\nbroker = RedisBroker(\"redis://localhost:6379\")\n\n@broker.handle(\"ping\")\nasync def ping(m: str):\n    return \"pong!\"  # &lt;-- send RPC response\n</code></pre> <pre><code>from propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@127.0.0.1/\")\n\n@broker.handle(\"ping\")\nasync def ping(m: str):\n    return \"pong!\"  # &lt;-- send RPC response\n</code></pre> <pre><code>from propan import NatsBroker\n\nbroker = NatsBroker(\"nats://localhost:4222\")\n\n@broker.handle(\"ping\")\nasync def ping(m: str):\n    return \"pong!\"  # &lt;-- send RPC response\n</code></pre>"},{"location":"getting_started/4_broker/6_rpc/#client","title":"Client","text":""},{"location":"getting_started/4_broker/6_rpc/#blocking-request","title":"Blocking request","text":"<p>To wait for the result of executing the request \"right here\" (as if it were an HTTP request), you just need to specify the parameter <code>callback=True</code> when sending the message.</p> RedisRabbitMQNATS <pre><code>from propan import RedisBroker\n\nasync def main():\n    async with RedisBroker(\"redis://localhost:6379\") as broker:\n        r = await broker.publish(\n            \"hi!\", \"ping\",\n            callback=True\n        )\n\n    assert r == \"pong\"  # &lt;-- take the RPC response\n</code></pre> <pre><code>from propan import RabbitBroker\n\nasync def main():\n    async with RabbitBroker(\"amqp://guest:guest@127.0.0.1/\") as broker:\n        r = await broker.publish(\n            \"hi!\", \"ping\",\n            callback=True\n        )\n\n    assert r == \"pong\"  # &lt;-- take the RPC response\n</code></pre> <pre><code>from propan import NatsBroker\n\nasync def main():\n    async with NatsBroker(\"nats://localhost:4222\") as broker:\n        r = await broker.publish(\n            \"hi!\", \"ping\",\n            callback=True\n        )\n\n    assert r == \"pong\"  # &lt;-- take the RPC response\n</code></pre> <p>To set the time that the client is ready to wait for a response from the server, use the<code>callback_timeout</code> parameter (by default - 30 seconds)</p> <pre><code>await broker.publish(\n    \"hi!\", \"ping\",\n    callback=True,\n    callback_timeout=3.0  # (1)\n)\n</code></pre> <ol> <li>Waits for result for 3 seconds</li> </ol> <p>If you are ready to wait for a response as long as it takes, you can set <code>callback_timeout=None</code></p> <pre><code>await broker.publish(\n    \"hi!\", \"ping\",\n    callback=True,\n    callback_timeout=None\n)\n</code></pre> <p>Warning</p> <p>This code will wait for a response indefinitely, even if the server is unable to process the message or processing takes a long time.</p> <p>By default, if Propan did not wait for the server response, the function will return <code>None</code>. If you want to explicitly process <code>TimeoutError</code>, use the <code>raise_timeout</code> parameter.</p> <pre><code>await broker.publish(\n    \"hi!\", \"ping\",\n    callback=True,\n    raise_timeout=True\n)\n</code></pre>"},{"location":"getting_started/4_broker/6_rpc/#non-blocking-request","title":"Non-blocking request","text":"<p>To process the response outside of the main execution loop, you can initialize a handler and then pass its queue as the <code>reply_to</code> argument of the request.</p> RedisRabbitMQNATS <pre><code>import asyncio\nfrom propan import RedisBroker\n\nbroker = RedisBroker(\"redis://localhost:6379\")\n\n@broker.handle(\"reply\")\nasync def get_message(m: str):\n    assert m == \"pong!\"  # &lt;-- take the RPC response\n\nasync def main():\n    await broker.start()\n\n    await broker.publish(\n        \"hello\", \"ping\",\n        reply_to=\"reply\"\n    )\n\n    try:\n        await asyncio.Future()\n    finally:\n        await broker.close()\n\nasyncio.run(main())\n</code></pre> <pre><code>import asyncio\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@127.0.0.1/\")\n\n@broker.handle(\"reply\")\nasync def get_message(m: str):\n    assert m == \"pong!\"  # &lt;-- take the RPC response\n\nasync def main():\n    await broker.start()\n\n    await broker.publish(\n        \"hello\", \"ping\",\n        reply_to=\"reply\"\n    )\n\n    try:\n        await asyncio.Future()\n    finally:\n        await broker.close()\n\nasyncio.run(main())\n</code></pre> <pre><code>import asyncio\nfrom propan import NatsBroker\n\nbroker = NatsBroker(\"nats://localhost:4222\")\n\n@broker.handle(\"reply\")\nasync def get_message(m: str):\n    assert m == \"pong!\"  # &lt;-- take the RPC response\n\nasync def main():\n    await broker.start()\n\n    await broker.publish(\n        \"hello\", \"ping\",\n        reply_to=\"reply\"\n    )\n\n    try:\n        await asyncio.Future()\n    finally:\n        await broker.close()\n\nasyncio.run(main())\n</code></pre> <p>Note</p> <p>Note that the <code>broker</code> must be running to consume non-blocking messages. This means we cannot work with non-blocking RPC messages using <code>broker</code> as a context manager.</p>"},{"location":"getting_started/5_dependency/1_di-index/","title":"Dependencies","text":"<p>Propan uses the secondary library FastDepends for dependency management. This dependency system is literally borrowed from FastAPI, so if you know how to work with this framework, you know how to work with dependencies in Propan.</p> <p>You can go to the documentation FastDepends if you want to get more details, however, the key points and additions will be covered here.</p>"},{"location":"getting_started/5_dependency/1_di-index/#type-casting","title":"Type casting","text":"<p>The key function in the dependency management and type conversion system in Propan is the decorator <code>@apply_types</code> (@inject in FastDepends).</p> <p>By default, it applies to all event handlers, unless you disabled the same option at a broker creation.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import RedisBroker\nbroker = RedisBroker(..., apply_types=False)\n</code></pre> <pre><code>from propan import RabbitBroker\nbroker = RabbitBroker(..., apply_types=False)\n</code></pre> <pre><code>from propan import KafkaBroker\nbroker = KafkaBroker(..., apply_types=False)\n</code></pre> <pre><code>from propan import SQSBroker\nbroker = SQSBroker(..., apply_types=False)\n</code></pre> <pre><code>from propan import NatsBroker\nbroker = NatsBroker(..., apply_types=False)\n</code></pre> <p>Warning</p> <p>By setting the <code>apply_types=False</code> flag, you disable not only type casting, but also <code>Depends</code> and <code>Context</code>.</p> <p>This flag can be useful if you are using Propan within another framework and you do not need to use a native dependency system.</p>"},{"location":"getting_started/5_dependency/1_di-index/#dependency-injection","title":"Dependency Injection","text":"<p>To implement dependencies in Propan, a special class Depends is used</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker, Depends\n\nbroker = RedisBroker(\"redis://localhost:6379\")\napp = PropanApp(broker)\n\ndef simple_dependency():\n    return 1\n\n@broker.handle(\"test\")\nasync def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker, Depends\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\napp = PropanApp(broker)\n\ndef simple_dependency():\n    return 1\n\n@broker.handle(\"test\")\nasync def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker, Depends\n\nbroker = KafkaBroker(\"localhost:9092\")\napp = PropanApp(broker)\n\ndef simple_dependency():\n    return 1\n\n@broker.handle(\"test\")\nasync def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker, Depends\n\nbroker = SQSBroker(\"http://localhost:9324\", ...)\napp = PropanApp(broker)\n\ndef simple_dependency():\n    return 1\n\n@broker.handle(\"test\")\nasync def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker, Depends\n\nbroker = NatsBroker(\"nats://localhost:4222\")\napp = PropanApp(broker)\n\ndef simple_dependency():\n    return 1\n\n@broker.handle(\"test\")\nasync def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <p>The first step: we need to declare a dependency - it can be any <code>Callable</code> object.</p> Callable <p>\"Callable\" is an object that can be \"called\". It can be a function, a class, or a class method.</p> <p>In other words: if you can write such code <code>my_object()</code> - <code>my_object</code> will be <code>Callable</code></p> RedisRabbitMQKafkaSQSNATS <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <p>Second step: Declare which dependencies you need using <code>Depends</code></p> RedisRabbitMQKafkaSQSNATS <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <p>The last step: Just use the result of executing your dependency!</p> <p>It's easy, isn't it?</p> <p>Auto @apply_types</p> <p>In the code above, we didn't use this decorator for our dependencies. However, it still applies to all functions used as dependencies. Keep this in your mind.</p>"},{"location":"getting_started/5_dependency/1_di-index/#top-level-dependencies","title":"Top-level dependencies","text":"<p>If you don't need a dependency result you can use the following code:</p> <pre><code>@broker.handle(\"test\")\ndef method(_ = Depends(...)): ...\n</code></pre> <p>But, using a special <code>handle</code> parameter is more suitable:</p> <pre><code>@broker.handle(\"test\", dependencies=[Depends(...)])\ndef method(): ...\n</code></pre> <p>Also, you are able to declare broker-level dependencies: they will be applied to all brokers' handlers.</p> <pre><code>broker = RabbitBroker(dependencies=[Depends(...)])\n</code></pre>"},{"location":"getting_started/5_dependency/1_di-index/#nested-dependencies","title":"Nested dependencies","text":"<p>Dependencies can also contain other dependencies. This works in a very predictable way: just declare <code>Depends</code> in the dependent function.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker, Depends\n\nbroker = RedisBroker(\"redis://localhost:6379\")\napp = PropanApp(broker)\n\ndef another_dependency():\n    return 1\n\ndef simple_dependency(b: int = Depends(another_dependency)): # (1)\n    return b * 2\n\n@broker.handle(\"test\")\nasync def handler(\n    body: dict,\n    a: int = Depends(another_dependency),\n    b: int = Depends(simple_dependency)):\n    assert (a + b) == 3\n</code></pre> <ol> <li>A nested dependency is called here</li> </ol> <pre><code>from propan import PropanApp, RabbitBroker, Depends\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\napp = PropanApp(broker)\n\ndef another_dependency():\n    return 1\n\ndef simple_dependency(b: int = Depends(another_dependency)): # (1)\n    return b * 2\n\n@broker.handle(\"test\")\nasync def handler(\n    body: dict,\n    a: int = Depends(another_dependency),\n    b: int = Depends(simple_dependency)):\n    assert (a + b) == 3\n</code></pre> <ol> <li>A nested dependency is called here</li> </ol> <pre><code>from propan import PropanApp, KafkaBroker, Depends\n\nbroker = KafkaBroker(\"localhost:9092\")\napp = PropanApp(broker)\n\ndef another_dependency():\n    return 1\n\ndef simple_dependency(b: int = Depends(another_dependency)): # (1)\n    return b * 2\n\n@broker.handle(\"test\")\nasync def handler(\n    body: dict,\n    a: int = Depends(another_dependency),\n    b: int = Depends(simple_dependency)):\n    assert (a + b) == 3\n</code></pre> <ol> <li>A nested dependency is called here</li> </ol> <pre><code>from propan import PropanApp, SQSBroker, Depends\n\nbroker = SQSBroker(\"http://localhost:9324\", ...)\napp = PropanApp(broker)\n\ndef another_dependency():\n    return 1\n\ndef simple_dependency(b: int = Depends(another_dependency)): # (1)\n    return b * 2\n\n@broker.handle(\"test\")\nasync def handler(\n    body: dict,\n    a: int = Depends(another_dependency),\n    b: int = Depends(simple_dependency)):\n    assert (a + b) == 3\n</code></pre> <ol> <li>A nested dependency is called here</li> </ol> <pre><code>from propan import PropanApp, NatsBroker, Depends\n\nbroker = NatsBroker(\"nats://localhost:4222\")\napp = PropanApp(broker)\n\ndef another_dependency():\n    return 1\n\ndef simple_dependency(b: int = Depends(another_dependency)): # (1)\n    return b * 2\n\n@broker.handle(\"test\")\nasync def handler(\n    body: dict,\n    a: int = Depends(another_dependency),\n    b: int = Depends(simple_dependency)):\n    assert (a + b) == 3\n</code></pre> <ol> <li>A nested dependency is called here</li> </ol> <p>Caching</p> <p>In the example above, the <code>another_dependency</code> function will be called at ONCE!. <code>Propan</code> caches all dependency execution results within ONE <code>@apply_stack</code> call stack. This means that all nested dependencies will receive the cached result of dependency execution. But, between different calls of the main function, these results will be different.</p> <p>To prevent this behavior, just use <code>Depends(..., cache=False)</code>. In this case, the dependency will be used for each function in the call stack where it is used.</p>"},{"location":"getting_started/5_dependency/1_di-index/#use-with-regular-functions","title":"Use with regular functions","text":"<p>You can use the decorator <code>@apply_types</code> not only together with your `@broker.handle', but also with the usual functions: both synchronous and asynchronous.</p> SyncAsync <pre><code>from propan import Depends, apply_types\n\ndef simple_dependency(a: int, b: int = 3):\n    return a + b\n\n@apply_types\ndef method(a: int, d: int = Depends(simple_dependency)):\n    return a + d\n\nassert method(\"1\") == 5\n</code></pre> <pre><code>import asyncio\nfrom propan import Depends, apply_types\n\nasync def simple_dependency(a: int, b: int = 3):\n    return a + b\n\ndef another_dependency(a: int):\n    return a\n\n@apply_types\nasync def method(\n    a: int,\n    b: int = Depends(simple_dependency),\n    c: int = Depends(another_dependency),\n):\n    return a + b + c\n\nassert asyncio.run(method(\"1\")) == 6\n</code></pre> <p>Be careful</p> <p>In asynchronous code, you can use both synchronous and asynchronous dependencies. But in synchronous code, only synchronous dependencies are available to you.</p>"},{"location":"getting_started/5_dependency/1_di-index/#casting-dependency-types","title":"Casting dependency types","text":"<p>FastDepends, used by Propan, also gives the type <code>return</code>. This means that the value returned by the dependency will be be cast to the type twice: as <code>return</code> these are dependencies and as the input argument of the main function. This does not incur additional costs if these types have the same annotation. Just keep it in mind. Or not... Anyway, I've warned you.</p> <pre><code>from propan import Depends, apply_types\n\ndef simple_dependency(a: int, b: int = 3) -&gt; str:\n    return a + b  # 'return' is cast to `str` for the first time\n\n@inject\ndef method(a: int, d: int = Depends(simple_dependency)):\n    # 'd' is cast to `int` for the second time\n    return a + d\n\nassert method(\"1\") == 5\n</code></pre> <p>Also, the result of executing the dependency is cached. If you use this dependency in <code>N</code> functions, this cached result will be converted to type <code>N</code> times (at the input to the function being used).</p> <p>To avoid problems with this, use mypy or just be careful with the annotation of types in your project.</p>"},{"location":"getting_started/5_dependency/2_context/","title":"CONTEXT","text":"<p>Propan stores the context of the application and each request. You can access them using a special class <code>Context</code>.</p> <pre><code>from propan import Context\n\n@broker.hanlde(\"test\")\nasync def handler(broker = Context()):\n    await broker.publish(\"response\", \"response-queue\")\n</code></pre>"},{"location":"getting_started/5_dependency/2_context/#existing-fields","title":"Existing fields","text":"<p>Context already contains some global objects that you can always access:</p> <ul> <li>app - the <code>PropanApp</code> object of your application</li> <li>broker - current broker</li> <li>context - the context itself, in which you can write your own fields</li> <li>logger - logger used for your broker (tags messages with message_id)</li> <li>message - raw message (if you need access to it)</li> </ul> <p>At the same time, thanks to <code>contextlib.ContextVar</code>, message always corresponds to the context the current handler process.</p>"},{"location":"getting_started/5_dependency/2_context/#access-to-context-fields","title":"Access to context fields","text":"<p>By default, as in the example above, the context searches for an object based on the argument name.</p> <pre><code>from propan import Context\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    app = Context(),\n    broker = Context(),\n    context = Context(),\n    logger = Context(),\n    message = Context(),\n):\n    ...\n</code></pre>"},{"location":"getting_started/5_dependency/2_context/#access-by-name","title":"Access by name","text":"<p>Sometimes you may need to use a different name for the argument (not the one under which it is stored in the context). Or even get access not to the whole object, but only to its field or method. To do this, just specify by name what you want to get - and the context will provide you with the wished object.</p> <pre><code>from propan import Context\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    propan_app = Context(\"app\"),\n    publish = Context(\"broker.publish\"),\n    secret_key = Context(\"settings.app.secret_key\"),\n):\n    await publish(secret_key, \"secret-queue\")\n</code></pre>"},{"location":"getting_started/5_dependency/2_context/#annotated","title":"Annotated","text":"<p>The default method is not very convenient if you need to use the same context field throughout the project. Also, it requires explicit annotation of the type of the incoming argument if we want to use the auto-completion of our IDE. In order to avoid long import chains and code duplication, <code>Context</code> is fully compatible with <code>typing.Annotated</code>.</p> <pre><code>from propan import Context, RabbitBroker\nfrom typing_extension import Annotated\n\nBroker = Annotated[RabbitBroker, Context(\"broker\")]\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    broker: Broker,\n):\n    ...\n</code></pre> <p>For your convenience, Propan already contains annotations for existing context fields. You can import them and use at your code.</p> <pre><code>from propan import annotations\n\n@rabbit_broker.handle(\"test\")\nasync def base_handler(\n    body: dict,\n    app: annotations.App,\n    context: annotations.ContextRepo,\n    logger: annotations.Logger,\n    broker: annotations.RabbitBroker,\n    message: annotations.RabbitMessage,\n):\n    ...\n</code></pre>"},{"location":"getting_started/5_dependency/2_context/#default-values","title":"Default values","text":"<p>If you try to access a field that does not exist in the global context, you will get the <code>pydantic.ValidationError</code> exception.</p> <p>However, you can set the default value if you feel the need.</p> <pre><code>from propan import Context\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    some_field = Context(default=None)\n):\n    assert some_field is None\n</code></pre>"},{"location":"getting_started/5_dependency/2_context/#casting-context-types","title":"Casting context types","text":"<p>By default, context fields are NOT CAST to the type specified in their annotation. If you need this functionality, you can set the appropriate flag.</p> <pre><code>from propan import Context\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    some_field: int = Context(default=\"1\", cast=True)\n):\n    assert some_field == 1\n</code></pre>"},{"location":"getting_started/5_dependency/2_context/#declaration-of-context-fields","title":"Declaration of context fields","text":""},{"location":"getting_started/5_dependency/2_context/#globally","title":"Globally","text":"<p>To declare the context fields, you need to call the <code>context.set_global</code> method with an indication of the key by which the object will be placed in the context.</p> <pre><code>from propan.annotations import ContextRepo\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    context: ContextRepo\n):\n    context.set_global(\"my_key\", 1)\n</code></pre> <p>In this case, the field becomes a global context field: it does not depend on the current message handler (unlike <code>message</code>)</p> <p>To remove a field from the context use <code>reset_global</code> <pre><code>context.reset_global(\"my_key\")\n</code></pre></p>"},{"location":"getting_started/5_dependency/2_context/#locally","title":"Locally","text":"<p>To set the local context (it will act in all functions called inside it), use the context manager <code>scope</code></p> <pre><code>from propan import apply_types, Context\nfrom propan.annotations import ContextRepo\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    context: ContextRepo\n):\n    with context.scope(\"local\", 1):\n        nested_function()\n\n@apply_types\ndef nested_function(local = Context()):\n    assert local == 1\n</code></pre> <p>Also, you can set the context yourself: then it will act within the current call stack until you clear it.</p> <pre><code>from propan import apply_types, Context\nfrom propan.annotations import ContextRepo\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    context: ContextRepo\n):\n    token = context.set_local(\"local\", 1):\n    nested_function()\n    context.reset_local(\"local\", token)\n\n@apply_types\ndef nested_function(local = Context()):\n    assert local == 1\n</code></pre>"},{"location":"getting_started/5_dependency/2_context/#use-in-other-functions","title":"Use in other functions","text":"<p>By default, the context is available in the same place as <code>Depends</code>:</p> <ul> <li>at life cycle hooks</li> <li>message handlers</li> <li>dependencies</li> </ul>"},{"location":"getting_started/5_dependency/2_context/#depends","title":"Depends","text":"<p>When using <code>Context</code> in <code>Depends</code>, there is no need to write additional code: like nested <code>Depends</code>, <code>Context</code> is also available by default. </p> <pre><code>from propan import Context, Depends\n\ndef nested_func(\n    body: dict,\n    logger = Context()\n):\n    logger.info(body)\n    return body\n\n@broker.hanlde(\"test\")\nasync def handler(body: dict, n = Depends(nested_func)):\n    pass\n</code></pre>"},{"location":"getting_started/5_dependency/2_context/#normal-functions","title":"Normal functions","text":"<p>To use context at other functions use the decorator <code>@apply_types</code>. This case, the called function context will correspond to the context of the event handler from which it was called.</p> <pre><code>from propan import apply_types, Context\n\n@broker.hanlde(\"test\")\nasync def handler(body: dict):\n    nested_func()\n\n@apply_types\ndef nested_func(\n    body: dict,\n    logger = Context()\n):\n    logger.info(body)\n</code></pre> <p>In the example above, we did not pass the <code>logger</code> function at calling, it was placed out of context.</p>"},{"location":"helpful/in-progress/","title":"In progress.md","text":""},{"location":"helpful/in-progress/#in-progress","title":"In progress","text":"<p>Warning</p> <p>Sorry, the current page still under development, but should be here a little bit later. Hoping see you soon...</p>"},{"location":"helpful/missing-translation/","title":"Missing translation.md","text":""},{"location":"helpful/missing-translation/#missing-translation","title":"Missing translation","text":"<p>Warning</p> <p>The current page doesn't have a translation yet.</p>"},{"location":"integrations/1_integrations-index/","title":"INTEGRATIONS","text":"<p>Propan brokers are very easy to integrate with any of your applications: it is enough to initialize the broker at startup and close it correctly at the end of your application.</p> <p>Most HTTP frameworks have built-in lifecycle hooks for this.</p> FastAPIAiohttpBlacksheepFalconQuartSanic <p>Tip</p> <p>If you want to use Propan in conjunction with FastAPI, perhaps you should use a special plugin</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\napp = FastAPI()\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await broker.start()\n    yield\n    await broker.close()\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n</code></pre> <pre><code>from aiohttp import web\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\nasync def start_broker(app):\n    await broker.start()\n\n\nasync def stop_broker(app):\n    await broker.close()\n\n\nasync def hello(request):\n    return web.Response(text=\"Hello, world\")\n\n\napp = web.Application()\napp.add_routes([web.get(\"/\", hello)])\napp.on_startup.append(start_broker)\napp.on_cleanup.append(stop_broker)\n\n\nif __name__ == \"__main__\":\n    web.run_app(app)\n</code></pre> <pre><code>from blacksheep import Application\nfrom propan import RabbitBroker\n\napp = Application()\n\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\n@app.on_start\nasync def start_broker(application: Application) -&gt; None:\n    await broker.start()\n\n\n@app.on_stop\nasync def stop_broker(application: Application) -&gt; None:\n    await broker.close()\n\n\n@app.route(\"/\")\nasync def home():\n    return \"Hello, World!\"\n</code></pre> <pre><code>import falcon\nimport falcon.asgi\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\nclass ThingsResource:\n    async def on_get(self, req, resp):\n        resp.status = falcon.HTTP_200\n        resp.content_type = falcon.MEDIA_TEXT\n        resp.text = (\n            \"\\nTwo things awe me most, the starry sky \"\n            \"above me and the moral law within me.\\n\"\n            \"\\n\"\n            \"    ~ Immanuel Kant\\n\\n\"\n        )\n\n\nclass PropanMiddleware:\n    async def process_startup(self, scope, event):\n        await broker.start()\n\n    async def process_shutdown(self, scope, event):\n        await broker.close()\n\n\napp = falcon.asgi.App()\napp.add_middleware(PropanMiddleware())\napp.add_route(\"/things\", ThingsResource())\n</code></pre> <pre><code>from quart import Quart\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\napp = Quart(__name__)\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\n@app.before_serving\nasync def start_broker():\n    await broker.start()\n\n\n@app.after_serving\nasync def stop_broker():\n    await broker.close()\n\n\n@app.route(\"/\")\nasync def json():\n    return {\"hello\": \"world\"}\n</code></pre> <pre><code>from sanic import Sanic\nfrom sanic.response import text\nfrom propan import RabbitBroker\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n</code></pre> <p>However, even if such a hook is not provided, you can do it yourself.</p> Tornado <pre><code>import asyncio\n\nimport tornado.web\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\n\ndef make_app():\n    return tornado.web.Application(\n        [\n            (r\"/\", MainHandler),\n        ]\n    )\n\n\nasync def main():\n    app = make_app()\n    app.listen(8888)\n\n    await broker.start()\n    try:\n        await asyncio.Event().wait()\n    finally:\n        await broker.close()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"integrations/2_fastapi-plugin/","title":"FastAPI Plugin","text":""},{"location":"integrations/2_fastapi-plugin/#handle-messages","title":"Handle messages","text":"<p>Propan can be used as a part of FastAPI.</p> <p>Just import a PropanRouter you need and declare the message handler using the <code>@event</code> decorator. This decorator is similar to the decorator <code>@handle</code> for the related brokers.</p> <p>Tip</p> <p>When used in this way, Propan does not use its own dependency system, but integrates into FastAPI. That is, you can use <code>Depends</code>, <code>BackgroundTasks</code> and other FastAPI tools as if it were a regular HTTP endpoint.</p> <p>Note that the code below uses <code>fastapi.Depends</code>, not <code>propan.Depends</code>.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import RedisRouter\n\nrouter = RedisRouter(\"redis://localhost:6379\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, Redis!\" }\n\n@router.get(\"/\")\nasync def hello_http():\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, Rabbit!\" }\n\n@router.get(\"/\")\nasync def hello_http():\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import KafkaRouter\n\nrouter = KafkaRouter(\"localhost:9092\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, Kafka!\" }\n\n@router.get(\"/\")\nasync def hello_http():\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import SQSRouter\n\nrouter = SQSRouter(\"http://localhost:9324\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, SQS!\" }\n\n@router.get(\"/\")\nasync def hello_http():\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import NatsRouter\n\nrouter = NatsRouter(\"nats://localhost:4222\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, Nats!\" }\n\n@router.get(\"/\")\nasync def hello_http():\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <p>When processing a message from a broker, the entire message body is placed simultaneously in both the <code>body</code> and <code>path</code> request parameters: you can get access to them in any way convenient for you. The message header is placed in <code>headers</code>.</p> <p>Also, this router can be fully used as an <code>HttpRouter</code> (of which it is the inheritor). So you can use it to declare any <code>get</code>, <code>post</code>, <code>put</code> and other HTTP methods. For example, this is done at  19 line.</p> <p>Warning</p> <p>If your ASGI server does not support installing state inside lifespan, you can disable this behavior as follows: <pre><code>router = PropanRouter(..., setup_state=False)\n</code></pre> However, after that you will not be able to access the broker from your application's state (but it is still available as the <code>router.broker</code>)</p>"},{"location":"integrations/2_fastapi-plugin/#sending-messages","title":"Sending messages","text":"<p>Inside each router there is a broker. You can easily access it if you need to send a message to MQ.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import RedisRouter\n\nrouter = RedisRouter(\"redis://localhost:6379\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.get(\"/\")\nasync def hello_http():\n    await router.broker.publish(\"Hello, Redis!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.get(\"/\")\nasync def hello_http():\n    await router.broker.publish(\"Hello, Rabbit!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import KafkaRouter\n\nrouter = KafkaRouter(\"localhost:9092\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.get(\"/\")\nasync def hello_http():\n    await router.broker.publish(\"Hello, Kafka!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import SQSRouter\n\nrouter = SQSRouter(\"http://localhost:9324\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.get(\"/\")\nasync def hello_http():\n    await router.broker.publish(\"Hello, SQS!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import NatsRouter\n\nrouter = NatsRouter(\"nats://localhost:4222\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.get(\"/\")\nasync def hello_http():\n    await router.broker.publish(\"Hello, Nats!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <p>You can use the following <code>Depends</code> to access the broker if you want to use it at different parts of your program.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from fastapi import FastAPI, Depends\nfrom propan import RedisBroker\nfrom propan.fastapi import RedisRouter\nfrom typing_extensions import Annotated\n\nrouter = RedisRouter(\"redis://localhost:6379\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\ndef broker():\n    return router.broker\n\n@router.get(\"/\")\nasync def hello_http(broker: Annotated[RedisBroker, Depends(broker)]):\n    await broker.publish(\"Hello, Redis!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI, Depends\nfrom propan import RabbitBroker\nfrom propan.fastapi import RabbitRouter\nfrom typing_extensions import Annotated\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\ndef broker():\n    return router.broker\n\n@router.get(\"/\")\nasync def hello_http(broker: Annotated[RabbitBroker, Depends(broker)]):\n    await broker.publish(\"Hello, Rabbit!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI, Depends\nfrom propan import KafkaBroker\nfrom propan.fastapi import KafkaRouter\nfrom typing_extensions import Annotated\n\nrouter = KafkaRouter(\"localhost:9092\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\ndef broker():\n    return router.broker\n\n@router.get(\"/\")\nasync def hello_http(broker: Annotated[KafkaBroker, Depends(broker)]):\n    await broker.publish(\"Hello, Kafka!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI, Depends\nfrom propan import SQSBroker\nfrom propan.fastapi import SQSRouter\nfrom typing_extensions import Annotated\n\nrouter = SQSRouter(\"http://localhost:9324\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\ndef broker():\n    return router.broker\n\n@router.get(\"/\")\nasync def hello_http(broker: Annotated[SQSBroker, Depends(broker)]):\n    await broker.publish(\"Hello, SQS!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI, Depends\nfrom propan import NatsBroker\nfrom propan.fastapi import NatsRouter\nfrom typing_extensions import Annotated\n\nrouter = NatsRouter(\"nats://localhost:4222\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\ndef broker():\n    return router.broker\n\n@router.get(\"/\")\nasync def hello_http(broker: Annotated[NatsBroker, Depends(broker)]):\n    await broker.publish(\"Hello, Nats!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <p>Or you can access broker from a FastAPI application state</p> <pre><code>@app.get(\"/\")\ndef main(request: Request):\n    broker = request.state.broker\n</code></pre>"},{"location":"integrations/2_fastapi-plugin/#after_startup","title":"@after_startup","text":"<p>The <code>PropanApp</code> application has the <code>after_startup</code> hook, which allows you to perform operations with your message broker after the connection is established. This can be extremely convenient for managing your brokers' objects and/or sending messages. This hook is also available for your FastAPI PropanRouter</p> RedisRabbitMQKafkaSQSNATS <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import RedisRouter\n\nrouter = RedisRouter(\"redis://localhost:6379\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.after_startup\ndef do_smth(app: FastAPI):\n    ...\n\n@router.after_startup\nasync def publish_smth(app: FastAPI):\n    await router.broker.publish(...)\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.after_startup\ndef do_smth(app: FastAPI):\n    ...\n\n@router.after_startup\nasync def publish_smth(app: FastAPI):\n    await router.broker.publish(...)\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import KafkaRouter\n\nrouter = KafkaRouter(\"localhost:9092\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.after_startup\ndef do_smth(app: FastAPI):\n    ...\n\n@router.after_startup\nasync def publish_smth(app: FastAPI):\n    await router.broker.publish(...)\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import SQSRouter\n\nrouter = SQSRouter(\"http://localhost:9324\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.after_startup\ndef do_smth(app: FastAPI):\n    ...\n\n@router.after_startup\nasync def publish_smth(app: FastAPI):\n    await router.broker.publish(...)\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import NatsRouter\n\nrouter = NatsRouter(\"nats://localhost:4222\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.after_startup\ndef do_smth(app: FastAPI):\n    ...\n\n@router.after_startup\nasync def publish_smth(app: FastAPI):\n    await router.broker.publish(...)\n\napp.include_router(router)\n</code></pre>"},{"location":"integrations/2_fastapi-plugin/#documentation","title":"Documentation","text":"<p>When using Propan as a router for FastAPI, the framework automatically registers endpoints for hosting AsyncAPI documentation into your application with the following default values:</p> <pre><code>from propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\n    schema_url=\"/asyncapi\",\n    include_in_schema=True,\n)\n</code></pre>"},{"location":"kafka/1_kafka-index/","title":"Kafka","text":""},{"location":"kafka/1_kafka-index/#in-progress","title":"In progress","text":"<p>Warning</p> <p>Sorry, the current page still under development, but should be here a little bit later. Hoping see you soon...</p>"},{"location":"nats/1_nats-index/","title":"NATS","text":""},{"location":"nats/1_nats-index/#advantages-and-disadvantages","title":"Advantages and disadvantages","text":"<p>NATS is an easy-to-use, high-performance message broker written in Golang. If your application does not require complex routing logic, should cope with high load, scale and do not require large hardware costs, NATS will be an excellent choice for you.</p> <p>Note</p> <p>More information about NATS can be found on the official website</p> <p>However, NATS has disadvantages that you should be aware of:</p> <ul> <li>Messages are not persistent. If the message is published while your consumer is disconnected, it will be lost.</li> <li>There are no complex routing mechanisms.</li> <li>There are no mechanisms for confirming receipt and processing of messages from the consumer.</li> </ul> <p>These shortcomings are corrected by using the persistent level - JetStream. If you need strict guarantees for the delivery and processing of messages to the small detriment of the speed and resources consumed, you can use NatsJS.</p>"},{"location":"nats/1_nats-index/#routing-rules","title":"Routing rules","text":"<p>NATS does not have the ability to configure complex routing rules. The only entity in NATS is <code>subject</code>, which can be subscribed to either directly by name or by regular expression pattern.</p> <p>Both examples are discussed a little further.</p> <p>In order to support the ability to scale consumers horizontally, NATS supports the <code>queue group</code> functionality: a message sent to <code>subject</code> will be processed by a random consumer from the <code>queue group</code> subscribed to this <code>subject</code>. This approach allows you to increase the processing speed of <code>subject</code> by N times when starting N consumers with one group.</p>"},{"location":"nats/2_publishing/","title":"NATS Publishing","text":"<p>To send messages, <code>NatsBroker</code> uses the unified <code>publish</code> method.</p> <pre><code>import asyncio\nfrom propan import NatsBroker\n\nasync def pub():\n    async with NatsBroker() as broker:\n        await broker.publish(\"Hi!\", subject=\"test\")\n\nasyncio.run(pub())\n</code></pre>"},{"location":"nats/2_publishing/#basic-arguments","title":"Basic arguments","text":"<p>The <code>publish</code> method accepts the following arguments:</p> <ul> <li><code>message</code>: bytes | str | dict | Sequence[Any] | pydantic.BaseModel - message to send</li> <li><code>subject</code>: str - subject, where the message will be sent.</li> </ul>"},{"location":"nats/2_publishing/#message-parameters","title":"Message Parameters","text":"<ul> <li><code>headers</code>: dict[str, Any] | None = None - headers of the message being sent (used by consumers)</li> </ul>"},{"location":"nats/2_publishing/#rpc-arguments","title":"RPC arguments","text":"<p>Also <code>publish</code> supports common arguments for creating RPC queries:</p> <ul> <li><code>reply_to</code>: str = \"\" - which channel to send the response to (used for asynchronous RPC requests)</li> <li><code>callback</code>: bool = False - whether to expect a response to the message</li> <li><code>callback_timeout</code>: float | None = 30.0 - timeout waiting for a response. In the case of <code>None</code> - waits indefinitely</li> <li><code>raise_timeout</code>: bool = False<ul> <li><code>False</code> - return None in case of timeout</li> <li><code>True</code> - error <code>TimeoutError</code> in case of timeout</li> </ul> </li> </ul>"},{"location":"nats/4_nats-js/","title":"NATS JetStream","text":"<p>The default NATS usage is suitable for scenarios where:</p> <ul> <li><code>publisher</code> and <code>consumer</code> are always online;</li> <li>a system tolerate to the messages loss.</li> </ul> <p>If you need stricter restrictions, like:</p> <ul> <li>an availability of a message processing confirmation mechanism (<code>ack</code>/`nack');</li> <li>message persistence (will accumulate in the queue when <code>consumer</code> is offline).</li> </ul> <p>You should use the NATS JetStream extension.</p> <p>In fact, the JetStream extension is the same NATS with the addition a persistent layer above the file system. Therefore, all interfaces for publishing and consuming messages are similar to the regular NATS usage.</p> <p>However, the JetStream layer has many possibilities for configuration: from the deleting old messages policy to the maximum stored messages number limit. You can find out more about all JetStream features in the official documentation.</p> <p>If you have worked with other message brokers, then you should know that the logic of JS is closer to Kafka than to RabbitMQ: messages after confirmation are not deleted from the queue, but remain there until the queue is full and it will start deleting old messages (or in accordance with other logic that you can configure yourself).</p> <p>When connecting a <code>consumer</code> (and, especially, when reconnecting), you must determine for yourself, according to what logic it will consume messages: from the subject beginning, starting with some message, starting from some time, only new ones, etc. Don't be surprised if a connection is restored, your <code>consumer</code> starts to process all messages received earlier again - you haven't defined the rule.</p> <p>Also NATS JetStream has built-in <code>key-value</code> (close to Redis) and <code>object</code> (close to Minio) storages, which, in addition to interface put/get have the ability to subscribe to events, which can be extremely useful in various scenarios.</p> <p>Propan does not provide access to this functionality directly, but it is covered by the [nats-py] library used(https://github.com/nats-io/nats.py){target=\"_blank\"}. You can access the JS object from the application context:</p> <pre><code>from propan import PropanApp, NatsJSBroker\nfrom propan.annotations import NatsJS\n\nbroker = NatsJSBroker()\napp = PropanApp(broker)\n\n@app.after_startup\nasync def example(js: NatsJS):\n    # JS Key-Value Storage\n    storage = await js.create_key_value(bucket=\"propan_kv\")\n\n    await storage.put(\"hello\", b\"propan!\")\n    assert (await storage.get(\"hello\")) == b\"propan!\"\n\n    # JS Object Storage\n    storage = await js.create_object_store(\"propan-obs\")\n\n    obj_name = \"file.mp4\"\n    with open(obj_name) as f:\n        await storage.put(obj_name, f)\n\n    with open(f\"copy-{obj_name}\") as f:\n        await storage.get(obj_name, f)\n</code></pre>"},{"location":"nats/3_examples/1_direct/","title":"Direct","text":"<p>Direct Subject is the basic way to route messages in NATS. Its essence is very simple: <code>subject</code> sends messages to all consumers subscribed to it.</p>"},{"location":"nats/3_examples/1_direct/#scaling","title":"Scaling","text":"<p>If one <code>subject</code> is listening by several consumers with the same <code>queue group</code>, the message will go to a random consumer each time.</p> <p>Thus, NATS can independently balance the load on queue consumers. You can increase the processing speed of the message flow from the queue by simply launching additional instances of the consumer service. You don't need to make changes to the current infrastructure configuration: NATS will take care of how to distribute messages between your services.</p>"},{"location":"nats/3_examples/1_direct/#example","title":"Example","text":"<p>Direct Subject is the type used in Propan by default: you can simply declare it as follows</p> <pre><code>@broker.handler(\"test_subject\")\nasync def handler():\n...\n</code></pre> <p>Full example:</p> <pre><code>from propan import PropanApp, NatsBroker\nfrom propan.annotations import Logger\n\nbroker = NatsBroker()\napp = PropanApp(broker)\n\n@broker.handle(\"test-subj-1\", \"workers\")\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(\"test-subj-1\", \"workers\")\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(\"test-subj-2\", \"workers\")\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(\"\", \"test-subj-1\")  # handlers: 1 or 2\n    await broker.publish(\"\", \"test-subj-1\")  # handlers: 1 or 2\n    await broker.publish(\"\", \"test-subj-2\")  # handlers: 3\n</code></pre>"},{"location":"nats/3_examples/1_direct/#consumer-announcement","title":"Consumer Announcement","text":"<p>To begin with, we have declared several consumers for two <code>subjects</code>: <code>test-subj-1</code> and <code>test-subj-2</code>:</p> <pre><code>@broker.handle(\"test-subj-1\", \"workers\")\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(\"test-subj-1\", \"workers\")\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(\"test-subj-2\", \"workers\")\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n</code></pre> <p>Note</p> <p>Note that all consumers are subscribed using the same <code>queue_group</code>: within the same service, this does not make sense, since messages will come to these handlers in turn. Here we emulate the work of several consumers and load balancing between them.</p>"},{"location":"nats/3_examples/1_direct/#message-distribution","title":"Message distribution","text":"<p>Now the distribution of messages between these consumers will look like this:</p> <pre><code>    await broker.publish(\"\", \"test-subj-1\")  # handlers: 1 or 2\n</code></pre> <p>The message <code>1</code> will be sent to <code>handler1</code> or <code>handler2</code>, because they are listening to one <code>subject</code> within one <code>queue group</code></p> <pre><code>    await broker.publish(\"\", \"test-subj-1\")  # handlers: 1 or 2\n</code></pre> <p>Message <code>2</code> will be sent similarly to message <code>1</code></p> <pre><code>    await broker.publish(\"\", \"test-subj-2\")  # handlers: 3\n</code></pre> <p>The message <code>3</code> will be sent to <code>handler3</code>, because he is the only one listening to <code>test-subj-2</code></p>"},{"location":"nats/3_examples/2_pattern/","title":"Pattern","text":"<p>Pattern Subject is a powerful NATS routing engine. This type of <code>subject</code> messages to consumers by the pattern specified when they connect to <code>subject</code> and a message key.</p>"},{"location":"nats/3_examples/2_pattern/#scaling","title":"Scaling","text":"<p>If one <code>subject</code> is listening by several consumers with the same <code>queue group</code>, the message will go to a random consumer each time.</p> <p>Thus, NATS can independently balance the load on queue consumers. You can increase the processing speed of the message flow from the queue by simply launching additional instances of the consumer service. You don't need to make changes to the current infrastructure configuration: NATS will take care of how to distribute messages between your services.</p>"},{"location":"nats/3_examples/2_pattern/#example","title":"Example","text":"<pre><code>from propan import PropanApp, NatsBroker\nfrom propan.annotations import Logger\n\nbroker = NatsBroker()\napp = PropanApp(broker)\n\n@broker.handle(\"*.info\", \"workers\")\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(\"*.info\", \"workers\")\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(\"*.error\", \"workers\")\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(\"\", \"logs.info\")  # handlers: 1 or 2\n    await broker.publish(\"\", \"logs.info\")  # handlers: 1 or 2\n    await broker.publish(\"\", \"logs.error\") # handlers: 3\n</code></pre>"},{"location":"nats/3_examples/2_pattern/#consumer-announcement","title":"Consumer Announcement","text":"<p>To begin with, we have announced several consumers for two <code>subjects</code>: <code>*.info</code> and <code>*.error</code>:</p> <pre><code>@broker.handle(\"*.info\", \"workers\")\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(\"*.info\", \"workers\")\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(\"*.error\", \"workers\")\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n</code></pre> <p>At the same time, in the <code>subject</code> of our consumers, we specify the pattern that will be processed by these consumers.</p> <p>Note</p> <p>Note that all consumers are subscribed using the same <code>queue_group</code>: within the same service, this does not make sense, since messages will come to these handlers in turn. Here we emulate the work of several consumers and load balancing between them.</p>"},{"location":"nats/3_examples/2_pattern/#message-distribution","title":"Message distribution","text":"<p>Now the distribution of messages between these consumers will look like this:</p> <pre><code>    await broker.publish(\"\", \"logs.info\")  # handlers: 1 or 2\n</code></pre> <p>The message <code>1</code> will be sent to <code>handler1</code> or <code>handler2</code>, because they listen to the same <code>subject</code> template within the same <code>queue group</code></p> <pre><code>    await broker.publish(\"\", \"logs.info\")  # handlers: 1 or 2\n</code></pre> <p>Message <code>2</code> will be sent similarly to message <code>1</code></p> <pre><code>    await broker.publish(\"\", \"logs.error\") # handlers: 3\n</code></pre> <p>The message <code>3</code> will be sent to <code>handler3</code>, because it is the only one listening to the pattern <code>*.error*</code></p>"},{"location":"rabbit/1_routing/","title":"Rabbit Routing","text":""},{"location":"rabbit/1_routing/#advantages","title":"Advantages","text":"<p>The advantage of RabbitMQ is the ability to configure flexible and complex message routing scenarios.</p> <p>RabbitMQ covers the whole range of routing: from one queue - one consumer, to a queue retrieved from several sources, and the prioritization of messages also works.</p> <p>Note</p> <p>For more information about RabbitMQ, please visit the official documentation</p> <p>At the same time, it supports the ability to successfully process messages, mark them as processed with an error, remove them from the queue (it is also impossible to receive more messages processed, unlike Kafka), lock it for the processing duration, and monitor its current status.</p> <p>Having to keep track of the current status of all messages is a cause of the RabbitMQ performance falling. With really large message volumes, RabbitMQ starts to degrade. However, if this was a \"one-time influx\", then as consumers will free it, the \"health\" of RabbitMQ will be restored.</p> <p>If your scenario is not based on processing millions of messages, and also requires building complex routing logic - RabbitMQ you will be right choice.</p>"},{"location":"rabbit/1_routing/#basic-concepts","title":"Basic concepts","text":"<p>If you want to totally understand how RabbitMQ works, you should visit their official website. Here you will find top-level comments about the basic concepts and usage examples.</p>"},{"location":"rabbit/1_routing/#entities","title":"Entities","text":"<p>RabbitMQ works with three main entities:</p> <ul> <li><code>Exchange</code> - the point of receiving messages from publisher</li> <li><code>Queue</code> - the point of pushing messages to consumer</li> <li><code>Binding</code> - the relationship between queue-exchange or exchange-exchange</li> </ul>"},{"location":"rabbit/1_routing/#routing-rules","title":"Routing rules","text":"<p>The rules for delivering messages to consumers depend on the type of exchange and binding parameters. All the main options will be discussed at examples.</p> <p>In general, the message path looks so:</p> <ol> <li>Publisher sends a message to <code>exchange</code>, specify its <code>routing_key</code> and headers according to which routing will take place</li> <li><code>exchange</code>, depending on the message parameters, determines which of the subscribed <code>bindings</code> to send the message to</li> <li><code>binding</code> delivers the message to <code>queue</code> or another <code>exchange</code> (in this case it will send it further by its own rules)</li> <li><code>queue</code>, after receiving a message, sends it to one of subscribed consumers (PUSH API)</li> </ol> <p>Tip</p> <p>By default, all queues have <code>binding</code> to <code>default exchange</code> (Direct type) with routing key corresponding to their name. In Propan, queues are connected to this <code>exchange</code> and messages are sent by default unless another <code>exchange</code> is explicitly specified.</p> <p>With connecting the queue to any other <code>exchange</code>, it still remains subscribed to the `default exchange'. Be careful with this.</p> <p>At this stage, the message gets into your application - and you start processing it.</p>"},{"location":"rabbit/1_routing/#message-statuses","title":"Message statuses","text":"<p>RabbitMQ requires confirmation of message processing: only after that it will be removed from a queue.</p> <p>Confirmation can be either positive (<code>Acknowledgment - ack</code>) if the message was successfully processed, or negative (<code>Negative Acknowledgment - nack</code>) if the message was processed with an error.</p> <p>At the same time, in case of an error, the message can also be extracted from the queue (<code>reject</code>), otherwise, after a negative confirmation, it will be requeued for processing again.</p> <p>In most cases, Propan performs all the necessary actions by itself: however, if you want to manage the message lifecycle directly, you can access the message object itself and call the appropriate methods directly. This can be useful if you want to implement an \"at most once\" policy and you need to confirm receipt of the message before it is actually processed.</p>"},{"location":"rabbit/1_routing/#propan-specific","title":"Propan specific","text":"<p>Propan omits the ability to create <code>bindings</code> directly, since in most cases you do not need to subscribe one queue to several <code>exchanges</code> or subscribe <code>exchanges</code> to each other. On the contrary, this practice leads to over-complication of the message routing scheme, which makes it difficult to maintain and further develop the entire infrastructure of services.</p> <p>Propan suggests you adhere to the scheme <code>exchange:queue</code> as <code>1:N</code>, which will greatly simplify the scheme of interaction between your services. It is better to create an additional queue for a new <code>exchange</code> than to subscribe to an existing one.</p> <p>However, if you want to reduce the number of entities in your RabbitMQ, and thereby optimize its performance (or you know exactly what you are doing), Propan leaves you the option to create <code>bindings</code> directly. In other cases, the connection parameters are an integral part of the entities RabbitQueue and RabbitExchange in Propan.</p>"},{"location":"rabbit/2_exchanges/","title":"EXCHANGES","text":"<p>To declare an <code>Exchange</code> with all parameters in <code>Propan</code>, a special class <code>propan.brokers.rabbit.RabbitExchange</code> is used.</p> <p>You can use it both when receiving messages and sending them:</p> <pre><code>from propan.brokers.rabbit import RabbitBroker, RabbitExchange\n\nbroker = RabbitBroker()\n\n@broker.handler(\"test\", exchange=RabbitExchange(\"test\"))\nasync def handler():\n      ...\n\n...\n      await broker.publish(\"Hi!\", \"test\", exchange=RabbitExchange(\"test\"))\n</code></pre> <p>The RabbitExchange constructor takes the following arguments:</p> <ul> <li><code>name</code>:str - exchange name</li> <li><code>type</code>: propan.brokers.rabbit.RabbitExchange = RabbitExchange.DIRECT - exchange routing type</li> <li><code>durable</code>: bool = False - if set to True, restore exchange at RabbitMQ restarted</li> <li><code>auto_delete</code>: bool = False - if set to True, exchange will be deleted if there are no queues listening to it</li> <li><code>passive</code>: bool = False<ul> <li>when set to <code>False</code>, Propan creates an exchange with the required parameters, or check the corresponding parameters of an already existing exchange with the same name.</li> <li>when set to <code>True</code>, Propan will not create an exchange, but only connect to an existing one. In this case, if the requested exchange does not exist, an error occurred</li> </ul> </li> <li><code>internal</code>: bool = False - create exchange object at runtime and don't notify RabbitMQ about exchange creation</li> <li><code>robust</code>: bool = True - recreate exchange when reconnecting to RabbitMQ</li> <li><code>timeout</code>: int | float - response timeout from RabbitMQ</li> <li><code>arguments</code>: dict[str, Any] | None = None - exchange custom arguments</li> </ul> <p>And arguments to bind current exchange to another one</p> <ul> <li><code>bind_to</code>: RabbitExchange | None = None - parent exchange to bind</li> <li><code>bind_arguments</code>: dict[str, Any] | None = None - arguments to header exchange routing</li> <li><code>routing_key</code>: str = \"\" - routing key for connecting to exchange</li> </ul>"},{"location":"rabbit/3_queues/","title":"QUEUES","text":"<p>To declare a <code>Queue</code> with all parameters in <code>Propan</code>, a special class <code>propan.brokers.rabbit.RabbitQueue</code> is used.</p> <p>You can use it both when receiving messages and sending them:</p> <pre><code>from propan.brokers.rabbit import RabbitBroker, RabbitQueue\n\nbroker = RabbitBroker()\n\n@broker.handler(RabbitQueue(\"test\"))\nasynchronous definition handler():\n      ...\n\n...\n      await broker.publish(\"Hi!\", RabbitQueue(\"test\"))\n</code></pre> <p>The <code>RabbitQueue</code> constructor takes the following arguments:</p> <ul> <li><code>name</code>: str - queue name</li> <li><code>durable</code>: bool = False - if set to True, restore queue at RabbitMQ restarted</li> <li><code>auto_delete</code>: bool = False - if set to True, delete queue with RabbitMQ disconnected</li> <li><code>exclusive</code>: bool = False - this queue can only be connected within the current connection. Such a queue will also be deleted when disconnected from RabbitMQ.</li> <li><code>passive</code>: bool = False<ul> <li>when set to <code>False</code>, Propan will attempt to create a queue with the required parameters, or check those parameters to match an already existing queue with the same name.</li> <li>when set to <code>True</code>, Propan will not create a queue, but only connect to an existing one. In this case, if the requested queue does not exist, an error will occur.</li> </ul> </li> <li><code>robust</code>: bool = True - recreate the queue when reconnecting to RabbitMQ</li> <li><code>timeout</code>: int | float - response timeout from RabbitMQ</li> <li><code>arguments</code>: dict[str, Any] | None = None - custom queue arguments</li> </ul> <p>The parameters for connecting the queue to exchange are also passed in its constructor:</p> <ul> <li><code>routing_key</code>: str - routing key for connecting to exchange. If not specified, the <code>name</code> argument is used</li> <li><code>bind_arguments</code>: dict[str, Any] | None = None - arguments to header exchange routing</li> </ul>"},{"location":"rabbit/4_publishing/","title":"Rabbit Publishing","text":"<p><code>RabbitBroker</code> also uses the unified <code>publish</code> method to send messages. However, in this case, an object of the <code>aio_pika.Message</code> class (if necessary) can act as a message (in addition to <code>str</code>, <code>bytes</code>, <code>dict</code>, <code>pydantic.BaseModel</code>).</p> <pre><code>import asyncio\nfrom propan import RabbitBroker\n\nasync def pub():\n    async with RabbitBroker() as broker:\n        await broker.publish(\"Hi!\", queue=\"test\", exchange=\"test\")\n\nasyncio.run(pub())\n</code></pre>"},{"location":"rabbit/4_publishing/#basic-arguments","title":"Basic arguments","text":"<p>The <code>publish</code> method takes the following arguments:</p> <ul> <li><code>message</code>: bytes | str | dict | Sequence[Any] | pydantic.BaseModel | aio_pika.Message = \"\" - message to send</li> <li><code>exchange</code>: str | RabbitExchange | None = None - the exchange where the message will be sent to. If not specified - default is used</li> <li><code>queue</code>: str | RabbitQueue = \"\" - the queue where the message will be sent (since most queues use their name as the routing key, this is a human-readable version of <code>routing_key</code>)</li> <li><code>routing_key</code>: str = \"\" - also a message routing key, if not specified, the <code>queue</code> argument is used</li> </ul>"},{"location":"rabbit/4_publishing/#message-parameters","title":"Message parameters","text":"<p>You can read more about all the flags in the RabbitMQ documentation</p> <ul> <li><code>headers</code>: dict[str, Any] | None = None - message headers (used by consumers)</li> <li><code>content_type</code>: str | None = None - the content_type of the message being sent. Propan sets it automatically in most cases (used by consumers)</li> <li><code>content_encoding</code>: str | None = None - encoding of the message (used by consumers)</li> <li><code>persist</code>: bool = False - restore messages on reboot RabbitMQ</li> <li><code>priority</code>: int | None = None - the priority of the message</li> <li><code>correlation_id</code>: str | None = None - message id, which helps to match the original message with the reply to it (Propan sets it automatically)</li> <li><code>reply_to</code>: str | None = None - the name of the queue where the response to the message should be sent (when using a blocking RPC, it is set automatically)</li> <li><code>message_id</code>: str | None = None - message ID (generated by RabbitMQ automatically)</li> <li><code>timestamp</code>: int | float | time delta | datetime | None - message sending time (set RabbitMQ automatically)</li> <li><code>expiration</code>: int | float | time delta | datetime | None - message lifetime (in seconds)</li> <li><code>type</code>: str | None = None - the type of message (used by consumers)</li> <li><code>user_id</code>: str | None - ID of the RabbitMQ user who sent the message</li> <li><code>app_id</code>: str | None - ID of the application that sent the message (used by consumers)</li> </ul>"},{"location":"rabbit/4_publishing/#send-flags","title":"Send flags","text":"<p>Arguments for sending a message:</p> <ul> <li><code>mandatory</code>: bool = True - the client is waiting for confirmation that the message will be placed in some queue (if there are no queues, return it to the sender)</li> <li><code>immediate</code>: bool = False - the client expects that there is a consumer ready to take the message to work \"right now\" (if there is no consumer, return it to the sender)</li> <li><code>timeout</code>: int | float | None = None - send confirmation time from RabbitMQ</li> </ul>"},{"location":"rabbit/4_publishing/#rpc-arguments","title":"RPC arguments","text":"<p>Also <code>publish</code> supports common arguments for making RPC requests:</p> <ul> <li><code>callback</code>: bool = False - whether to wait for a response to the message</li> <li><code>callback_timeout</code>: float | None = 30.0 - response waiting timeout. In case of <code>None</code> - waits indefinitely</li> <li><code>raise_timeout</code>: bool = False<ul> <li><code>False</code> - return None on timeout</li> <li><code>True</code> - <code>TimeoutError</code> error in case of timeout</li> </ul> </li> </ul>"},{"location":"rabbit/5_examples/1_direct/","title":"Direct Exchange","text":"<p>Direct Exchange is the basic way to route messages in RabbitMQ. Its core is very simple: <code>exchange</code> sends messages to those queues, <code>routing_key</code> which matches the <code>routing_key</code> of the message being sent.</p> <p>Note</p> <p>Default Exchange, to which all queues in RabbitMQ are subscribed, has the Direct type by default</p>"},{"location":"rabbit/5_examples/1_direct/#scaling","title":"Scaling","text":"<p>If several consumers are listening to the same queue, messages will go to the one of them (round-robin). This behavior is common for all types of <code>exchange</code>, because it refers to the queue itself. The type of <code>exchange</code> affects which queues the message gets into.</p> <p>Thus, RabbitMQ can independently balance the load on queue consumers. You can increase the processing speed of the message flow from the queue by launching additional instances of a consumer service. You don't need to make changes to the current infrastructure configuration: RabbitMQ will take care of how to distribute messages between your services.</p>"},{"location":"rabbit/5_examples/1_direct/#example","title":"Example","text":"<p>Direct Exchange is the type used in Propan by default: you can simply declare it as follows</p> <pre><code>@broker.handler(\"test_queue\", \"test_exchange\")\nasync def handler():\n...\n</code></pre> <p>The argument <code>auto_delete=True</code> in this and subsequent examples is used only to clear the state of RabbitMQ after example runs</p> <pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import Logger\nfrom propan.brokers.rabbit import RabbitExchange, RabbitQueue\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nexch = RabbitExchange(\"exchange\", auto_delete=True)\n\nqueue_1 = RabbitQueue(\"test-q-1\", auto_delete=True)\nqueue_2 = RabbitQueue(\"test-q-2\", auto_delete=True)\n\n@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 1\n    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 2\n    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 1\n    await broker.publish(queue=\"test-q-2\", exchange=exch)  # handlers: 3\n</code></pre>"},{"location":"rabbit/5_examples/1_direct/#consumer-announcement","title":"Consumer Announcement","text":"<p>To begin with, we announced our Direct exchange and several queues that will listen to it:</p> <pre><code>exch = RabbitExchange(\"exchange\", auto_delete=True)\n\nqueue_1 = RabbitQueue(\"test-q-1\", auto_delete=True)\nqueue_2 = RabbitQueue(\"test-q-2\", auto_delete=True)\n</code></pre> <p>Then we signed up several consumers using the advertised queues to the <code>exchange</code> we created</p> <pre><code>@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n</code></pre> <p>Note</p> <p><code>handler1</code> and <code>handler2</code> are subscribed to the same <code>exchange</code> using the same queue: within a single service, this does not make a sense, since messages will come to these handlers in turn. Here we emulate the work of several consumers and load balancing between them.</p>"},{"location":"rabbit/5_examples/1_direct/#message-distribution","title":"Message distribution","text":"<p>Now the distribution of messages between these consumers will look like this:</p> <pre><code>    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 1\n</code></pre> <p>Messages <code>1</code> will be sent to <code>handler1</code> because it listens to <code>exchange</code> using a queue with the routing key <code>test-q-1</code></p> <pre><code>    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 2\n</code></pre> <p>Messages <code>2</code> will be sent to <code>handler2</code> because it listens to <code>exchange</code> using the same queue, but <code>handler1</code> is busy</p> <pre><code>    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 1\n</code></pre> <p>Messages <code>3</code> will be sent to <code>handler1</code> again, because it is currently free</p> <pre><code>    await broker.publish(queue=\"test-q-2\", exchange=exch)  # handlers: 3\n</code></pre> <p>Messages <code>4</code> will be sent to <code>handler3</code>, because it is the only one listening to <code>exchange</code> using a queue with the routing key <code>test-q-2</code></p>"},{"location":"rabbit/5_examples/2_fanout/","title":"Fanout Exchange","text":"<p>Fanout Exchange is an even simpler, but slightly less popular way of routing in RabbitMQ. This type of <code>exchange</code> sends messages to all queues subscribed to it, ignoring any arguments of the message.</p> <p>At the same time, if the queue listens to several consumers, messages will also be distributed among them.</p>"},{"location":"rabbit/5_examples/2_fanout/#example","title":"Example","text":"<pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import Logger\nfrom propan.brokers.rabbit import RabbitExchange, RabbitQueue, ExchangeType\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nexch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.FANOUT)\n\nqueue_1 = RabbitQueue(\"test-q-1\", auto_delete=True)\nqueue_2 = RabbitQueue(\"test-q-2\", auto_delete=True)\n\n@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(exchange=exch)  # handlers: 1, 3\n    await broker.publish(exchange=exch)  # handlers: 2, 3\n    await broker.publish(exchange=exch)  # handlers: 1, 3\n    await broker.publish(exchange=exch)  # handlers: 2, 3\n</code></pre>"},{"location":"rabbit/5_examples/2_fanout/#consumer-announcement","title":"Consumer Announcement","text":"<p>To begin with, we announced our Fanout exchange and several queues that will listen to it:</p> <pre><code>exch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.FANOUT)\n\nqueue_1 = RabbitQueue(\"test-q-1\", auto_delete=True)\nqueue_2 = RabbitQueue(\"test-q-2\", auto_delete=True)\n</code></pre> <p>Then we signed up several consumers using the advertised queues to the <code>exchange</code> we created</p> <pre><code>@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n</code></pre> <p>Note</p> <p><code>handler1</code> and <code>handler2</code> are subscribed to the same <code>exchange</code> using the same queue: within a single service, this does not make a sense, since messages will come to these handlers in turn. Here we emulate the work of several consumers and load balancing between them.</p>"},{"location":"rabbit/5_examples/2_fanout/#message-distribution","title":"Message distribution","text":"<p>Now the distribution of messages between these consumers will look like this:</p> <pre><code>    await broker.publish(exchange=exch)  # handlers: 1, 3\n</code></pre> <p>Messages <code>1</code> will be sent to <code>handler1</code> and <code>handler3</code>, because they listen to <code>exchange</code> using different queues</p> <pre><code>    await broker.publish(exchange=exch)  # handlers: 2, 3\n</code></pre> <p>Messages <code>2</code> will be sent to <code>handler2</code> and <code>handler3</code>, because <code>handler2</code> listens to <code>exchange</code> using the same queue as <code>handler1</code></p> <pre><code>    await broker.publish(exchange=exch)  # handlers: 1, 3\n</code></pre> <p>Messages <code>3</code> will be sent to <code>handler1</code> and <code>handler3</code></p> <pre><code>    await broker.publish(exchange=exch)  # handlers: 2, 3\n</code></pre> <p>Messages <code>4</code> will be sent to <code>handler3</code> and <code>handler3</code></p> <p>Note</p> <p>When sending messages to Fanout exchange, it makes no sense to specify the arguments <code>queue</code> or <code>routing_key</code>, because they will be ignored</p>"},{"location":"rabbit/5_examples/3_topic/","title":"Topic Exchange","text":"<p>Topic Exchange is a powerful RabbitMQ routing tool. This type of <code>exchange</code> sends messages to the queue in accordance with the pattern specified when they are connected to <code>exchange</code> and the <code>routing_key</code> of the message itself.</p> <p>At the same time, if the queue listens to several consumers, messages will also be distributed among them.</p>"},{"location":"rabbit/5_examples/3_topic/#example","title":"Example","text":"<pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import Logger\nfrom propan.brokers.rabbit import RabbitExchange, RabbitQueue, ExchangeType\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nexch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.TOPIC)\n\nqueue_1 = RabbitQueue(\"test-queue-1\", auto_delete=True, routing_key=\"*.info\")\nqueue_2 = RabbitQueue(\"test-queue-2\", auto_delete=True, routing_key=\"*.debug\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 1\n    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 2\n    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 1\n    await broker.publish(routing_key=\"logs.debug\", exchange=exch) # handlers: 3\n</code></pre>"},{"location":"rabbit/5_examples/3_topic/#consumer-announcement","title":"Consumer Announcement","text":"<p>To begin with, we announced our Topic exchange and several queues that will listen to it:</p> <pre><code>exch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.TOPIC)\n\nqueue_1 = RabbitQueue(\"test-queue-1\", auto_delete=True, routing_key=\"*.info\")\nqueue_2 = RabbitQueue(\"test-queue-2\", auto_delete=True, routing_key=\"*.debug\")\n</code></pre> <p>At the same time, in the <code>routing_key</code> of our queues, we specify the pattern of routing keys that will be processed by this queue.</p> <p>Then we signed up several consumers using the advertised queues to the <code>exchange</code> we created</p> <pre><code>@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n</code></pre> <p>Note</p> <p><code>handler1</code> and <code>handler2</code> are subscribed to the same <code>exchange</code> using the same queue: within a single service, this does not make a sense, since messages will come to these handlers in turn. Here we emulate the work of several consumers and load balancing between them.</p>"},{"location":"rabbit/5_examples/3_topic/#message-distribution","title":"Message distribution","text":"<p>Now the distribution of messages between these consumers will look like this:</p> <pre><code>    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 1\n</code></pre> <p>Messages <code>1</code> will be sent to <code>handler1</code> because it listens to <code>exchange</code> using a queue with the routing key <code>*.info</code></p> <pre><code>    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 2\n</code></pre> <p>Messages <code>2</code> will be sent to <code>handler2</code> because it listens to <code>exchange</code> using the same queue, but <code>handler1</code> is busy</p> <pre><code>    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 1\n</code></pre> <p>Messages <code>3</code> will be sent to <code>handler1</code> again, because it is currently free</p> <pre><code>    await broker.publish(routing_key=\"logs.debug\", exchange=exch) # handlers: 3\n</code></pre> <p>Messages <code>4</code> will be sent to <code>handler3</code>, because it is the only one listening to <code>exchange</code> using a queue with the routing key <code>*.debug</code></p>"},{"location":"rabbit/5_examples/4_header/","title":"Header Exchange","text":"<p>Header Exchange is the most complex and flexible way to route messages in RabbitMQ. This <code>exchange</code> type sends messages to queues in according the matching of a queues binding arguments  with message headers.</p> <p>At the same time, if the queue listens to several consumers, messages will also be distributed among them.</p>"},{"location":"rabbit/5_examples/4_header/#example","title":"Example","text":"<pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import Logger\nfrom propan.brokers.rabbit import RabbitExchange, RabbitQueue, ExchangeType\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nexch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.HEADERS)\n\nqueue_1 = RabbitQueue(\n    \"test-queue-1\", auto_delete=True,\n    bind_arguments={ \"key\": 1 }\n)\nqueue_2 = RabbitQueue(\n    \"test-queue-2\", auto_delete=True,\n    bind_arguments={ \"key\": 2, \"key2\": 2, \"x-match\": \"any\" }\n)\nqueue_3 = RabbitQueue(\n    \"test-queue-3\", auto_delete=True,\n    bind_arguments={ \"key\": 2, \"key2\": 2, \"x-match\": \"all\" }\n)\n\n@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@broker.handle(queue_3, exch)\nasync def base_handler4(logger: Logger):\n    logger.info(\"base_handler4\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 1\n    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 2\n    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 1\n    await broker.publish(exchange=exch, headers={ \"key\": 2 })  # handlers: 3\n    await broker.publish(exchange=exch, headers={ \"key2\": 2 }) # handlers: 3\n    await broker.publish(exchange=exch, headers={ \"key\": 2,    # handlers: 3, 4\n                                                  \"key2\": 2 })\n</code></pre>"},{"location":"rabbit/5_examples/4_header/#consumer-announcement","title":"Consumer Announcement","text":"<p>To begin with, we announced our Fanout exchange and several queues that will listen to it:</p> <pre><code>exch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.HEADERS)\n\nqueue_1 = RabbitQueue(\n    \"test-queue-1\", auto_delete=True,\n    bind_arguments={ \"key\": 1 }\n)\nqueue_2 = RabbitQueue(\n    \"test-queue-2\", auto_delete=True,\n    bind_arguments={ \"key\": 2, \"key2\": 2, \"x-match\": \"any\" }\n)\nqueue_3 = RabbitQueue(\n    \"test-queue-3\", auto_delete=True,\n    bind_arguments={ \"key\": 2, \"key2\": 2, \"x-match\": \"all\" }\n)\n</code></pre> <p>The <code>x-match</code> argument indicates whether the arguments should match the message headers in whole or in part.</p> <p>Then we signed up several consumers using the advertised queues to the <code>exchange</code> we created</p> <pre><code>@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@broker.handle(queue_3, exch)\nasync def base_handler4(logger: Logger):\n    logger.info(\"base_handler4\")\n</code></pre> <p>Note</p> <p><code>handler1</code> and <code>handler2</code> are subscribed to the same <code>exchange</code> using the same queue: within a single service, this does not make a sense, since messages will come to these handlers in turn. Here we emulate the work of several consumers and load balancing between them.</p>"},{"location":"rabbit/5_examples/4_header/#message-distribution","title":"Message distribution","text":"<p>Now the distribution of messages between these consumers will look like this:</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 1\n</code></pre> <p>Messages <code>1</code> will be sent to <code>handler1</code>, because it listens to a queue whose <code>key</code> header matches the <code>key</code> header of the message</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 2\n</code></pre> <p>Messages <code>2</code> will be sent to <code>handler2</code> because it listens to <code>exchange</code> using the same queue, but <code>handler1</code> is busy</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 1\n</code></pre> <p>Messages <code>3</code> will be sent to <code>handler1</code> again, because it is currently free</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key\": 2 })  # handlers: 3\n</code></pre> <p>Messages <code>4</code> will be sent to <code>handler3</code>, because it listens to a queue whose <code>key</code> header coincided with the <code>key</code> header of the message</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key2\": 2 }) # handlers: 3\n</code></pre> <p>Messages <code>5</code> will be sent to <code>handler3</code>, because it listens to a queue whose header <code>key2</code> coincided with the header <code>key2</code> of the message</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key\": 2,    # handlers: 3, 4\n                                                  \"key2\": 2 })\n</code></pre> <p>Messages <code>6</code> will be sent to <code>handler3</code> and <code>handler4</code>, because the message headers completely match the queue keys</p> <p>Note</p> <p>When sending messages to Header exchange, it makes no sense to specify the arguments <code>queue</code> or <code>routing_key</code>, because they will be ignored</p> <p>Warning</p> <p>For incredibly complex routes, you can use the option to bind an <code>exchange</code> to another <code>exchange</code>. In this case, all the same rules apply as for queues subscribed to <code>exchange</code>. The only difference is that the signed <code>exchange</code> can further distribute messages according to its own rules.</p> <p>So, for example, you can combine Topic and Header exchange types.</p>"},{"location":"redis/1_redis-index/","title":"Redis Pub/Sub","text":""},{"location":"redis/1_redis-index/#advantages-and-disadvantages","title":"Advantages and disadvantages","text":"<p>Most likely, your project already uses Redis. If you want to use asynchronous messaging, but do not want to include a new heavy dependency (Kafka, RabbitMQ, Nats, etc.) to your infrastructure, you should use it as a message broker.</p> <p>Redis works fast, does not degrade with a large number of messages, and most importantly - you already have it!</p> <p>Note</p> <p>More information about Redis Pub/Sub can be found at official website</p> <p>However, Redis as a message broker has some important disadvantages:</p> <ul> <li>Messages are not persistent. If the message is published while your consumer is disconnected, it will be lost.</li> <li>There is no possibility of horizontal scaling of consumers.</li> <li>There are no complex routing mechanisms.</li> <li>There are no mechanisms for confirming receipt and processing of messages from the consumer.</li> <li>Messages are represented by raw bytes without meta-information.</li> </ul> <p>Not all of these features are necessary for your project, but you should keep them in mind when choosing Redis as a message broker.</p> <p>In any case, since the Propan application code is weakly dependent on the message broker used, you can build a prototype of your system based on Redis and if necessary quickly adapt it to use another broker.</p> <p>Also, Redis 5.0+ contains the Streams mechanism, which can also serve as a message broker and covers the main disadvantages of Redis Pub/Sub: message persistence and consumer scaling.</p>"},{"location":"redis/1_redis-index/#routing-rules","title":"Routing rules","text":"<p>Redis cannot configure complex routing rules. The only entity in Redis Pub/Sub is <code>channel</code>, which can be subscribed to either directly by name or by regular expression pattern.</p> <p>Both examples are described a little further.</p>"},{"location":"redis/1_redis-index/#features-propan","title":"Features Propan","text":"<p>Since Redis uses just a set of bytes without headers and other meta information as a message, Propan uses encoded json with the following structure as a message:</p> <pre><code>{\n\"data\": \"\",\n\"headers\": {},\n\"reply_to\": \"\"\n}\n</code></pre> <p>This is necessary for the correct recognition of the content-type of the incoming message (necessary for valid decoding) and support for RPC requests.</p> <p>If Propan receives a message sent using another library or framework (or just a message in a different format), the entire body of this message will be perceived as the <code>data</code> field of the received message, and the <code>content-type</code> will be recognized automatically.</p> <p>At the same time, RPC requests will not work, since there is no <code>reply_to</code> field in the incoming message.</p>"},{"location":"redis/2_publishing/","title":"Redis Publishing","text":"<p>To send messages, <code>RedisBroker</code> also uses the unified <code>publish</code> method.</p> <pre><code>import asyncio\nfrom propan import RedisBroker\n\nasync def pub():\n    async with RedisBroker() as broker:\n        await broker.publish(\"Hi!\", channel=\"test\")\n\nasyncio.run(pub())\n</code></pre>"},{"location":"redis/2_publishing/#basic-arguments","title":"Basic arguments","text":"<p>The <code>publish</code> method accepts the following arguments:</p> <ul> <li><code>message</code>: bytes | str | dict | Sequence[Any] | pydantic.BaseModel - message to send</li> <li><code>channel</code>: str = \"\" - channel to which the message will be sent.</li> </ul>"},{"location":"redis/2_publishing/#message-parameters","title":"Message Parameters","text":"<p>Redis by default sends a message in the form of raw <code>bytes'. So **Propan** uses its own message transmission format: when calling the</code>publish` method, json is sent to Redis with the following fields:</p> <pre><code>{\n    \"data\": \"\",\n    \"headers\": {},\n    \"reply_to\": \"\"\n}\n</code></pre> <p>Independently, you can set and use the headers of the sent message within your application (the <code>content-type</code> is automatically set there, according to which Propan determines how to decode the received message)</p> <ul> <li><code>headers</code>: dict[str, Any] | None = None - headers of the message being sent (used by consumers)</li> </ul> <p>If Propan receives a message sent using another library or framework (or just a message in a different format), the entire body of this message will be perceived as the <code>data</code> field of the received message, and the <code>content-type</code> will be recognized automatically.</p> <p>At the same time, RPC requests will not work, since there is no <code>reply_to</code> field in the incoming message.</p>"},{"location":"redis/2_publishing/#rpc-arguments","title":"RPC arguments","text":"<p>Also <code>publish</code> supports common arguments for making RPC requests:</p> <ul> <li><code>reply_to</code>: str = \"\" - which channel to send the response to (used for asynchronous RPC requests)</li> <li><code>callback</code>: bool = False - whether to expect a response to the message</li> <li><code>callback_timeout</code>: float | None = 30.0 - timeout waiting for a response. In the case of <code>None</code> - waits indefinitely</li> <li><code>raise_timeout</code>: bool = False<ul> <li><code>False</code> - return None in case of timeout</li> <li><code>True</code> - error <code>TimeoutError</code> in case of timeout</li> </ul> </li> </ul>"},{"location":"redis/3_examples/1_direct/","title":"Direct","text":"<p>Direct Channel is the basic way to route messages in Redis. Its core is very simple: <code>channel</code> sends messages to all consumers subscribed to it.</p>"},{"location":"redis/3_examples/1_direct/#scaling","title":"Scaling","text":"<p>If one channel is listening by several consumers, the message will be received by all consumers of this channel. Thus, horizontal scaling by increasing the number of consumer services is not possible only using Redis Pub/Sub.</p> <p>If you need similar functionality, look for Redis Streams or other brokers (for example, Nats or RabbitMQ).</p>"},{"location":"redis/3_examples/1_direct/#example","title":"Example","text":"<p>Direct Channel is the default type used in Propan: you can simply declare it as follows</p> <pre><code>@broker.handler(\"test_channel\")\nasync def handler():\n    ...\n</code></pre> <p>Full example:</p> <pre><code>from propan import PropanApp, RedisBroker\nfrom propan.annotations import Logger\n\nbroker = RedisBroker()\napp = PropanApp(broker)\n\n\n@broker.handle(\"test\")\nasync def handler1(logger: Logger):\n    logger.info(\"handler1\")\n\n\n@broker.handle(\"test\")\nasync def handler2(logger: Logger):\n    logger.info(\"handler2\")\n\n\n@broker.handle(\"test2\")\nasync def handler3(logger: Logger):\n    logger.info(\"handler3\")\n\n\n@app.after_startup\nasync def publish_smth():\n    await broker.publish(\"\", \"test\")  # handlers: 1, 2\n    await broker.publish(\"\", \"test2\") # handlers: 3\n</code></pre>"},{"location":"redis/3_examples/1_direct/#consumer-announcement","title":"Consumer Announcement","text":"<p>To begin with, we have announced several consumers for the two channels <code>test</code> and <code>test2</code>:</p> <pre><code>@broker.handle(\"test\")\nasync def handler1(logger: Logger):\n    logger.info(\"handler1\")\n\n\n@broker.handle(\"test\")\nasync def handler2(logger: Logger):\n    logger.info(\"handler2\")\n\n\n@broker.handle(\"test2\")\nasync def handler3(logger: Logger):\n    logger.info(\"handler3\")\n</code></pre> <p>Note</p> <p>Note that <code>handler1</code> and <code>handler2</code> are subscribed to the same <code>channel</code>: both of these handlers will receive messages.</p>"},{"location":"redis/3_examples/1_direct/#message-distribution","title":"Message distribution","text":"<p>Now the distribution of messages between these consumers will look like this:</p> <pre><code>    await broker.publish(\"\", \"test\")  # handlers: 1, 2\n</code></pre> <p>The message <code>1</code> will be sent to <code>handler1</code> and <code>handler2</code> because they are listening to <code>channel</code> with the name <code>test</code></p> <pre><code>    await broker.publish(\"\", \"test2\") # handlers: 3\n</code></pre> <p>The message <code>2</code> will be sent to <code>handler3</code> because it listens to <code>channel</code> with the name <code>test2</code></p>"},{"location":"redis/3_examples/2_pattern/","title":"Pattern","text":"<p>Pattern Channel is a powerful Redis routing engine. This type of <code>channel</code> sends messages to consumers by the pattern specified when they connect to the <code>channel</code> and a message key.</p>"},{"location":"redis/3_examples/2_pattern/#scaling","title":"Scaling","text":"<p>If the message key matches the pattern of several consumers, it will be sent to all them. Thus, horizontal scaling by increasing the number of consumer services is not possible only using Redis Pub/Sub.</p> <p>If you need similar functionality, look towards Redis Streams or other brokers (for example, Nats or RabbitMQ).</p>"},{"location":"redis/3_examples/2_pattern/#example","title":"Example","text":"<pre><code>from propan import PropanApp, RedisBroker\nfrom propan.annotations import Logger\n\nbroker = RedisBroker()\napp = PropanApp(broker)\n\n\n@broker.handle(\"*.info\", pattern=True)\nasync def handler1(b: str, logger: Logger):\n    logger.info(\"handler1\")\n\n\n@broker.handle(\"*.info\", pattern=True)\nasync def handler2(b: str, logger: Logger):\n    logger.info(\"handler2\")\n\n\n@broker.handle(\"*.error\", pattern=True)\nasync def handler3(logger: Logger):\n    logger.info(\"handler3\")\n\n\n@app.after_startup\nasync def publish_smth():\n    await broker.publish(\"\", \"logs.info\")  # handlers: 1, 2\n    await broker.publish(\"\", \"logs.error\") # handlers: 3\n</code></pre>"},{"location":"redis/3_examples/2_pattern/#consumer-announcement","title":"Consumer Announcement","text":"<p>To begin with, we have announced several consumers for two channels <code>*.info*</code> and <code>*.error</code>:</p> <pre><code>@broker.handle(\"*.info\", pattern=True)\nasync def handler1(b: str, logger: Logger):\n    logger.info(\"handler1\")\n\n\n@broker.handle(\"*.info\", pattern=True)\nasync def handler2(b: str, logger: Logger):\n    logger.info(\"handler2\")\n\n\n@broker.handle(\"*.error\", pattern=True)\nasync def handler3(logger: Logger):\n    logger.info(\"handler3\")\n</code></pre> <p>Note</p> <p>Note that <code>handler1</code> and <code>handler2</code> are subscribed to the same <code>channel</code>: both of these handlers will receive messages.</p>"},{"location":"redis/3_examples/2_pattern/#message-distribution","title":"Message distribution","text":"<p>Now the distribution of messages between these consumers will look like this:</p> <pre><code>    await broker.publish(\"\", \"logs.info\")  # handlers: 1, 2\n</code></pre> <p>The message <code>1</code> will be sent to <code>handler1</code> and <code>handler2</code> because they are listening to <code>channel</code> with the pattern <code>*.info*</code></p> <pre><code>    await broker.publish(\"\", \"logs.error\") # handlers: 3\n</code></pre> <p>The message <code>2</code> will be sent to <code>handler3</code> because it listens to <code>channel</code> with the pattern <code>*.error</code></p>"},{"location":"sqs/1_sqs-index/","title":"SQS","text":""},{"location":"sqs/1_sqs-index/#in-progress","title":"In progress","text":"<p>Warning</p> <p>Sorry, the current page still under development, but should be here a little bit later. Hoping see you soon...</p>"},{"location":"ru/#propan","title":"Propan","text":"<p>Propan - \u044d\u0442\u043e \u0435\u0449\u0435 \u043e\u0434\u0438\u043d HTTP \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 Python MQ \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a. \u041e\u043d \u0438\u0434\u0435\u0442 \u043f\u043e \u0441\u0442\u043e\u043f\u0430\u043c FastAPI \u0438 Kombu, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0432\u0441\u0435 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e \u044d\u0442\u043e\u0433\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043c\u0438\u0440\u0435 HTTP \u0444\u0440\u0435\u043c\u0432\u043e\u0440\u043a\u043e\u0432, \u043e\u0434\u043d\u0430\u043a\u043e, \u0441\u043e\u0437\u0434\u0430\u043d \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430\u043c\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 AMQP, MQTT \u0438 \u0434\u0440. \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u0432.</p> <p>\u041e\u043d \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b Messaging.</p> <p>\u042d\u0442\u043e \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439, \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 python \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u043c\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430\u043c\u0438, \u0430 \u0432 \u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0435 \u043b\u0435\u0436\u0438\u0442 pydantic, \u0438\u0434\u0435\u0438 FastAPI and pytest.</p>"},{"location":"ru/#_1","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430: \u0441\u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0434\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u0418\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c: \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 IDE, \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u0436\u0435 \u0432 vim`\u0435.</li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438: \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430 \u0441\u0447\u0435\u0442 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u043e\u0432. \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 \u0432\u043e \u0432\u0441\u0435\u043c \u0441\u0442\u0435\u043a\u0435 \u0432\u044b\u0437\u043e\u0432\u0430.</li> <li>\u0418\u043d\u0442e\u0433\u0440\u0430\u0446\u0438\u044f: Propan \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c \u0441 \u043b\u044e\u0431\u044b\u043c\u0438 HTTP \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c\u0438</li> <li>\u041d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432: \u0415\u0434\u0438\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432:<ul> <li>Redis (\u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 redis-py)</li> <li>RabbitMQ (\u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 aio-pika)</li> <li>Kafka (\u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 aiokafka)</li> <li>SQS (\u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 aiobotocore)</li> <li>Nats (\u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 nats-py)</li> </ul> </li> <li>RPC: \u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 RPC \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e\u0432\u0435\u0440\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u0445 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.</li> <li>\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438: \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 CLI \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u043e\u043f\u044b\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438:<ul> <li>\u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0439 \u0441 \u043b\u044e\u0431\u044b\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c \u0441\u043f\u043e\u0441\u043e\u0431 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> <li>hot reloading \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445 \u0432 \u043a\u043e\u0434\u0435</li> <li>\u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> </ul> </li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f: Propan \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u0443\u044e AsyncAPI \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> <li>\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c: Propan \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439: \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0442\u044c \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e!</li> </ul>"},{"location":"ru/#_2","title":"\u0414\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c","text":"<p>\u0414\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0438\u0441\u043d\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043d\u0430\u043c \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0447\u0442\u043e \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0438\u043c\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043d\u0430\u0441 \u043f\u0438\u0441\u0430\u0442\u044c \u0447\u0442\u043e \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c.</p> <p>\u041a \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0438\u043c\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c \u043e\u0442\u043d\u043e\u0441\u044f\u0442\u0441\u044f aio-pika, pika, redis-py, nats-py, aiokafka \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435.</p> <p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u044d\u0442\u043e Quickstart \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 aio-pika:</p> <pre><code>import asyncio\nimport aio_pika\n\nasync def main():\n    connection = await aio_pika.connect_robust(\n        \"amqp://guest:guest@127.0.0.1/\"\n    )\n\n    queue_name = \"test_queue\"\n\n    async with connection:\n        channel = await connection.channel()\n\n        queue = await channel.declare_queue(queue_name)\n\n        async with queue.iterator() as queue_iter:\n            async for message in queue_iter:\n                async with message.process():\n                    print(message.body)\n\nasyncio.run(main())\n</code></pre> <p>aio-pika - \u044d\u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0441 \u043b\u0435\u0433\u043a\u043e\u0439 \u043a\u0440\u0438\u0432\u043e\u0439 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u041d\u043e \u043e\u043d \u0432\u0441\u0435 \u0435\u0449\u0435 \u0438\u043c\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439. \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0430\u043c\u043e\u043c\u0443 \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0442\u044c \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c connect, channel, queue \u0438 exchange. \u0422\u0430\u043a\u0436\u0435, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0432\u0430\u0448\u0435\u0433\u043e connection, message, queue \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439.</p> <p>\u042d\u0442\u043e \u043d\u0435 \u043f\u043b\u043e\u0445\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043e\u0434\u0430, \u043d\u043e \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0449\u0435.</p> <pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\napp = PropanApp(broker)\n\n@broker.handle(\"test_queue\")\nasync def base_handler(body):\n    print(body)\n</code></pre> <p>\u042d\u0442\u043e \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u043e\u0442 \u0436\u0435 \u043a\u043e\u0434 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Propan. \u0420\u0430\u0437\u0432\u0435 \u044d\u0442\u043e \u043d\u0435 \u043f\u0440\u043e\u0449\u0435?</p>"},{"location":"ru/#_3","title":"\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432","text":"<p>Propan \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>pydantic</code> \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0438\u0438 \u0441 \u0438\u0445 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439.</p> <pre><code>from pydantic import BaseModel\n\n...\n\nclass SimpleMessage(BaseModel):\n    key: int\n\n@broker.handle(\"test2\")\nasync def second_handler(body: SimpleMessage):\n    assert isinstance(body.key, int)\n</code></pre>"},{"location":"ru/#_4","title":"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438","text":"<p>Propan \u0438\u043c\u0435\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438, \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0438\u0437\u043a\u0443\u044e \u043a <code>pytest fixtures</code> \u0438 <code>FastAPI Depends</code> \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u0412\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u044e\u0442, \u043a\u0430\u043a\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0443\u0436\u043d\u044b, \u0430 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 - \u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u044d\u0442\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0437 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.</p> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438: app, broker, context, logger \u0438 message. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0441\u0432\u043e\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438. \u041f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c, \u0432\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 None.</p> <p>\u0422\u0430\u043a\u0436\u0435, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0442\u0440\u044e\u043a\u0438.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0431\u0443\u0434\u0435\u0442 \u0447\u0443\u0442\u044c \u0434\u0430\u043b\u044c\u0448\u0435.</p> <pre><code>from logging import Logger\nfrom propan import Context, Depends\n\n...\n\nasync def base_dep(user_id: int) -&gt; bool:\n    return True\n\n@broker.handle(\"test\")\nasync def base_handler(user_id: int,\n                       dep: bool = Depends(base_dep),\n                       logger: Logger = Context()):\n    assert dep is True\n    logger.info(body)\n</code></pre>"},{"location":"ru/#_5","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u041f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>Propan \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0438\u0438 \u0441\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 AsyncAPI. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u0430\u043a \u0441\u043e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u0430\u043c\u0438, \u0442\u0430\u043a \u0438 \u0440\u0430\u0437\u043c\u0435\u0441\u0442\u0438\u0442\u044c Web-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435 \u043d\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u0445, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u043c\u0435\u0436\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434.</p> <p>\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0442\u0430\u043a\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432: \u0432\u044b \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u0438\u0442\u0435, \u0441 \u043a\u0430\u043a\u0438\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u0438 \u043a\u0430\u043a\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0410 \u0441\u0430\u043c\u043e\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0435, \u044d\u0442\u043e \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0432\u0430\u043c \u043d\u0438\u0447\u0435\u0433\u043e - Propan \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043b \u0432\u0441\u0435 \u0437\u0430 \u0432\u0430\u0441!</p> <p></p>"},{"location":"ru/#http","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 HTTP \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c\u0438","text":""},{"location":"ru/#_6","title":"\u0421 \u043b\u044e\u0431\u044b\u043c\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c\u0438","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0440\u043e\u043a\u0435\u0440\u044b Propan \u0431\u0435\u0437 \u0441\u0430\u043c\u043e\u0433\u043e Propan \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0435\u0433\u043e \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0432\u0430\u0448\u0438\u043c HTTP \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import RedisBroker\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = RedisBroker(\"redis://localhost:6379\")\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n</code></pre> <pre><code>from propan import RabbitBroker\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n</code></pre> <pre><code>from propan import KafkaBroker\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = KafkaBroker(\"localhost:9092\")\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n</code></pre> <pre><code>from propan import SQSBroker\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = SQSBroker(\"http://localhost:9324\", ...)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n</code></pre> <pre><code>from propan import NatsBroker\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = NatsBroker(\"nats://localhost:4222\")\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n</code></pre>"},{"location":"ru/#fastapi","title":"\u0421 FastAPI","text":"<p>\u0422\u0430\u043a\u0436\u0435, Propan \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u044c FastAPI.</p> <p>\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043d\u0443\u0436\u043d\u044b\u0439 \u0432\u0430\u043c PropanRouter \u0438 \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 <code>@event</code>. \u042d\u0442\u043e\u0442 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u0435\u043d \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0443 <code>@handle</code> \u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u044e\u0449\u0438\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432.</p> <p>Tip</p> <p>\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c Propan \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 FastAPI. \u0422.\u0435. \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>Depends</code>, <code>BackgroundTasks</code> \u0438 \u043f\u0440\u043e\u0447\u0438\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b FastAPI \u0442\u0430\u043a, \u0435\u0441\u043b\u0438 \u0431\u044b \u044d\u0442\u043e \u0431\u044b\u043b \u043e\u0431\u044b\u0447\u043d\u044b\u0439 HTTP-endpoint.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import RedisRouter\n\nrouter = RedisRouter(\"redis://localhost:6379\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, world!\"}\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, world!\"}\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import KafkaRouter\n\nrouter = KafkaRouter(\"localhost:9092\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, world!\"}\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import SQSRouter\n\nrouter = SQSRouter(\"http://localhost:9324\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, world!\"}\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import NatsRouter\n\nrouter = NatsRouter(\"nats://localhost:4222\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, world!\"}\n\napp.include_router(router)\n</code></pre> <p>Note</p> <p>\u0411\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c\u0438 \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0437\u0434\u0435\u0441\u044c</p>"},{"location":"ru/#_7","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u044b","text":"<p>\u041d\u0443\u0436\u043d\u0430 \u0432\u0430\u0448\u0430 \u043f\u043e\u043c\u043e\u0449\u044c</p> <p>\u0424\u0440\u0435\u0439\u043c\u043e\u0432\u043e\u0440\u043a \u0441\u0435\u0439\u0447\u0430\u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0435\u0442\u0441\u044f. \u0423 \u043d\u0430\u0441 \u043e\u0447\u0435\u043d\u044c \u0434\u043b\u0438\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0435\u0449\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u044b - \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0433\u043e \u0447\u0430\u0441\u0442\u044c. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043b\u0438 \u043f\u043e\u043c\u043e\u0447\u044c \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c - \u0437\u0430\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u0441\u044e\u0434\u0430</p> async sync RabbitMQ stable  WIP  Redis stable  planning  Nats stable  planning  Kafka beta  planning  SQS beta  planning  NatsJS beta  planning  ZeroMQ  WIP   planning  MQTT  planning   planning  Redis Streams  planning   planning  Pulsar  planning   planning  ActiveMQ  planning   planning  AzureSB  planning   planning"},{"location":"ru/CHANGELOG/#2023-07-03-0150-nastjs","title":"2023-07-03 0.1.5.0 NastJS","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e\u043b\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 NATS JetStream - \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u044f NATS.</p> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u044d\u0442\u0438\u043c \u0432\u0435\u043b\u0438\u043a\u043e\u043b\u0435\u043f\u043d\u044b\u043c \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c, \u043d\u0435 \u0431\u043e\u044f\u0441\u044c \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 <code>key-value</code> \u0438 <code>object</code> \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.</p> <p>\u0422\u0430\u043a\u0436\u0435, \u0432 \u044d\u0442\u043e\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0431\u044b\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u044b \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u0430 \u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432.</p>"},{"location":"ru/CHANGELOG/#2023-06-26-0140-pydanticv2","title":"2023-06-26 0.1.4.0 PydanticV2","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u044d\u0442\u043e\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0431\u0435\u0442\u0430-\u0432\u0435\u0440\u0441\u0438\u0438 PydanticV2.</p> <p>\u0422\u0430\u043a\u0436\u0435, \u044d\u0442\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438 \u0441 PydanticV1, \u043f\u043e\u044d\u0442\u043e\u043c\u0443, \u0435\u0441\u043b\u0438 \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e Pydantic, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043a\u0430\u0442\u0438\u0442\u044c \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e - Propan \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.</p> <p>\u0411\u0443\u0434\u044c\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b: \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Propan \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 FastAPI \u043f\u0440\u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 PydanticV2 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u044e <code>fastapi&gt;=0.100.0b1</code>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u0430 \u0441 \u043e\u0431\u043e\u0438\u043c\u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 Pydantic. \u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u043d\u0430 \u0432\u0435\u0440\u0441\u0438\u044f\u0445 FastAPI <code>0.9*</code>, \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0440\u0435\u043b\u0438\u0437 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c \u0438 \u0441 \u043d\u0438\u043c\u0438 (\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c PydanticV1).</p> <p>\u0412\u0441\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0432\u0430\u0440\u0438\u0430\u0446\u0438\u044f\u043c\u0438 \u0432\u044b\u0448\u0435\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u043d\u0430 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u044f\u0445 Python.</p> <p>\u0414\u0440\u0443\u0433\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f:</p> <p>\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u0430 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0441 FastAPI:</p> <ul> <li>PropanRouter \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f     <pre><code>from propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(dependencies=[...])\n@router.event(\"test\", dependencies=[...])\nasync def handler(a: str, b: int):\n    ...\n</code></pre></li> <li>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c <code>router.event</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>build_message</code> \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e     <pre><code>import pytest, pydantic\nfrom propan.fastapi import RabbitRouter\nfrom propan.test.rabbit import build_message\n\nrouter = RabbitRouter()\n\n@router.event(\"test\")\nasync def handler(a: str, b: int):\n    ...\n\nwith pytest.raises(pydantic.ValidationError):\n    handler(build_message(\"Hello\", \"test\"), reraise_exc=True)\n</code></pre></li> </ul> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d BrokerRouter \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u043c\u043e\u0434\u0443\u043b\u0438.</p> <pre><code>from propan import RabbitBroker, RabbitRouter\n\nrouter = RabbitRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n    ...\n\nbroker = RabbitBroker()\nbroker.include_router(router)\n</code></pre> <p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0440\u0430\u0437\u0434\u0435\u043b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u043e \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 Protobuf).</p> <p>\u0410 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d \u0440\u044f\u0434 \u043d\u0435\u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0431\u0430\u0433\u043e\u0432, \u0443\u0434\u0430\u043b\u0435\u043d\u044b RabbitBroker deprecated \u043c\u0435\u0442\u043e\u0434\u044b, \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u0440\u0435\u0434\u043a\u0438\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432.</p>"},{"location":"ru/CHANGELOG/#2023-06-14-0130-asyncapi","title":"2023-06-14 0.1.3.0 AsyncAPI","text":"<p>\u0422\u0435\u043a\u0443\u0449\u0435\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b, \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u044f \u0443\u0441\u0435\u0440\u0434\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u043b \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446: \u0442\u0435\u043f\u0435\u0440\u044c Propan \u043c\u043e\u0436\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0445\u043e\u0441\u0442\u0438\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 AsyncAPI.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u043c\u0435\u0436\u043d\u044b\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0432\u0430\u0448\u0435\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439, \u0433\u0434\u0435 \u043e\u043d\u0438 \u0441\u043c\u043e\u0433\u0443\u0442 \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u044b\u0445 \u0432\u0430\u0448\u0438\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c.</p> <p></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0441 \u044d\u0442\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043e\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u044e\u0449\u0435\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.</p> <p>\u0422\u0430\u043a\u0436\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0443\u0440\u043e\u0432\u043d\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439:</p> <pre><code>from propan import RabbitBroker, Depends\n\nbroker = RabbitBroker(dependencies=[Depends(...)])\n\n@broker.handler(..., dependencies=[Depends(...)])\nasync def handler():\n    ...\n</code></pre>"},{"location":"ru/CHANGELOG/#2023-06-13-01217","title":"2023-06-13 0.1.2.17","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u043e\u0431\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0441\u0442\u043e\u0438\u0442 \u043e\u0431\u043e\u0431\u0449\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0439, \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0440\u0435\u043b\u0438\u0437\u0430.</p> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 - Propan \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043e\u0431\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u0430\u0441 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0432\u0438\u0434\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430. \u0412\u0430\u0448\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0442\u044c \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0441 pydantic.BaseModel.</p> <pre><code>@router.handle(...)\nasync def handler(a: int, b: float):\n...\nasync def handler(a: Message, b: float, c: str):\n</code></pre> <p>\u0412 RabbitBroker \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 RabbitMQ:</p> <pre><code>broker = RabbitBroker()\n...\n   await broker.declare_exchange(RabbitExchange(\"test\"))\n   await broker.declare_queue(RabbitQueue(\"test\"))\n   channel: aio_pika.RobustChannel = broker.channel\n</code></pre> <p>\u0414\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432\u043e \u0432\u0441\u0435 FastAPI PropanRouters \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>after_startup</code> \u0445\u0443\u043a.</p> <pre><code>router = RabbitRouter()\n\n@router.after_startup\nasync def init_whatever(app: FastAPI): ...\n</code></pre> <p>\u041a\u0440\u043e\u043c\u0435 \u044d\u0442\u043e\u0433\u043e, \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 <code>__init__</code> \u0438 <code>connect</code> \u0443 \u0432\u0441\u0435\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 (\u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b <code>connect</code> \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b <code>__init__</code> \u043f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a \u0431\u0440\u043e\u043a\u0435\u0440\u0443), \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u043c\u0443 \u0434\u043b\u044f \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0443, \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u044b \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u043b\u043a\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"ru/CHANGELOG/#2023-05-28-0123-sqs-beta","title":"2023-05-28 0.1.2.3 SQS Beta","text":"<p>\u0412 Propan \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 SQS \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d.</p> <p>SQSBroker \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442:</p> <ul> <li>\u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439</li> <li>\u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 ElasticMQ \u0438\u043b\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u043e\u0431\u043b\u0430\u0447\u043d\u043e\u043c\u0443 SQS</li> <li>FastAPI \u043f\u043b\u0430\u0433\u0438\u043d</li> </ul> <p>KafkaBroker \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 RPC \u0437\u0430\u043f\u0440\u043e\u0441\u044b.</p> <p>\u0422\u0430\u043a\u0436\u0435 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0440\u0435\u043b\u0438\u0437 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f:</p> <ul> <li>\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 Kafka</li> <li>\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 Nats</li> <li>Redis \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u044f\u0432\u043d\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c</li> </ul>"},{"location":"ru/CHANGELOG/#2023-05-26-0122-nats-stable","title":"2023-05-26 0.1.2.2 NATS Stable","text":"<p><code>NatsBroker</code> \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d.</p> <p>\u0422\u0430\u043a\u0436\u0435 \u0434\u043b\u044f Nats \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b:</p> <ul> <li>\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 RPC</li> <li><code>NatsRouter</code> \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441 FastAPI</li> </ul>"},{"location":"ru/CHANGELOG/#2023-05-23-0120-kafka","title":"2023-05-23 0.1.2.0 Kafka","text":"<p>\u0412 Propan \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 Kafka \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d.</p> <p>KafkaBroker \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442:</p> <ul> <li>\u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439</li> <li>\u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 Kafka</li> <li>\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u0430 FastAPI</li> </ul> <p>KafkaBroker \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 RPC \u0437\u0430\u043f\u0440\u043e\u0441\u044b.</p>"},{"location":"ru/CHANGELOG/#2023-05-18-0110-redis","title":"2023-05-18 0.1.1.0 REDIS","text":"<p>\u0412 Propan \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 Redis Pub/Sub \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0438 \u043e\u043f\u0438\u0441\u0430\u043d \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.</p> <p>RedisBroker \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442:</p> <ul> <li>\u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e \u043a\u043b\u044e\u0447\u0443 \u0438\u043b\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443</li> <li>\u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 Redis</li> <li>RPC \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e\u0432\u0435\u0440\u0445 Redis Pub/Sub</li> <li>\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u0430 FastAPI</li> </ul> <p>\u0422\u0430\u043a\u0436\u0435, Propan CLI \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430\u043c\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439</p> <pre><code>propan create async [broker] [APPNAME]\n</code></pre>"},{"location":"ru/CHANGELOG/#2023-05-15-0100-stable","title":"2023-05-15 0.1.0.0 STABLE","text":"<p>\u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0437\u0430\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u043b\u0438\u0437 Propan!</p> <p>\u0421 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0440\u0435\u043b\u0438\u0437\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439, \u043d\u0430\u0440\u0443\u0448\u0430\u044e\u0449\u0438\u0445 \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0441\u043c\u0435\u043b\u043e!</p> <p>\u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f, \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 RabbitMQ. \u0412 \u0441\u043a\u043e\u0440\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0436\u0438\u0434\u0430\u0439\u0442\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 Redis (\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0435\u0439\u0447\u0430\u0441), Kafka (\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435) \u0438 \u043f\u043e\u043b\u043d\u0443\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 Nats (\u0442\u0430\u043a\u0436\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435).</p>"},{"location":"ru/CHANGELOG/#2023-05-01-0094","title":"2023-05-01 0.0.9.4","text":"<p>\u041e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0438! \u0422\u0435\u043f\u0435\u0440\u044c Propan \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c FastAPI!</p> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.event(\"test\")\nasync def hello(m: dict) -&gt; dict:\n    return { \"response\": \"Hello, Propan!\" }\n\napp.include_router(router)\n</code></pre> <p>\u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438</p> <p>\u0422\u0430\u043a\u0436\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0432 \u0432\u0438\u0434\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 (\u043f\u043e\u043a\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f RabbitMQ)!</p> <pre><code>from propan import RabbitBroker\nfrom propan.test import TestRabbitBroker\n\nbroker = RabbitBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n    return \"pong\"\n\nasync def test_publish():\n    async with TestRabbitBroker(broker) as test_broker:\n        await test_broker.start()\n        r = await test_broker.publish(\"ping\", queue=\"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 RPC over MQ (\u043f\u043e\u043a\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f RabbitMQ): <code>return</code> \u0432\u0430\u0448\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d \u0432 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 \u043e\u0442\u0432\u0435\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f.</p> Breaking changes: <ul> <li>\u043c\u0435\u0442\u043e\u0434 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 <code>publish_message</code> \u0431\u044b\u043b \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d \u0432 <code>publish</code></li> <li>\u0443\u0434\u0430\u043b\u0435\u043d \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 <code>declare</code> \u0432 <code>RabbitQueue</code> \u0438 <code>RabbitExchange</code> - \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>passive</code></li> </ul>"},{"location":"ru/CHANGELOG/#2023-04-18-009","title":"2023-04-18 0.0.9","text":"<p>\u0420\u0435\u043b\u0438\u0437 \u043f\u0440\u0438\u0443\u0440\u043e\u0447\u0435\u043d \u043a \u0432\u044b\u0445\u043e\u0434\u0443 \u0432 \u0441\u0432\u0435\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: fast-depends. \u0422\u0435\u043f\u0435\u0440\u044c Propan \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0435\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438. <code>Context</code> \u0442\u0430\u043a\u0436\u0435 \u043f\u0435\u0440\u0435\u043e\u0441\u043c\u044b\u0441\u043b\u0435\u043d - \u0442\u0435\u043f\u0435\u0440\u044c \u044d\u0442\u043e \u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a fast-depends CustomField.</p> \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0441\u0431\u043e\u0440\u043a\u0438: <ul> <li>\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u044c <code>Depends</code></li> <li>\u0411\u043e\u043b\u0435\u0435 \u0433\u0438\u0431\u043a\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 <code>Context</code></li> <li>\u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0438 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043c\u043e\u0434\u0443\u043b\u044c <code>propan.annotation</code> \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430</li> </ul> Breaking changes: <ul> <li><code>@use_context</code> \u0431\u044b\u043b \u0443\u0434\u0430\u043b\u0435\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>@apply_types</code> \u0434\u043b\u044f \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f <code>Context</code></li> <li><code>Alias</code> \u0431\u044b\u043b \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u044c <code>Context</code></li> <li>\u0414\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u044f\u0432\u0438\u0432 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438</li> </ul> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434:</p> <pre><code>from propan import Context, apply_types\n@apply_types\ndef func(logger = Context()): ...\n\n# or\nfrom propan import Context, apply_types\n@apply_types\ndef func(l = Context(\"logger\")): ...\n\n# or\nfrom propan import apply_types\nfrom propan.annotations import Logger\n@apply_types\ndef func(logger: Logger): ...\n</code></pre>"},{"location":"ru/CHANGELOG/#2023-04-05-initial","title":"2023-04-05 INITIAL","text":"<p>\u041f\u0440\u0438\u0432\u0435\u0442! \u041f\u043e\u0437\u0434\u0440\u0430\u0432\u043b\u044f\u044e \u0432\u0441\u0435\u0445 \u0438, \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e, \u0441\u0435\u0431\u044f \u0441 \u043f\u0435\u0440\u0432\u044b\u043c \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c \u0440\u0435\u043b\u0438\u0437\u043e\u043c Propan!</p> <p>\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0441\u0431\u043e\u0440\u043a\u0438</p> <p>\u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044be</p> <ul> <li>async RabbitMQ broker</li> <li>\u0438\u043d\u044a\u0435\u043a\u0446\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439</li> <li>\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432</li> <li>\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 CLI</li> </ul> \u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435 <p>\u0412 \u0440\u0435\u043b\u0438\u0437 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u0435\u0440\u0432\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 NATS (\u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Jetstream).</p> \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438 <ul> <li>\u041f\u043e\u043b\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 NATS</li> <li>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> <li>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f</li> </ul>"},{"location":"ru/alternatives/","title":"\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0438","text":""},{"location":"ru/alternatives/#alternative-frameworks","title":"Alternative Frameworks","text":"<p>Propane - \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u043e\u043b\u043e\u0434\u043e\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a. \u0423 \u043d\u0435\u0433\u043e \u043c\u043d\u043e\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u043d\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u043d\u0430\u0442\u044c \u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430\u0445. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u044b \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0430\u0441\u043f\u0435\u043a\u0442\u0430\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0432 \u043d\u0438\u0445 \u0434\u0440\u0443\u0433\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\u0438 \u0432 \u0432\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435.</p>"},{"location":"ru/alternatives/#minos","title":"Minos","text":"<p>Minos - \u044d\u0442\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0432\u0430\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0440\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u044b \u043d\u0430 Python. \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435 \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 event sourcing, CQRS \u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 Messaging.</p> <p>\u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a <code>minos</code> \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432:</p> <ul> <li>\u041c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430: \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043a\u0430\u043a \u043d\u0430\u0431\u043e\u0440 \u0441\u043b\u0430\u0431\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432.</li> <li>\u0420\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430\u043c: \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0436\u0431, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430\u043c Domain-Driven Design (DDD).</li> <li>\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0438\u0441: \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u044b \u043c\u043e\u0433\u0443\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441, \u043d\u0435 \u0434\u043e\u0436\u0438\u0434\u0430\u044f\u0441\u044c \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u043b\u0443\u0436\u0431\u044b.</li> <li>\u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u0434\u043e\u043c\u0435\u043d\u0430: \u0421\u043b\u0443\u0436\u0431\u0435 \u0447\u0430\u0441\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435. \u042d\u0442\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f CQRS.</li> <li>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u0439: \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0442\u0430\u043a\u043e\u0433\u043e \u043a\u0430\u043a \u0437\u0430\u043a\u0430\u0437 \u0438\u043b\u0438 \u041a\u043b\u0438\u0435\u043d\u0442, \u0432 \u0432\u0438\u0434\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u0438\u0437\u043c\u0435\u043d\u044f\u044e\u0449\u0438\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435. \u0412\u0441\u044f\u043a\u0438\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0435. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f - \u044d\u0442\u043e \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f, \u043e\u043d\u043e \u043f\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u0443\u0442\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0442\u043e\u043c\u0430\u0440\u043d\u044b\u043c. \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u0443\u0442\u0435\u043c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439.</li> <li>\u041e\u0431\u043c\u0435\u043d \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438: \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0443\u0442\u0435\u043c \u043e\u0431\u043c\u0435\u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u043a\u0430\u043d\u0430\u043b\u0430\u043c \u043e\u0431\u043c\u0435\u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438. (\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Apache Kafka)</li> <li>API gateway: \u0435\u0434\u0438\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u0440\u043e\u043a\u0441\u0438-\u0441\u0435\u0440\u0432\u0435\u0440 \u0448\u043b\u044e\u0437\u0430 API/\u043c\u0430\u0440\u0448\u0440\u0443\u0442 \u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0441\u043b\u0443\u0436\u0431\u0435.</li> <li>\u0421\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f: \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0441\u043b\u0443\u0436\u0431\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0438 \u043e\u0442\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435.</li> </ul>"},{"location":"ru/alternatives/#kombu","title":"Kombu","text":"<p>Kombu - \u044d\u0442\u043e Python \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438.</p> <p>\u0426\u0435\u043b\u044c Kombu - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u043e\u0431\u043c\u0435\u043d \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u043d\u0430 Python, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u0438\u0434\u0438\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 AMQ, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043e\u0431\u043c\u0435\u043d\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438.</p> <ul> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0430\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0445 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043e\u0432.</li> <li>\u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 AMQP \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a py-amqp, redis \u0438\u043b\u0438 SQS.</li> <li>Virtual transports \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043b\u0435\u0433\u043a\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0434\u043b\u044f \u0442\u0440\u0430\u043d\u0441\u043e\u043f\u043e\u0440\u0442\u043e\u0432, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u0442 AMQP. \u0423\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 Redis, Amazon SQS, \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 Azure, Azure Service Bus, ZooKeeper, SoftLayer MQ, MongoDB \u0438 Pyro.</li> <li>In-memory \u0442\u0440\u0430\u043d\u0441\u043e\u043f\u043e\u0440\u0442 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0441\u0436\u0430\u0442\u0438\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</li> <li>\u0421\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0432\u043e \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u0432\u043e\u0437\u043a\u0430\u0445.</li> <li>\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0443\u0442\u0435\u043c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043a\u0430\u043d\u0430\u043b\u0430.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 amqplib, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0442\u0430\u0439\u043c-\u0430\u0443\u0442\u043e\u0432 \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u043a\u0430\u043d\u0430\u043b\u0435.</li> </ul>"},{"location":"ru/alternatives/#nameko","title":"Nameko","text":"<p>Nameko - \u044d\u0442\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u043d\u0430 Python.</p> <p>\u041e\u043d \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439:</p> <ul> <li>RPC \u043f\u043e\u0432\u0435\u0440\u0445 AMQP</li> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (pub-sub) \u0447\u0435\u0440\u0435\u0437 AMQP</li> <li>\u041f\u0440\u043e\u0441\u0442\u043e\u0439 HTTP GET \u0438 POST</li> <li>RPC Websocket \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435)</li> </ul> <p>\"\u0418\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\" \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043b\u0443\u0436\u0431\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 RPC-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0438 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438\u0437 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u043b\u0443\u0436\u0431. \u041e\u043d \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442 HTTP-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u043e AMQP, \u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 websocket, \u0441\u043a\u0430\u0436\u0435\u043c, \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 Javascript.</p> <p>Nameko \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0441\u043c\u0435\u0448\u0438\u0432\u0430\u0442\u044c \u0438\u0445 \u043f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e.</p>"},{"location":"ru/help/","title":"HELP","text":"<p>\u0412\u0430\u0441 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f Propan?</p> <p>\u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043c\u043e\u0447\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u0443, \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u0440\u0443?</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438.</p>"},{"location":"ru/help/#_1","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430","text":"<p>\u0421\u0435\u0439\u0447\u0430\u0441 \u043f\u0440\u043e\u0435\u043a\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0433\u043e\u043b\u043e\u043c \u044d\u043d\u0442\u0443\u0437\u0438\u0430\u043c\u0435 \u0435\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043c\u043e\u0447\u044c, \u043d\u043e \u043d\u0435 \u0433\u043e\u0442\u043e\u0432\u044b \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430/\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0444\u0438\u0434\u0431\u0435\u043a. \u042d\u0442\u043e \u0442\u043e\u043f\u043b\u0438\u0432\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0434\u043e\u0433\u0440\u0435\u0432\u0430\u0435\u0442 \u043e\u0433\u043e\u043d\u044c  \u044d\u043d\u0442\u0443\u0437\u0438\u0430\u0437\u043c\u0430.</p>"},{"location":"ru/help/#twitter-propan","title":"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430 Twitter \u043e Propan","text":"<p>\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 Tweet \u043e Propan \u0438 \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u043d\u0435 \u0438 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c, \u043f\u043e\u0447\u0435\u043c\u0443 \u0432\u0430\u043c \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442. \ud83c\udf89</p> <p>\u0421\u0435\u0439\u0447\u0430\u0441 \u044d\u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0430\u0436\u043d\u043e: \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0432\u043e\u043a\u0440\u0443\u0433 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435 \u043e\u043d \u0441\u0442\u0430\u043d\u0435\u0442!</p>"},{"location":"ru/help/#propan-twitter","title":"\u0421\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 Propan \u043d\u0430 Twitter","text":"<p>\u0421\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 @PropanFramework \u043d\u0430 Twitter \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u0438\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0438 \u043e Propan. \ud83d\udc26</p> <p>\u0417\u0434\u0435\u0441\u044c \u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u044e \u0432\u0441\u0435 \u0431\u0435\u043a\u0441\u0442\u0435\u0439\u0434\u0436\u0438 \u0438 \u043d\u043e\u0432\u043e\u0441\u0442\u0438 \u043e \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430!</p>"},{"location":"ru/help/#propan-github","title":"\u041e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0437\u0432\u0435\u0437\u0434\u0443 Propan \u043d\u0430 GitHub","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0432 \"\u0437\u0432\u0443\u0437\u0434\u0443\" Propan \u043d\u0430 GitHub (\u043a\u043b\u0438\u043a\u043d\u0438\u0442\u0435 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0437\u0432\u0435\u0437\u0434\u044b \u0432 \u043f\u0440\u0430\u0432\u043e\u043c \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0443\u0433\u043b\u0443):</p> <p>https://github.com/Lancetnik/Propan/</p> <p>\u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u0432\u0435\u0437\u0434, \u0442\u0435\u043c \u043f\u0440\u043e\u0449\u0435 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u0443\u0432\u0438\u0434\u0435\u0442\u044c, \u0447\u0442\u043e \u043e\u043d \u043f\u043e\u043b\u0435\u0437\u0435\u043d.</p>"},{"location":"ru/help/#github","title":"\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043d\u0430 GitHub","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \"\u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c\" Propan \u043d\u0430 GitHub (\u043a\u043b\u0438\u043a\u043d\u0438\u0442\u0435 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \"watch\" \u0432 \u043f\u0440\u0430\u0432\u043e\u043c \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0443\u0433\u043b\u0443):</p> <p>https://github.com/Lancetnik/Propan/</p> <p>\u0422\u0430\u043c \u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 - \"Release only\". \u0422\u0430\u043a \u0432\u044b \u0431\u0443\u0434\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e \u0432\u0430\u0436\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438.</p>"},{"location":"ru/help/#_2","title":"\u0421\u0432\u044f\u0437\u0430\u0442\u044c\u0441\u044f \u0441 \u0430\u0432\u0442\u043e\u0440\u043e\u043c","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0441\u0432\u044f\u0437\u0430\u0442\u044c\u0441\u044f \u0441\u043e \u043c\u043d\u043e\u0439 (\u041f\u0430\u0441\u0442\u0443\u0445\u043e\u0432 \u041d\u0438\u043a\u0438\u0442\u0430 / <code>Lancetnik</code>), \u0430\u0432\u0442\u043e\u0440\u043e\u043c Propan.</p> <p>\u042f \u0431\u0443\u0434\u0443 \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0435\u043d, \u0435\u0441\u043b\u0438 \u0432\u044b \u0432\u044b\u0441\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0432\u043e\u0435 \u043c\u043d\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u043e\u0432\u043e\u0434\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u043b\u0438 \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u0442\u0435 \u043e\u0431 \u043e\u043f\u044b\u0442\u0435 \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f.</p> <p>\u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043c\u0435\u043d\u044f \u043d\u0430 GitHub \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u043c\u043e\u0438\u0445 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445.</p> <p>\u0421\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 \u043c\u043d\u043e\u0439 \u043d\u0430 Twitter \u0447\u0442\u043e\u0431\u044b \u0443\u0441\u043b\u044b\u0448\u0430\u0442\u044c \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u0434\u0430\u0436\u0435 \u0442\u0435\u0445, \u0447\u0442\u043e \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435).</p>"},{"location":"ru/help/#_3","title":"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f\u0445","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f\u0445 \u043d\u0430 GitHub.</p> <p>\u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0439 \u0432\u043e\u043f\u0440\u043e\u0441, \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0438\u0442\u0435 \u043e\u0431 \u043e\u043f\u044b\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u0435 \u0438\u0434\u0435\u044e \u0438\u043b\u0438 \u043f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u0434\u0440\u0443\u0433\u0438\u043c \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0438\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c - \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0432\u0430\u0448\u0435 \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u0436\u0438\u0437\u043d\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p>"},{"location":"ru/help/#contributors","title":"Contributors","text":"<p>\u0418\u043b\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u043a \u044d\u0442\u0438\u043c \u043f\u043e\u0442\u0440\u044f\u0441\u0430\u044e\u0449\u0438\u043c \u043b\u044e\u0434\u044f\u043c</p> <p> </p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0438\u043c \u0437\u0430 \u0432\u043a\u043b\u0430\u0434 \u0432 \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442!</p>"},{"location":"ru/contributing/1_todo/","title":"TODO","text":"<p>\u0421\u0435\u0439\u0447\u0430\u0441 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0438 \u043c\u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043d\u0443\u0436\u043d\u0430 \u0432\u0430\u0448\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e \u0432 \u0440\u0435\u043b\u0438\u0437!</p>"},{"location":"ru/contributing/1_todo/#_1","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<p>\u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.</p> <p>\u0412\u044b \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043c\u043e\u0436\u0435\u0442\u0435, \u0435\u0441\u043b\u0438</p> <ul> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u043e\u043f\u0435\u0447\u0430\u0442\u043a\u0438, \u043d\u0435\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438</li> <li>\u041e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442\u0435 \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b, \u0433\u0434\u0435 \u0447\u0442\u043e-\u0442\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u044f\u0441\u043d\u043e</li> <li>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432</li> </ul> <p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0440\u0430\u0437\u0434\u0435\u043b</p>"},{"location":"ru/contributing/1_todo/#_2","title":"\u041a\u043e\u0434","text":"<p>\u0412\u0441\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u044b \u043c\u043e\u0435\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0432 Issues.</p> <p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0440\u0430\u0437\u0434\u0435\u043b.</p> <p>\u0415\u0441\u043b\u0438 \u0436\u0435 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0430\u0434\u0430\u043f\u0442\u0435\u0440 \u0434\u043b\u044f \u043a\u0430\u043a\u043e\u0433\u043e-\u043b\u0438\u0431\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430, \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0432 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435.</p>"},{"location":"ru/contributing/2_contributing-index/","title":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0443\u0436\u0435 \u0441\u043a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0438 \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043a\u043e\u0434, \u0432\u0430\u043c \u043f\u0440\u0438\u0433\u043e\u0434\u044f\u0442\u0441\u044f \u044d\u0442\u0438 \u0433\u0430\u0439\u0434\u043b\u0430\u0439\u043d\u044b \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f.</p>"},{"location":"ru/contributing/2_contributing-index/#commits","title":"Commits","text":"<p>\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0435 \u043e \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0438.</p> <p>\u0424\u043e\u0440\u043c\u0430\u0442: <code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></p> <p>\u0413\u0434\u0435 <code>&lt;scope&gt;</code> \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d.</p> <pre><code>feat: add synchronous RabbitMQ wrapper\n^--^  ^------------^\n|     |\n|     +-&gt; \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435\n|\n+-------&gt; \u0422\u0438\u043f\u044b: chore, docs, feat, fix, refactor, style, or test.\n</code></pre> <p>\u0411\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432:</p> <ul> <li><code>feat</code>: (\u041d\u043e\u0432\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439)</li> <li><code>fix</code>: (\u0411\u0430\u0433\u0444\u0438\u043a\u0441 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430)</li> <li><code>docs</code>: (\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438)</li> <li><code>style</code>: (Formatting, linting)</li> <li><code>refactor</code>: (\u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u043a\u043e\u0434\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445)</li> <li><code>test</code>: (\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0442\u0435\u0441\u0442\u043e\u0432)</li> <li><code>chore</code>: (\"\u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0435\" \u043a\u043e\u043c\u043c\u0438\u0442\u044b - \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438, \u0430\u043f\u0434\u0435\u0439\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0442.\u0434.)</li> </ul> <p>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u043f\u043e \u0442\u0435\u043c\u0435:</p> <ul> <li>https://www.conventionalcommits.org/</li> <li>https://sparkbox.com/foundry/semantic_commit_messages</li> <li>http://karma-runner.github.io/1.0/dev/git-commit-msg.html</li> </ul>"},{"location":"ru/contributing/2_contributing-index/#venv","title":"\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 <code>venv</code>","text":"<p>\u041a\u0430\u043a \u0438 \u043b\u044e\u0431\u043e\u0439 python \u043f\u0440\u043e\u0435\u043a\u0442, Propan \u043b\u0443\u0447\u0448\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0441 \u043f\u0443\u043c\u043e\u0449\u044c\u044e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e \u0432 python \u043c\u043e\u0434\u0443\u043b\u044f <code>venv</code>:</p> <pre><code>python -m venv venv\n</code></pre> <p>\u042d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e <code>./venv/</code>, \u043a\u0443\u0434\u0430 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p>"},{"location":"ru/contributing/2_contributing-index/#_2","title":"\u0410\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435","text":"<p>\u0410\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439:</p> <pre><code>source ./venv/bin/activate\n</code></pre> <p>\u0418 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u044c\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0432\u0435\u0440\u0441\u0438\u044e <code>pip</code>'\u0430</p> <pre><code>python -m pip install --upgrade pip\n</code></pre>"},{"location":"ru/contributing/2_contributing-index/#pip","title":"pip","text":"<p>\u041f\u043e\u0441\u043b\u0435 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438</p> <pre><code>pip install -e \".[dev]\"\n</code></pre>"},{"location":"ru/contributing/2_contributing-index/#propan","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432\u0430\u0448 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 Propan","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u0442\u0435 \u043d\u043e\u0432\u044b\u0439 Python \u0444\u0430\u0439\u043b \u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442\u0435 \u0442\u0430\u043c Propan, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Propan \u0438\u0437 \u0432\u0430\u0448\u0435\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p> <p>\u0418, \u0435\u0441\u043b\u0438 \u0432\u044b \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u043a\u043e\u0434 \u0432\u0430\u0448\u0435\u0433\u043e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e Propan, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043e\u0442\u0440\u0430\u0436\u0435\u043d\u044b \u0432 \u0440\u0430\u0431\u043e\u0442\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e Python \u0444\u0430\u0439\u043b\u0430, \u0442.\u043a. \u043f\u0440\u043e\u0435\u043a\u0442 \u0431\u044b\u043b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0441 \u0444\u043b\u0430\u0433\u043e\u043c <code>-e</code>.</p> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \"\u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c\" \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0435\u0433\u043e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438.</p> <p>\u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e <code>CLI</code> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430:</p> <pre><code>python -m propan ...\n</code></pre>"},{"location":"ru/contributing/2_contributing-index/#_3","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"ru/contributing/2_contributing-index/#pytest","title":"Pytest","text":"<p>\u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432 \u0441 \u0432\u0430\u0448\u0438\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u043c Python \u0438 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 pytest \u0438\u043b\u0438 \u043e\u0434\u0438\u043d \u0438\u0437 \u0437\u0430\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432</p> <pre><code>pytest tests\n# or\nbash ./scripts/test.sh\n# with coverage output\nbash ./scripts/test-cov.sh\n</code></pre> <p>\u0412 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043e pytest marks:</p> <ul> <li>slow</li> <li>rabbit</li> <li>nats</li> <li>sqs</li> <li>kafka</li> <li>redis</li> <li>all</li> </ul> <p>\u0411\u043e\u043b\u044c\u0448\u0435 \u0443\u0437\u043d\u0430\u0442\u044c \u043f\u0440\u043e \u043c\u0430\u0440\u043a\u0438\u0440\u043e\u0432\u043a\u0443 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0434\u0435\u0441\u044c</p> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e pytest \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0441 \u0442\u0435\u0433\u043e\u043c \"not slow\".</p> <p>\u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435:</p> <pre><code>pytest -m 'all'\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0438 RabbiMQ \u0438 NATS \u0443 \u0441\u0435\u0431\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0431\u0435\u0437 \u044d\u0442\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439:</p> <pre><code>pytest -m 'not rabbit and not nats'\n</code></pre> <p>\u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 docker-compose.yml</p> <pre><code>docker compose up -d\n</code></pre> <p>\u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\u043c</p> <pre><code>version: \"3\"\n\nservices:\n  rabbit:\n    image: rabbitmq:3\n    ports:\n      - 5672:5672\n\n  redis:\n    image: redis:alpine3.18\n    ports:\n      - 6379:6379\n\n  nats:\n    image: nats\n    command: -js\n    ports:\n      - 4222:4222\n      - 8222:8222  # management\n\n  kafka:\n    image: bitnami/kafka:3.5.0\n    ports:\n      - 9092:9092\n    environment:\n      - KAFKA_ENABLE_KRAFT=yes\n      - KAFKA_CFG_NODE_ID=1\n      - KAFKA_CFG_PROCESS_ROLES=broker,controller\n      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER\n      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093\n      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT\n      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092\n      - KAFKA_BROKER_ID=1\n      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093\n      - ALLOW_PLAINTEXT_LISTENER=yes\n\n  sqs:\n    image: softwaremill/elasticmq-native\n    ports:\n      - 9324:9324\n</code></pre>"},{"location":"ru/contributing/2_contributing-index/#hatch","title":"Hatch","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 hatch \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\u043c, \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043d\u0435\u0433\u043e:</p>"},{"location":"ru/contributing/2_contributing-index/#test","title":"TEST","text":"<p>\u042d\u0442\u043e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u044f\u0445 python: 3.7-3.11</p> <p>Note</p> <p>\u0412\u0441\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u044f\u0437\u044b\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u043d\u0430 \u0432\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435</p> <pre><code># \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 python3.7-3.11\nhatch run test:run\n\n# \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 python3.7-3.11\nhatch run test:run-all\n</code></pre>"},{"location":"ru/contributing/2_contributing-index/#test-last","title":"TEST-LAST","text":"<p>\u042d\u0442\u043e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u0432\u0435\u0440\u0441\u0438\u0438 python 3.11</p> <pre><code># \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 python3.11\nhatch run test-last:run\n\n# \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 python3.11\nhatch run test-last:run-all\n\n# \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 python3.11 \u0441 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435\u043c \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f\nhatch run test-last:cov\n</code></pre>"},{"location":"ru/contributing/3_docs/#_1","title":"\u041a\u0430\u043a \u043f\u043e\u043c\u043e\u0447\u044c","text":"<p>\u0412\u044b \u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0435\u043e\u0446\u0435\u043d\u0438\u043c\u0443\u044e \u043f\u043e\u043c\u043e\u0449\u044c, \u0435\u0441\u043b\u0438 \u0432\u043d\u0435\u0441\u0435\u0442\u0435 \u0441\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432 \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.</p> <p>\u0422\u0430\u043a\u0438\u043c \u0432\u043a\u043b\u0430\u0434\u043e\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c:</p> <ul> <li>\u0423\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u043e\u0448\u0438\u0431\u043a\u0438, \u043e\u043f\u0435\u0447\u0430\u0442\u043a\u0438</li> <li>\u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043e \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432</li> <li>\u0412\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439</li> </ul> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043e\u0431\u043e \u0432\u0441\u0435\u043c \u044d\u0442\u043e\u043c \u0432 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f\u0445 \u043d\u0430 github, \u0437\u0430\u0432\u0435\u0441\u0442\u0438 issue \u0438\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0431 \u044d\u0442\u043e\u043c \u0432 \u043d\u0430\u0448\u0435\u0439 telegram \u0433\u0440\u0443\u043f\u043f\u0435.</p> <p>Note</p> <p>\u041e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0442\u0435\u043c, \u043a\u0442\u043e \u0433\u043e\u0442\u043e\u0432 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u043f\u043e\u043c\u043e\u0449\u044c \u0434\u0435\u043b\u043e\u043c \u0438 \u043f\u043e\u043c\u043e\u0447\u044c \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0435 \u0435\u0435 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u044f\u0437\u044b\u043a\u0438.</p>"},{"location":"ru/contributing/3_docs/#_2","title":"\u041a\u0430\u043a \u043d\u0430\u0447\u0430\u0442\u044c","text":"<p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0432\u0430\u043c \u0434\u0430\u0436\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0432\u0435\u0441\u044c \u043f\u0440\u043e\u0435\u043a\u0442 Propan \u0446\u0435\u043b\u0438\u043a\u043e\u043c.</p> <p>\u0414\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e:</p> <ol> <li>\u0421\u043a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> <li>\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e <code>docs/</code></li> <li>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435    <pre><code>python -m venv venv\n</code></pre></li> <li>\u0410\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e    <pre><code>source venv/bin/activate\n</code></pre></li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438    <pre><code>pip install -r requirements.txt\n</code></pre></li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438    <pre><code>mkdocs serve\n</code></pre></li> </ol> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u043e\u0442\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0432\u0430\u0448\u0435\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0441\u0430\u0439\u0442\u0430. \u041f\u043e\u0441\u043b\u0435 \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0444\u043e\u0440\u043c\u0438\u0442\u044c <code>PR</code> \u0441 \u043d\u0438\u043c\u0438 - \u0438 \u044f \u0441 \u0440\u0430\u0434\u043e\u0441\u0442\u044c\u044e \u0435\u0433\u043e \u043f\u0440\u0438\u043c\u0443!</p>"},{"location":"ru/contributing/4_adapters/","title":"Create Custom Propan Broker","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043c\u043e\u0447\u044c \u043c\u043d\u0435 \u0441 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c PropanBroker \u0434\u043b\u044f \u0435\u0449\u0435 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u043f\u043b\u0430\u043d\u0430 \u0438\u043b\u0438 \u0432\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b Propan \u0434\u043b\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0432\u0430\u043c \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f \u044d\u0442\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e PropanBroker.</p> <p>\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043c\u044b \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f \u0441 \u0434\u0435\u0442\u0430\u043b\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 Propan.</p>"},{"location":"ru/contributing/4_adapters/#_1","title":"\u0420\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u043b\u0430\u0441\u0441","text":"<p>\u0412\u0441\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u044b Propan \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044e\u0442\u0441\u044f \u043e\u0442 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 <code>propan.brokers.model.BrokerAsyncUsecase</code>.</p> <p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0435\u0433\u043e \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b.</p> <pre><code>from typing import Any, Callable, Optional, TypeVar\n\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import PropanMessage\nfrom propan.brokers.push_back_watcher import BaseWatcher\nfrom propan.types import HandlerWrapper, SendableMessage\n\n\nT = TypeVar(\"T\")\n\n\nclass MyBroker(BrokerAsyncUsecase):\n    async def _connect(self, *args: Any, **kwargs: Any) -&gt; Any:\n        pass\n\n    async def close(self) -&gt; None:\n        pass\n\n    def handle(self, *args: Any, **kwargs: Any) -&gt; HandlerWrapper:\n        pass\n\n    async def start(self) -&gt; None:\n        pass\n\n    async def _parse_message(self, message: Any) -&gt; PropanMessage:\n        pass\n\n    async def _process_message(\n        self,\n        func: Callable[[PropanMessage], T],\n        watcher: Optional[BaseWatcher],\n    ) -&gt; Callable[[PropanMessage], T]:\n        pass\n\n    async def publish(\n        self,\n        message: SendableMessage,\n        *args: Any,\n        callback: bool = False,\n        callback_timeout: Optional[float] = None,\n        raise_timeout: bool = False,\n        **kwargs: Any,\n    ) -&gt; Any:\n        pass\n</code></pre> <p>\u0420\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f \u0441\u043e \u0432\u0441\u0435\u043c \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443.</p>"},{"location":"ru/contributing/4_adapters/#_2","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0440\u043e\u043a\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0417\u0430 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0442 \u0434\u0432\u0430 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u0430: <code>_connect</code> \u0438 <code>close</code>. \u041f\u043e\u0441\u043b\u0435 \u0438\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0432\u0430\u0448\u0438\u043c \u0430\u0434\u0430\u043f\u0442\u0435\u0440\u043e\u043c \u0443\u0436\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c\u0441\u044f \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0431\u0440\u043e\u043a\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u043d\u043e \u0435\u0449\u0435 \u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f).</p>"},{"location":"ru/contributing/4_adapters/#_connect","title":"_connect","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>_connect</code> \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u0431\u0440\u043e\u043a\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043a\u0430\u043a <code>self._connection</code>.</p> <p>Tip</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u0448 \u0431\u0440\u043e\u043a\u0435\u0440 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432\u044b \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0442\u043e\u0434\u0435.</p> <pre><code>import asyncio\nfrom typing import Any, Optional\n\n\nimport aio_pika\nfrom propan.brokers._model import BrokerAsyncUsecase\n\nclass RabbitBroker(BrokerAsyncUsecase):\n    _connection: Optional[aio_pika.RobustConnection]\n    _channel: Optional[aio_pika.RobustChannel]\n\n    async def _connect(\n        self,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; aio_pika.RobustConnection:\n        connection = await aio_pika.connect_robust(\n            *args, **kwargs, loop=asyncio.get_event_loop()\n        )\n\n        if self._channel is None:\n            self._channel = await connection.channel()\n\n        return connection\n</code></pre> <p>Note</p> <p><code>args</code> \u0438 <code>kwargs</code> \u043f\u0435\u0440\u0435\u0434\u0430\u0434\u0443\u0442\u0441\u044f \u0432 \u0432\u0430\u0448 \u043c\u0435\u0442\u043e\u0434 \u043b\u0438\u0431\u043e \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 <code>__init__</code>, \u043b\u0438\u0431\u043e \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u0430 <code>connect</code>. \u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0432 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435, \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0431 \u044d\u0442\u043e\u043c \u0432\u043e\u043b\u043d\u043e\u0432\u0430\u0442\u044c\u0441\u044f.</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438: \u0432 \u043d\u0438\u0445 \u043c\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0439 \u0434\u043b\u044f RabbitBroker \u043e\u0431\u044a\u0435\u043a\u0442 <code>_channel</code>.</p> <pre><code>class RabbitBroker(BrokerAsyncUsecase):\n    _connection: Optional[aio_pika.RobustConnection]\n    _channel: Optional[aio_pika.RobustChannel]\n\n    async def _connect(\n        self,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; aio_pika.RobustConnection:\n        connection = await aio_pika.connect_robust(\n            *args, **kwargs, loop=asyncio.get_event_loop()\n        )\n\n        if self._channel is None:\n            self._channel = await connection.channel()\n\n        return connection\n</code></pre>"},{"location":"ru/contributing/4_adapters/#close","title":"close","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434 <code>close</code>.</p> <pre><code>class RabbitBroker(BrokerAsyncUsecase):\n    ...\n\n    async def close(self) -&gt; None:\n        if self._channel is not None:\n            await self._channel.close()\n            self._channel = None\n\n        if self._connection is not None:\n            await self._connection.close()\n            self._connection = None\n</code></pre> <p>Note</p> <p>\u0412 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c \u043c\u0435\u0442\u043e\u0434\u0435 <code>connect</code> \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u0430 <code>_connect</code> \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0438 <code>self._connection is not None</code>, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u0441\u043b\u0435 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u0436\u0435 \u0435\u0433\u043e \u0438 \u043e\u0431\u043d\u0443\u043b\u0438\u0442\u044c.</p> <p>\u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u044d\u0442\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0432\u0430\u0448\u0438\u043c \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u0443\u0436\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f.</p>"},{"location":"ru/contributing/4_adapters/#_3","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":"<p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448 \u0431\u0440\u043e\u043a\u0435\u0440 \u043d\u0430\u0447\u0430\u043b \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441\u0430\u043c \u043c\u0435\u0442\u043e\u0434 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 (<code>handle</code>) \u0438 \u043c\u0435\u0442\u043e\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 (<code>start</code>).</p> <p>\u0422\u0430\u043a\u0436\u0435 \u0432\u0430\u0448 \u0431\u0440\u043e\u043a\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 <code>Handler</code>, \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p>"},{"location":"ru/contributing/4_adapters/#handle","title":"handle","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Union, Optional\n\nfrom propan.types import HandlerWrapper, HandlerCallable\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import BaseHandler\nfrom propan.brokers.rabbit import RabbitExchange, RabbitQueue\n\n\n@dataclass\nclass Handler(BaseHandler):\n    queue: RabbitQueue\n    exchange: Optional[RabbitExchange] = None\n\n\nclass RabbitBroker(BrokerAsyncUsecase):\n    handlers: List[Handler]\n\n    def handle(\n        self,\n        queue: RabbitQueue,\n        exchange: Union[RabbitExchange, None] = None,\n        *,\n        retry: Union[bool, int] = False,\n    ) -&gt; HandlerWrapper:\n        def wrapper(func: HandlerCallable) -&gt; HandlerCallable:\n            func = self._wrap_handler(func, retry=retry)\n            handler = Handler(callback=func, queue=queue, exchange=exchange)\n            self.handlers.append(handler)\n\n            return func\n\n        return wrapper\n</code></pre> <p>\u0412 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430\u0445 \u043c\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445 \u0432\u043d\u0443\u0442\u0440\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <p>\u0422\u0430\u043a\u0436\u0435, \u043e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043c\u043e\u043c\u0435\u043d\u0442\u043e\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 <code>_wrap_handler</code> - \u0438\u043c\u0435\u043d\u043d\u043e \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432 \u043d\u0435\u043e\u0431\u044a\u043e\u0434\u0438\u043c\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u0441\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b, \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0435 \u043e\u0431\u044b\u0447\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a Propan.</p> <pre><code>            func = self._wrap_handler(func, retry=retry)\n            handler = Handler(callback=func, queue=queue, exchange=exchange)\n            self.handlers.append(handler)\n\n            return func\n</code></pre>"},{"location":"ru/contributing/4_adapters/#start","title":"start","text":"<p>\u0412 \u043c\u043e\u0442\u043e\u0434\u0435 <code>start</code> \u043c\u044b \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0431\u0440\u043e\u043a\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043d\u0430\u0448\u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432.</p> <p>\u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 <code>handler</code>'\u043e\u0432, \u043e\u0434\u043d\u0430\u043a\u043e, \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044e \u043e\u043d \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0432 \u043f\u043e\u043b\u043d\u043e\u0439 \u043c\u0435\u0440\u0435.</p> <pre><code>class RabbitBroker(BrokerAsyncUsecase):\n    ...\n    async def start(self) -&gt; None:\n        await super().start()\n\n        for handler in self.handlers:\n            queue = await self._channel.declare_queue(**handler.queue.dict())\n            func = handler.callback\n            await queue.consume(func)\n</code></pre> <p>\u0417\u0434\u0435\u0441\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430:</p> <ul> <li>\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c <code>callbacks</code> (\u043a\u0430\u043a aio-pika, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u0434\u043b\u044f RabbitMQ)</li> <li>\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c</li> </ul> <p>\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0430\u043c \u043f\u043e\u0432\u0435\u0437\u043b\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0446\u0438\u043a\u043b \u0432 <code>callback</code>. \u042d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u043f\u0438\u0442\u044c\u0441\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>asyncio.Task</code>, \u043a\u0430\u043a \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0441 Redis. \u041e\u0434\u043d\u0430\u043a\u043e, \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u044d\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 <code>close</code>.</p> <pre><code>import asyncio\nfrom dataclasses import dataclass\nfrom typing import Any, List, NoReturn, Optional\n\nfrom redis.asyncio.client import PubSub, Redis\n\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import BaseHandler\n\n\n@dataclass\nclass Handler(BaseHandler):\n    channel: str\n    pattern: bool = False\n\n    task: Optional[\"asyncio.Task[Any]\"] = None\n    subscription: Optional[PubSub] = None\n\n\nclass RedisBroker(BrokerAsyncUsecase):\n    handlers: List[Handler]\n    _connection: Redis\n\n    async def close(self) -&gt; None:\n        for h in self.handlers:\n            if h.task is not None:\n                h.task.cancel()\n\n            if h.subscription is not None:\n                await h.subscription.unsubscribe()\n                await h.subscription.reset()\n\n        if self._connection is not None:\n            await self._connection.close()\n            self._connection = None\n\n    async def start(self) -&gt; None:\n        await super().start()\n\n        for handler in self.handlers:\n            psub = self._connection.pubsub()\n            await psub.subscribe(handler.channel)\n\n            handler.subscription = psub\n            handler.task = asyncio.create_task(_consume(handler, psub))\n\n\nasync def _consume(handler: Handler, psub: PubSub) -&gt; NoReturn:\n    while True:\n        m = await psub.get_message(\n            ignore_subscribe_messages=True,\n            timeout=1.0,\n        )\n        if m:\n            await handler.callback(m)\n        await asyncio.sleep(0.01)\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u0430\u0448 \u0431\u0440\u043e\u043a\u0435\u0440 \u0443\u0436\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0434\u0435\u043a\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>handle</code>. \u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u043e\u043a\u0430 \u044d\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0430\u0434\u0430\u0442\u044c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.</p>"},{"location":"ru/contributing/4_adapters/#_4","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u043b\u0430\u0441\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0449\u0435 \u0434\u0432\u0430 \u043c\u0435\u0442\u043e\u0434\u0430: <code>_parse_message</code> \u0438 <code>_process_message</code>.</p>"},{"location":"ru/contributing/4_adapters/#_parse_message","title":"_parse_message","text":"<p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a \u0442\u0438\u043f\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 Propan.</p> <pre><code>import aio_pika\n\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import PropanMessage\n\n\nclass RabbitBroker(BrokerAsyncUsecase):\n    ...\n    @staticmethod\n    async def _parse_message(\n        message: aio_pika.message.IncomingMessage,\n    ) -&gt; PropanMessage:\n        return PropanMessage(\n            body=message.body,\n            headers=message.headers,\n            reply_to=message.reply_to or \"\",\n            message_id=message.message_id,\n            content_type=message.content_type or \"\",\n            raw_message=message,\n        )\n</code></pre> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e <code>body: bytes</code> \u0438 <code>raw_message: Any</code>. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043a\u0430\u043a \u0438\u0437 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0442\u0430\u043a \u0438 \u0438\u0437 \u0435\u0433\u043e \u0442\u0435\u043b\u0430, \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u043e\u0432 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u0412\u0441\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0432\u0430\u0448\u0435\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 <code>publish</code>.</p>"},{"location":"ru/contributing/4_adapters/#_process_message","title":"_process_message","text":"<p>\u0417\u0434\u0435\u0441\u044c \u0432\u0441\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e: \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b <code>ack</code>, <code>nack</code>, \u0442\u043e \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u0437\u0434\u0435\u0441\u044c. \u0422\u0430\u043a\u0436\u0435 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043f\u0440\u043e\u0441\u0445\u043e\u0434\u0438\u0442 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u0435\u0433\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 RPC over MQ. \u0415\u0441\u043b\u0438 \u0431\u0440\u043e\u043a\u0435\u0440 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0442\u043e \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0430\u0448 <code>handler</code>.</p> <p>\u0412\u043e\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f:</p> <pre><code>from functools import wraps\nfrom typing import Optional, TypeVar, Callable\n\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import PropanMessage\nfrom propan.brokers.push_back_watcher import BaseWatcher, WatcherContext\n\nT = TypeVar(\"T\")\n\nclass RabbitBroker(BrokerAsyncUsecase):\n    ...\n    def _process_message(\n        self, func: Callable[[PropanMessage], T], watcher: Optional[BaseWatcher]\n    ) -&gt; Callable[[PropanMessage], T]:\n        @wraps(func)\n        async def wrapper(message: PropanMessage) -&gt; T:\n            pika_message = message.raw_message\n            if watcher is None:\n                context = pika_message.process()\n            else:\n                context = WatcherContext(\n                    watcher,\n                    message,\n                    on_success=pika_message.ack,\n                    on_error=pika_message.nack,\n                    on_max=pika_message.reject,\n                )\n\n            async with context:\n                r = await func(message)\n                if message.reply_to:\n                    await self.publish(\n                        message=r,\n                        routing_key=message.reply_to,\n                        correlation_id=pika_message.correlation_id,\n                    )\n\n                return r\n\n        return wrapper\n</code></pre> <p>\u0410 \u0432\u043e\u0442 - \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438:</p> <pre><code>from functools import wraps\nfrom typing import Optional, TypeVar, Callable\n\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers._model.schemas import PropanMessage\nfrom propan.brokers.push_back_watcher import BaseWatcher\n\nT = TypeVar(\"T\")\n\nclass RedisProcess(BrokerAsyncUsecase):\n    ...\n    def _process_message(\n            self,\n            func: Callable[[PropanMessage], T],\n            watcher: Optional[BaseWatcher],\n        ) -&gt; Callable[[PropanMessage], T]:\n            @wraps(func)\n            async def wrapper(message: PropanMessage) -&gt; T:\n                r = await func(message)\n                if message.reply_to:\n                    await self.publish(r or \"\", message.reply_to)\n                return r\n\n            return wrapper\n</code></pre> <p>P.S: \u0432\u043e\u0442 \u0442\u0430\u043a \u0443\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u043d\u043e \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438 RPC</p> <pre><code>def _process_message(\n    self, func: Callable[[PropanMessage], T], watcher: Optional[BaseWatcher]\n) -&gt; Callable[[PropanMessage], T]:\n    @wraps(func)\n    async def wrapper(message: PropanMessage) -&gt; T:\n        return await func(message)\n\n    return wrapper\n</code></pre>"},{"location":"ru/contributing/4_adapters/#_5","title":"\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u044d\u0442\u0430\u043f (\u0435\u0441\u043b\u0438 \u043c\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u043c \u0438\u043b\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c RPC \u0441\u0435\u0439\u0447\u0430\u0441), \u0442\u0430\u043a \u0438 \u0441\u0430\u043c\u044b\u043c \u0441\u043b\u043e\u0436\u043d\u044b\u043c \u0438 \u0442\u0432\u043e\u0440\u0447\u0435\u0441\u043a\u0438\u043c.</p> <p>\u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0438\u0436\u0435 \u044f \u043e\u043f\u0443\u0449\u0443 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e RPC, \u0442\u0430\u043a \u043a\u0430\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0441\u0432\u043e\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f. \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> <pre><code>from typing import Optional, Dict, Any\n\nfrom propan.types import SendableMessage\nfrom propan.brokers._model import BrokerAsyncUsecase\nfrom propan.brokers.redis.schemas import RedisMessage\n\n\nclass RedisProcess(BrokerAsyncUsecase):\n    ...\n    async def publish(\n        self,\n        message: SendableMessage = \"\",\n        channel: str = \"\",\n        *,\n        reply_to: str = \"\",\n        headers: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        if self._connection is None:\n            raise ValueError(\"Redis connection not established yet\")\n\n        msg, content_type = self._encode_message(message)\n\n        await self._connection.publish(\n            channel,\n            RedisMessage(\n                data=msg,\n                headers={\n                    \"content-type\": content_type or \"\",\n                    **(headers or {}),\n                },\n                reply_to=reply_to,\n            ).json(),\n        )\n</code></pre> <p>\u041f\u043e\u0437\u0434\u0440\u0430\u0432\u043b\u044f\u044e, \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0441\u0435\u0445 \u044d\u0442\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0443 \u0432\u0430\u0441 \u0443\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440, \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\u0439 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p>"},{"location":"ru/contributing/4_adapters/#_6","title":"\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448 \u0431\u0440\u043e\u043a\u0435\u0440 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043b \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435, \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u043e\u043c \u0434\u043b\u044f \u043d\u0435\u0433\u043e, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0442\u0430\u043a\u0436\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u0432.</p> <p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0443\u0436\u043d\u043e \u0441\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0432 \u043c\u0435\u0442\u043e\u0434 <code>__init__</code>.</p> <pre><code>from typing import Any, Optional\n\nfrom propan.brokers._model import BrokerAsyncUsecase\n\n\nclass RabbitBroker(BrokerAsyncUsecase):\n    def __init__(\n        self,\n        *args: Any,\n        log_fmt: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        super().__init__(*args, log_fmt=log_fmt, **kwargs)\n</code></pre> <p>\u0417\u0430\u0442\u0435\u043c, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f</p> <pre><code>class RabbitBroker(BrokerAsyncUsecase):\n    __max_exchange_len: int\n    __max_queue_len: int\n\n    def __init__(\n        self,\n        *args: Any,\n        log_fmt: Optional[str] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        super().__init__(*args, log_fmt=log_fmt, **kwargs)\n\n        self.__max_queue_len = 4\n        self.__max_exchange_len = 4\n\n    @property\n    def fmt(self) -&gt; str:\n        return super().fmt or (\n            \"%(asctime)s %(levelname)s - \"\n            f\"%(exchange)-{self.__max_exchange_len}s | \"\n            f\"%(queue)-{self.__max_queue_len}s | \"\n            f\"%(message_id)-10s \"\n            \"- %(message)s\"\n        )\n</code></pre> <p>\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 <code>_get_log_context</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f, \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0435 \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <pre><code>class RabbitBroker(BrokerAsyncUsecase):\n    def _get_log_context(\n        self,\n        message: Optional[PropanMessage],\n        queue: RabbitQueue,\n        exchange: Optional[RabbitExchange] = None,\n    ) -&gt; Dict[str, Any]:\n        return {\n            \"queue\": queue.name,\n            \"exchange\": exchange.name if exchange else \"default\",\n            **super()._get_log_context(message),\n        }\n</code></pre> <p>\u0414\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c <code>message</code>. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0442\u0443\u0434\u0430 \u0441\u0430\u043c\u0438.</p> <p>\u0413\u0434\u0435? - \u041f\u0440\u044f\u043c\u043e \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 <code>handle</code></p> <pre><code>    ...\n    def handle(\n        self,\n        queue: RabbitQueue,\n        exchange: Union[RabbitExchange, None] = None,\n        *,\n        retry: Union[bool, int] = False,\n    ) -&gt; HandlerWrapper:\n\n        def wrapper(func: HandlerCallable) -&gt; HandlerCallable:\n            func = self._wrap_handler(\n                func,\n                queue=queue,\n                exchange=exchange,\n                retry=retry,\n            )\n            ....\n</code></pre> <p>\u0412\u0441\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>_wrap_handler</code>, \u0431\u0443\u0434\u0443\u0442 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u0432 \u0432\u0430\u0448\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>_get_log_context</code>.</p> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u0448 \u0431\u0440\u043e\u043a\u0435\u0440 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u043e \u0438 \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435. \u041f\u043e\u0437\u0434\u0440\u0430\u0432\u043b\u044f\u044e, \u0432\u044b - \u0432\u0435\u043b\u0438\u043a\u043e\u043b\u0435\u043f\u043d\u044b!</p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u0431\u0440\u043e\u043a\u0435\u0440 \u0434\u043b\u044f \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430, \u044f \u043e\u0447\u0435\u043d\u044c \u0436\u0434\u0443 \u0432\u0430\u0448 PR! \u042f \u0433\u043e\u0442\u043e\u0432 \u043f\u043e\u043c\u043e\u0447\u044c \u0432\u0430\u043c \u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0438 \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c. \u0412\u0430\u0448 \u0442\u0440\u0443\u0434 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0442\u0430\u043d\u0435\u0442 \u0447\u0430\u0441\u0442\u044c\u044e Propan.</p>"},{"location":"ru/getting_started/10_settings/","title":"\u041d\u0430\u0439\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u041e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f","text":"<p>\u0412 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0432\u0430\u0448\u0435\u043c\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438\u043b\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0440\u043e\u043a\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u043b\u0438 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0414\u043b\u044f \u044d\u0442\u0438\u0445 \u0446\u0435\u043b\u0435\u0439 \u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0442\u0435\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u0430\u0448\u0438\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438.</p>"},{"location":"ru/getting_started/10_settings/#pydantic-settings","title":"Pydantic <code>Settings</code>","text":"<p>\u041a \u0441\u0447\u0430\u0441\u0442\u044c\u044e, Pydantic \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a Pydantic: Settings management.</p>"},{"location":"ru/getting_started/10_settings/#install-pydantic-settings","title":"Install <code>pydantic-settings</code>","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 <code>pydantic-settings</code>:</p> <pre><code>$ pip install pydantic-settings\n---&gt; 100%\n</code></pre> <p>Info</p> <p>\u0412 Pydantic v1 \u044d\u0442\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0432 \u0441\u043e\u0441\u0442\u0430\u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430. \u041d\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u043e\u043d\u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u043a\u0435\u0442, \u0442\u0430\u043a \u0447\u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c, \u043d\u0443\u0436\u043d\u0430 \u0432\u0430\u043c \u044d\u0442\u0430 \u0444\u0443\u043d\u043a\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u043b\u0438 \u043d\u0435\u0442.</p>"},{"location":"ru/getting_started/10_settings/#settings","title":"\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Settings</code>","text":"<p>\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 <code>BaseSettings</code> \u0438\u0437 Pydantic \u0438 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0435\u0433\u043e \u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u0430, \u0442\u0430\u043a\u0436\u0435 \u043a\u0430\u043a \u0432\u044b \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u0434\u043b\u044f Pydantic BaseModel.</p> <p>\u0422\u043e\u0447\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043a\u043b\u0430\u0441\u0441\u0430 \u0441 \u0438\u0445 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435 \u0436\u0435 \u0441\u0430\u043c\u044b\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438, \u0447\u0442\u043e \u0438 \u0434\u043b\u044f Pydantic \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>Field()</code>.</p> Pydantic v2Pydantic v1 config.py<pre><code>from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    url: str = \"\"\n    queue: str = \"test-queue\"\n\nsettings = Settings()\n</code></pre> <p>Info</p> <p>\u0412 Pydantic v1 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c <code>BaseSettings</code> \u043f\u0440\u044f\u043c\u043e \u0438\u0437 <code>pydantic</code> \u0432\u043c\u0435\u0441\u0442\u043e <code>pydantic_settings</code>.</p> config.py<pre><code>from pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    url: str = \"\"\n    queue: str = \"test-queue\"\n\nsettings = Settings()\n</code></pre> <p>\u0417\u0430\u0442\u0435\u043c, \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 <code>Settings</code>, Pydantic \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f (\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e), \u0442\u0430\u043a \u0447\u0442\u043e, \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432\u0440\u043e\u0434\u0435 <code>APP_NAME</code> \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\u044b \u043a\u0430\u043a \u043f\u043e\u043b\u0435 <code>app_name</code> \u0432\u0430\u0448\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430.</p> <p>\u0417\u0430\u0442\u0435\u043c Pydantic \u043f\u0440\u043e\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0430\u0448\u0438 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043a \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0432 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 <code>Settins</code> \u0442\u0438\u043f\u0443.</p>"},{"location":"ru/getting_started/10_settings/#settings_1","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>settings</code>","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 <code>settings</code> \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438:</p> serve.py<pre><code>from propan import PropanApp\nfrom propan.rabbit import RabbitBroker\n\nfrom config import setting\n\nbroker = RabbitBroker(settings.url)\napp = PropanApp(broker)\n\n@broker.handle(settings.queue)\nasync def handler(msg):\n    ...\n</code></pre>"},{"location":"ru/getting_started/10_settings/#_2","title":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 <code>URL</code>:</p> <pre><code>$ URL=\"amqp://guest:guest@localhost:5672\" propan run serve:app\n</code></pre> <p>Tip</p> <p>\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0439 \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0438\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c \u0438 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u0434 \u0441\u0430\u043c\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.</p>"},{"location":"ru/getting_started/10_settings/#env","title":"\u0427\u0442\u0435\u043d\u0438\u0435 <code>.env</code> \u0444\u0430\u0439\u043b\u0430","text":"<p>\u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c, \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0439, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0445 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430.</p> <p>\u042d\u0442\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0430: \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b <code>.env</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u044f\u0442\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c \"dotenv\".</p> <p>Tip</p> <p>\u0424\u0430\u0439\u043b\u044b, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441 \u0442\u043e\u0447\u043a\u0438 (<code>.</code>) \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u043a\u0440\u044b\u0442\u044b\u043c\u0438 \u0432 Unix \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 Linux \u0438 macOS.</p> <p>\u041d\u043e \"dotenv\" \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0442\u0430\u043a\u043e\u0435 \u0438\u043c\u044f.</p> <p>Pydantic \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0447\u0442\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0438\u0437 \u0442\u0430\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 python-dotenv. \u041c\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0431 \u044d\u0442\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 Pydantic Settings: Dotenv (.env) support.</p> <p>Tip</p> <p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 <code>pip install python-dotenv</code>.</p>"},{"location":"ru/getting_started/10_settings/#env_1","title":"\u0424\u0430\u0439\u043b <code>.env</code>","text":"<p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c \u0444\u0430\u0439\u043b <code>.env</code> \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f:</p> <pre><code>URL=\"amqp://guest:guest@localhost:5672\"\nQUEUE=\"test-queue\"\n</code></pre>"},{"location":"ru/getting_started/10_settings/#env_2","title":"\u0427\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 <code>.env</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u0432\u0430\u0448 <code>config.py</code> \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>import os\n\nclass Settings(BaseSettings):\n    url: str\n    queue: str = \"test-queue\"\n\nsettings = Settings(_env_file=os.getenv(\"ENV\", \".env\"))\n</code></pre> <p>\u0422\u0430\u043a \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u0438\u043c\u0435\u043d\u043d\u043e <code>.env</code> \u0444\u0430\u0439\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u0432\u0430\u0448\u0435\u0433\u043e \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u043f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u043b\u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u0435\u043d\u0435.</p> <p>Note</p> <p>\u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 Pydantic \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 <code>.env</code> \u0444\u0430\u0439\u043b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043d\u043e \u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0435\u0442, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u043d\u0435\u0442. Pydantic \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u0448\u0438\u0445 \u043f\u043e\u043b\u0435\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.</p>"},{"location":"ru/getting_started/10_settings/#env-file-at-start","title":"\u0412\u0430\u0431\u043e\u0440 <code>.env</code> file at start","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u043f\u0440\u044f\u043c\u043e \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>$ ENV=.local.env propan run serve:app\n</code></pre> <p>\u0418\u043b\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u0435\u043d\u0430</p> <pre><code>$ ENV=.production.env propan run serve:app\n</code></pre> <p>\u0418\u043b\u0438 \u0434\u0430\u0436\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435</p> <pre><code>$ ENV=.test.env pytest\n</code></pre> &lt;/div"},{"location":"ru/getting_started/1_quick-start/","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0444\u0440\u0435\u0439\u043c\u043e\u0440\u043a \u0447\u0435\u0440\u0435\u0437 <code>pip</code>:</p> RedisRabbitMQKafkaSQSNATS <p> <pre><code>$ pip install \"propan[async-redis]\"\n---&gt; 100%\n</code></pre> </p> <p>Tip</p> <p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c <pre><code>docker run -d --rm -p 6379:6379 --name test-mq redis\n</code></pre></p> <p> <pre><code>$ pip install \"propan[async-rabbit]\"\n---&gt; 100%\n</code></pre> </p> <p>Tip</p> <p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c <pre><code>docker run -d --rm -p 5672:5672 --name test-mq rabbitmq\n</code></pre></p> <p> <pre><code>$ pip install \"propan[async-kafka]\"\n---&gt; 100%\n</code></pre> </p> <p>Tip</p> <p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c <pre><code>docker run -d --rm -p 9092:9092 --name test-mq \\\n-e KAFKA_ENABLE_KRAFT=yes \\\n-e KAFKA_CFG_NODE_ID=1 \\\n-e KAFKA_CFG_PROCESS_ROLES=broker,controller \\\n-e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER \\\n-e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093 \\\n-e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT \\\n-e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092 \\\n-e KAFKA_BROKER_ID=1 \\\n-e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093 \\\n-e ALLOW_PLAINTEXT_LISTENER=yes \\\nbitnami/kafka\n</code></pre></p> <p> <pre><code>$ pip install \"propan[async-sqs]\"\n---&gt; 100%\n</code></pre> </p> <p>Tip</p> <p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c <pre><code>docker run -d --rm -p 9324:9324 --name test-mq softwaremill/elasticmq-native\n</code></pre></p> <p> <pre><code>$ pip install \"propan[async-nats]\"\n---&gt; 100%\n</code></pre> </p> <p>Tip</p> <p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c <pre><code>docker run -d --rm -p 4222:4222 --name test-mq nats -js\n</code></pre></p>"},{"location":"ru/getting_started/1_quick-start/#_2","title":"\u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043a\u043e\u0434\u043e\u043c \u0432 <code>serve.py</code> \u0444\u0430\u0439\u043b\u0435:</p> RedisRabbitMQKafkaSQSNATS serve.py<pre><code>from propan import PropanApp, RedisBroker\n\nbroker = RedisBroker(\"redis://localhost:6379\")\n\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n</code></pre> serve.py<pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n</code></pre> serve.py<pre><code>from propan import PropanApp, KafkaBroker\n\nbroker = KafkaBroker(\"localhost:9092\")\n\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n</code></pre> serve.py<pre><code>from botocore import UNSIGNED\nfrom aiobotocore.config import AioConfig\nfrom propan import PropanApp, SQSBroker\n\nbroker = SQSBroker(\n    url=\"http://localhost:9324\",\n    region_name=\"us-west-2\",\n    config = AioConfig(signature_version=UNSIGNED)\n)\n\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n</code></pre> serve.py<pre><code>from propan import PropanApp, NatsBroker\n\nbroker = NatsBroker(\"nats://localhost:4222\")\n\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n</code></pre> <p>\u0418 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0435\u0433\u043e:</p> <pre><code>$ propan run serve:app\n\n2023-04-10 23:39:41,145 INFO     - Propan app starting...\n2023-04-10 23:39:41,151 INFO     - `base_handler` waiting for messages\n2023-04-10 23:39:41,152 INFO     - Propan app started successfully! To exit press CTRL+C\n</code></pre>"},{"location":"ru/getting_started/1_quick-start/#_3","title":"\u0413\u043e\u0442\u043e\u0432\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u044b\u0439 \u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0448\u0430\u0431\u043b\u043e\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Propan CLI:</p> <pre><code>$ propan create async [broker] [projectname]\nCreate Propan project template at: /home/user/projectname\n</code></pre> <p>Note</p> <p>\u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430, \u0448\u0430\u0431\u043b\u043e\u043d \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 <code>pydantic[dotenv]</code></p> <p>\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442</p> <pre><code>### Run rabbimq first\n$ docker compose --file [projectname]/docker-compose.yaml up -d [broker]\n\n### Run project\n$ propan run [projectname].app.serve:app --env=.env --reload\n\n2023-04-10 23:39:41,140 INFO     - Started reloader process [115536] using WatchFiles\n2023-04-10 23:39:41,145 INFO     - Propan app starting...\n2023-04-10 23:39:41,151 INFO     - `base_handler` waiting for messages\n2023-04-10 23:39:41,152 INFO     - Propan app started successfully! To exit press CTRL+C\n</code></pre> <p>\u041d\u0430\u0441\u043b\u0430\u0436\u0434\u0430\u0439\u0442\u0435\u0441\u044c \u043d\u043e\u0432\u044b\u043c \u043e\u043f\u044b\u0442\u043e\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438!</p> \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 <pre><code>docker container stop test-mq\n</code></pre>"},{"location":"ru/getting_started/2_cli/","title":"CLI","text":"<p>Propan \u0438\u043c\u0435\u0435\u0442 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 CLI \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u0444\u043e\u0440\u0442\u0430 \u043a\u0430\u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.</p> <p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e typer \u0438 watchfiles. \u0418\u0445 \u0442\u0440\u0443\u0434 \u043b\u0435\u0436\u0438\u0442 \u0432 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430.</p> <pre><code>$ propan --help\n\nUsage: propan [OPTIONS] COMMAND [ARGS]...\n\n  Generate, run and manage Propan apps to greater development experience\n\nOptions:\n  --version             Show current platform, python and propan version\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create  Create a new Propan project at [APPNAME] directory\n  run     Run [MODULE:APP] Propan application\n</code></pre>"},{"location":"ru/getting_started/2_cli/#_1","title":"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043d\u0430\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0435 \"\u0441 \u0447\u0438\u0441\u0442\u043e\u0433\u043e \u043b\u0438\u0441\u0442\u0430\", \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d Propan</p> <pre><code>$ propan create async rabbit app\n\nCreate Propan project template at: ./app\n</code></pre> <p>\u0428\u0430\u0431\u043b\u043e\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f:</p> <ul> <li>\u043f\u0440\u043e\u0441\u0442\u043e\u0439, \u043d\u043e \u0440\u0430\u0431\u043e\u0447\u0438\u0439 Dockerfile</li> <li>docker-compose.yml, \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438</li> <li>\u043f\u0440\u043e\u0435\u043a\u0442, \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f pydantic \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f</li> </ul>"},{"location":"ru/getting_started/2_cli/#_2","title":"\u041f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f watchfiles, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u043c\u0443 \u043d\u0430 Rust, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435  \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e \u0441\u0432\u043e\u0438\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u043b\u0435\u0433\u043a\u043e \u0438 \u043d\u0435\u043f\u0440\u0438\u043d\u0443\u0436\u0434\u0435\u043d\u043d\u043e. \u041f\u0440\u0430\u0432\u044c\u0442\u0435 \u043a\u043e\u0434 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0443\u0448\u0435 \u0443\u0433\u043e\u0434\u043d\u043e - \u043d\u043e\u0432\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0443\u0436\u0435 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430 \u0438 \u0436\u0434\u0435\u0442 \u0432\u0430\u0448\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432!</p> <pre><code>$ propan run app.app.serve:app --reload\n\n2023-04-10 23:39:41,140 INFO     - Started reloader process [115536] using WatchFiles\n2023-04-10 23:39:41,145 INFO     - Propan app starting...\n2023-04-10 23:39:41,151 INFO     - `base_handler` waiting for messages\n2023-04-10 23:39:41,152 INFO     - Propan app started successfully! To exit press CTRL+C\n</code></pre>"},{"location":"ru/getting_started/2_cli/#_3","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\u043c","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0444\u043b\u0430\u0433\u0438 \u0438 \u043e\u043f\u0446\u0438\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432 Propan CLI \u0434\u0430\u0436\u0435 \u0431\u0435\u0437 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u041f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0438\u0445 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f - \u0438 \u043e\u043d\u0438 \u043e\u043a\u0430\u0436\u0443\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u043e \u0432 \u0432\u0430\u0448\u0435\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438.</p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u0443 \u043e\u043f\u0446\u0438\u044e \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435.</p> <p>\u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0434\u0438\u043c \u0444\u0430\u0439\u043b .env \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>$ propan run serve:app --env=.env.dev\n\n2023-04-10 23:39:41,145 INFO     - Propan app starting...\n2023-04-10 23:39:41,151 INFO     - `base_handler` waiting for messages\n2023-04-10 23:39:41,152 INFO     - Propan app started successfully! To exit press CTRL+C\n</code></pre> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = RedisBroker()\n\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"redis://localhost:6379\"\n\n@app.on_startup\nasync def setup(env: str, context: ContextRepo):\n    settings = Settings(_env_file=env)\n    await broker.connect(settings.host)\n    context.set_global(\"settings\", settings)\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = RabbitBroker()\n\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"amqp://guest:guest@localhost:5672/\"\n\n@app.on_startup\nasync def setup(env: str, context: ContextRepo):\n    settings = Settings(_env_file=env)\n    await broker.connect(settings.host)\n    context.set_global(\"settings\", settings)\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = KafkaBroker()\n\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"localhost:9092\"\n\n@app.on_startup\nasync def setup(env: str, context: ContextRepo):\n    settings = Settings(_env_file=env)\n    await broker.connect(settings.host)\n    context.set_global(\"settings\", settings)\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = SQSBroker()\n\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"http://localhost:9324\"\n\n@app.on_startup\nasync def setup(env: str, context: ContextRepo):\n    settings = Settings(_env_file=env)\n    await broker.connect(settings.host)\n    context.set_global(\"settings\", settings)\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = NatsBroker()\n\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"nats://localhost:4222\"\n\n@app.on_startup\nasync def setup(env: str, context: ContextRepo):\n    settings = Settings(_env_file=env)\n    await broker.connect(settings.host)\n    context.set_global(\"settings\", settings)\n</code></pre> <p>Note</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>env</code> \u0431\u044b\u043b \u043f\u0435\u0440\u0435\u0434\u0430\u043d \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>setup</code> \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438</p> <p>\u0412\u0441\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0442\u0438\u043f\u0430 <code>bool</code>, <code>str</code> \u0438\u043b\u0438 <code>list[str]</code>.</p> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0444\u043b\u0430\u0433\u0438 \u0431\u0443\u0434\u0443\u0442 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <p><pre><code>$ propan run app:app --flag       # flag = True\n$ propan run app:app --no-flag    # flag = False\n$ propan run app:app --my-flag    # my_flag = True\n$ propan run app:app --key value  # key = \"value\"\n$ propan run app:app --key 1 2    # key = [\"1\", \"2\"]\n</code></pre> \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u043a\u0430\u043a \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0442\u0430\u043a \u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0432 \u043d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435.</p>"},{"location":"ru/getting_started/3_app/","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 PropanApp","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Propan CLI, \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</p> <pre><code>from propan import PropanApp\napp = PropanApp()\n</code></pre> <p>Tip</p> <p>\u041f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 <code>PropanApp</code> \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0435\u0431\u044f \u0432 <code>ContextRepo</code> \u043f\u043e\u0434 \u0438\u043c\u0435\u043d\u0435\u043c <code>\"app\"</code>, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a \u043d\u0435\u043c\u0443 \u0434\u043e\u0441\u0442\u0443\u043f \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.</p>"},{"location":"ru/getting_started/3_app/#_1","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432","text":"<p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b <code>PropanApp</code> \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0435\u0433\u043e \u0432 \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>\u041e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker\n\nbroker = RedisBroker(\"redis://localhost:6379\")\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker\n\nbroker = KafkaBroker(\"localhost:9092\")\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker\n\nbroker = SQSBroker(\"http://localhost:9324\", ...)\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker\n\nbroker = NatsBroker(\"nats://localhost:4222\")\napp = PropanApp(broker)\n</code></pre> <p>\u041d\u043e, \u0438\u043d\u043e\u0433\u0434\u0430 \u0432\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043c\u0435\u0441\u0442\u0435. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 <code>app.set_broker</code></p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker\n\napp = PropanApp()\n\n@app.on_startup\ndef init_broker():\n    broker = RedisBroker(\"redis://localhost:6379\")\n    app.set_broker(broker)\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker\n\napp = PropanApp()\n\n@app.on_startup\ndef init_broker():\n    broker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n    app.set_broker(broker)\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker\n\napp = PropanApp()\n\n@app.on_startup\ndef init_broker():\n    broker = KafkaBroker(\"localhost:9092\")\n    app.set_broker(broker)\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker\n\napp = PropanApp()\n\n@app.on_startup\ndef init_broker():\n    broker = SQSBroker(\"http://localhost:9324\", ...)\n    app.set_broker(broker)\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker\n\napp = PropanApp()\n\n@app.on_startup\ndef init_broker():\n    broker = NatsBroker(\"nats://localhost:4222\")\n    app.set_broker(broker)\n</code></pre>"},{"location":"ru/getting_started/3_app/#_2","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439","text":"<p>\u0415\u0441\u043b\u0438 \u0432 <code>PropanApp</code> \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u0440\u043e\u043a\u0435\u0440\u0430, \u0432\u0441\u0435 \u0435\u0449\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:</p> <ul> <li>\u0425\u0443\u043a\u0438 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430</li> <li>Hotreload \u043a\u043e\u0434\u0430</li> <li>Multiprocessing \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</li> </ul> <p>\u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043b\u044e\u0431\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b <code>start</code> \u0438 <code>close</code></p> <pre><code>class ABCBroker:\n    async def start(self) -&gt; None:\n        ...\n\n    async def close(self) -&gt; None:\n        ...\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u0448 \u043a\u043e\u0434 \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u0435\u0442 \u044d\u0442\u043e\u043c\u0443 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0443, PropanApp \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c.</p>"},{"location":"ru/getting_started/6_lifespans/","title":"LIFESPANS","text":"<p>\u0418\u043d\u043e\u0433\u0434\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d \u043e\u0434\u0438\u043d \u0440\u0430\u0437 - \u0435\u0449\u0435 \u0434\u043e \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430\u0447\u043d\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> <p>\u0422\u0430\u043a\u0436\u0435, \u0443 \u0432\u0430\u0441 \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u043f\u043e\u0441\u043b\u0435 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0432\u0430\u0448 \u043a\u043e\u0434 \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d \u0440\u043e\u0432\u043d\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437: \u043d\u043e \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0441\u043b\u0435 \u0435\u0433\u043e \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043e\u043d \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0432\u0435\u0441\u044c \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b (lifespan) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>\u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435, \u043f\u043e\u0434\u043d\u044f\u0442\u0438\u044f \u043f\u0443\u043b\u0430 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.</p>"},{"location":"ru/getting_started/6_lifespans/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c, \u0447\u0442\u043e \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 pydantic \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0432\u0430\u0448\u0438\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a.</p> <p>\u042f \u043a\u0440\u0430\u0439\u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c pydantic \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u0446\u0435\u043b\u0435\u0439, \u0442.\u043a. \u044d\u0442\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0443\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 Propan \u0438 \u0432\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u043a\u0435\u0442</p> <p>\u0422\u0430\u043a\u0436\u0435, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e <code>.env</code>, <code>.env.development</code>, <code>.env.test</code>, <code>.env.production</code> \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0438\u0445 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u0434\u0435.</p> <p>\u0417\u0430 \u0441\u0447\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0432\u0430\u0448 \u043a\u043e\u0434 Propan \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c.</p>"},{"location":"ru/getting_started/6_lifespans/#lifespan","title":"Lifespan","text":"<p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, SQSBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = SQSBroker()\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"http://localhost:9324\"\n\n@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"amqp://guest:guest@localhost:5672/\"\n\n@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = KafkaBroker()\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"localhost:9092\"\n\n@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>from propan import PropanApp, RedisBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = RedisBroker()\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"redis://localhost:6379\"\n\n@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker\nfrom propan.annotations import ContextRepo\nfrom pydantic_settings import BaseSettings\n\nbroker = NatsBroker()\napp = PropanApp(broker)\n\nclass Settings(BaseSettings):\n    host: str = \"nats://localhost:4222\"\n\n@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u044d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\u043c:</p> <pre><code>propan run serve:app --env .env.test\n</code></pre>"},{"location":"ru/getting_started/6_lifespans/#_2","title":"\u0414\u0435\u0442\u0430\u043b\u0438","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0435\u0435</p> <p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440</p> RedisRabbitMQKafkaSQSNATS <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <p>\u0434\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</p> <p>\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u043c\u044b \u043e\u0431\u044a\u044f\u0432\u0438\u043b\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u0430\u0448\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f</p> RedisRabbitMQKafkaSQSNATS <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u043e\u043b\u0435 <code>env</code> \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>setup</code> \u0438\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438</p> <p>Tip</p> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c <code>@apply_types</code>, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432 \u043d\u0438\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432\u0441\u0435 \u043f\u043e\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438</p> <p>\u0417\u0430\u0442\u0435\u043c, \u043c\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u043c \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0444\u0430\u0439\u043b\u0430</p> RedisRabbitMQKafkaSQSNATS <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <p>\u0418 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u043b\u0438 \u044d\u0442\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442</p> RedisRabbitMQKafkaSQSNATS <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> Note <p>\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043d\u0430\u0448\u0438\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c \u0432 \u043b\u044e\u0431\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430</p> <pre><code>from propan import Context, apply_types\n@apply_types\nasync def func(settings = Context()): ...\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u043c\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430: \u0442\u0435\u043f\u0435\u0440\u044c, \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0433\u043e\u0442\u043e\u0432 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</p> RedisRabbitMQKafkaSQSNATS <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre> <pre><code>@app.on_startup\nasync def setup(context: ContextRepo, env: str = \".env\"):\n    settings = Settings(_env_file=env)\n    context.set_global(\"settings\", settings)\n    await broker.connect(settings.host)\n</code></pre>"},{"location":"ru/getting_started/6_lifespans/#_3","title":"\u0414\u0440\u0443\u0433\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 \u043a\u0430\u043a\u043e\u0433\u043e-\u043b\u0438\u0431\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <p>\u041e\u0431\u044b\u0447\u043d\u0430 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u043a\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f. \u0420\u0430\u0437\u0443\u043c\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0430 \u043d\u0435 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u0433\u0434\u0435-\u0442\u043e \u0432\u0432\u0435\u0440\u0445\u0443 \u0432\u0430\u0448\u0435\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f/\u0444\u0430\u0439\u043b\u0430. \u041e\u0434\u043d\u0430\u043a\u043e, \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438. \u0412\u0440\u044f\u0434 \u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0432\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u043e\u0432...</p> <p>\u041f\u043e\u044d\u0442\u043e\u043c\u0443, \u0441\u0442\u043e\u0438\u0442 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u0445\u0443\u043a\u0435 <code>@app.on_startup</code>.</p> <p>\u0422\u0430\u043a\u0436\u0435, \u043c\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u043c, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u043a\u043e\u043d\u0447\u0438\u043b\u0430 \u0441\u0432\u043e\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e. \u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u044d\u0442\u043e\u0433\u043e, \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0445\u0443\u043a <code>@app.on_shutdown</code></p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, Context, RedisBroker\nfrom propan.annotations import ContextRepo\n\nbroker = RedisBroker(\"redis://localhost:6379\")\napp = PropanApp(broker)\n\nml_models = {}  # fake ML model\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n@app.on_startup\nasync def setup_model(context: ContextRepo):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    context.set_global(\"model\", ml_models)\n\n@app.on_shutdown\nasync def shutdown_model(model: dict = Context()):\n    # Clean up the ML models and release the resources\n    model.clear()\n\n@broker.handle(\"test\")\nasync def predict(x: float, model = Context()):\n    result = model[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <pre><code>from propan import PropanApp, Context, RabbitBroker\nfrom propan.annotations import ContextRepo\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\napp = PropanApp(broker)\n\nml_models = {}  # fake ML model\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n@app.on_startup\nasync def setup_model(context: ContextRepo):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    context.set_global(\"model\", ml_models)\n\n@app.on_shutdown\nasync def shutdown_model(model: dict = Context()):\n    # Clean up the ML models and release the resources\n    model.clear()\n\n@broker.handle(\"test\")\nasync def predict(x: float, model = Context()):\n    result = model[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <pre><code>from propan import PropanApp, Context, KafkaBroker\nfrom propan.annotations import ContextRepo\n\nbroker = KafkaBroker(\"localhost:9092\")\napp = PropanApp(broker)\n\nml_models = {}  # fake ML model\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n@app.on_startup\nasync def setup_model(context: ContextRepo):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    context.set_global(\"model\", ml_models)\n\n@app.on_shutdown\nasync def shutdown_model(model: dict = Context()):\n    # Clean up the ML models and release the resources\n    model.clear()\n\n@broker.handle(\"test\")\nasync def predict(x: float, model = Context()):\n    result = model[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <pre><code>from propan import PropanApp, Context, SQSBroker\nfrom propan.annotations import ContextRepo\n\nbroker = SQSBroker(\"http://localhost:9324\", ...)\napp = PropanApp(broker)\n\nml_models = {}  # fake ML model\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n@app.on_startup\nasync def setup_model(context: ContextRepo):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    context.set_global(\"model\", ml_models)\n\n@app.on_shutdown\nasync def shutdown_model(model: dict = Context()):\n    # Clean up the ML models and release the resources\n    model.clear()\n\n@broker.handle(\"test\")\nasync def predict(x: float, model = Context()):\n    result = model[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <pre><code>from propan import PropanApp, Context, NatsBroker\nfrom propan.annotations import ContextRepo\n\nbroker = NatsBroker(\"nats://localhost:4222\")\napp = PropanApp(broker)\n\nml_models = {}  # fake ML model\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n@app.on_startup\nasync def setup_model(context: ContextRepo):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    context.set_global(\"model\", ml_models)\n\n@app.on_shutdown\nasync def shutdown_model(model: dict = Context()):\n    # Clean up the ML models and release the resources\n    model.clear()\n\n@broker.handle(\"test\")\nasync def predict(x: float, model = Context()):\n    result = model[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre>"},{"location":"ru/getting_started/6_lifespans/#_4","title":"\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0445\u0443\u043a\u043e\u0432","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0445\u0443\u043a\u043e\u0432 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430, \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:</p> <pre><code>from propan import PropanApp, Context\nfrom propan.annotations import ContextRepo\n\napp = PropanApp()\n\n@app.on_startup\nasync def setup(context: ContextRepo):\n    context.set_global(\"field\", 1)\n\n@app.on_startup\nasync def setup_later(field: int = Context()):\n    assert field == 1\n</code></pre>"},{"location":"ru/getting_started/6_lifespans/#_5","title":"\u0415\u0449\u0435 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0434\u0435\u0442\u0430\u043b\u0435\u0439","text":""},{"location":"ru/getting_started/6_lifespans/#async-async","title":"Async \u0438\u043b\u0438 \u043d\u0435 async","text":"<p>\u0412 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0445\u0443\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435, \u0442\u0430\u043a \u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b. \u0412 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b.</p>"},{"location":"ru/getting_started/6_lifespans/#_6","title":"\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438","text":"<p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0432\u043e \u0432\u0441\u0435\u0445 <code>@app.on_startup</code> \u0445\u0443\u043a\u0430\u0445. \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0445 \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0430\u0441\u0442\u044f\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0435 \u0438\u0445 \u0432 <code>ContextRepo</code>.</p>"},{"location":"ru/getting_started/6_lifespans/#_7","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430","text":"<p>\u0425\u0443\u043a\u0438 <code>@app.on_startup</code> \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0414\u041e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c. \u0425\u0443\u043a\u0438 <code>@app.after_shutdown</code> \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u041f\u041e\u0421\u041b\u0415 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <p>\u0415\u0441\u043b\u0438 \u0436\u0435 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043e\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u041f\u041e\u0421\u041b\u0415 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430: \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0438 \u0442.\u0434., \u0432\u0430\u043c \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0445\u0443\u043a <code>@app.after_startup</code>.</p>"},{"location":"ru/getting_started/7_testing/","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e, \u043b\u0438\u0431\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 CI \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u0430, \u0432\u0430\u043c \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0413\u043e\u0440\u0430\u0437\u0434\u043e \u043f\u0440\u043e\u0449\u0435 \u0441\u0440\u0430\u0437\u0443 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432, \u0447\u0435\u043c \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 \u0432\u0430\u0448\u0438\u043c \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 CI \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u0430.</p> <p>\u0422\u0430\u043a\u0436\u0435, \u043e\u0442\u0441\u0442\u0443\u0441\u0442\u0432\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043b\u043e\u0436\u043d\u043e\u0433\u043e \u043f\u0430\u0434\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430, \u043b\u0438\u0431\u043e \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0440\u0430\u043d\u043d\u0438\u043c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435\u043c \u043a \u043d\u0435\u043c\u0443 (\u043a\u043e\u0433\u0434\u0430 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0435\u0449\u0435 \u043d\u0435 \u0433\u043e\u0442\u043e\u0432 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f).</p> <p>Note</p> <p>\u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e pytest, \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 pytest-asyncio \u0438\u043b\u0438 anyio</p>"},{"location":"ru/getting_started/7_testing/#_2","title":"\u041c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430","text":"<p>\u0421 \u044d\u0442\u043e\u0439 \u0446\u0435\u043b\u044c\u044e Propan \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \"\u0432 \u043f\u0430\u043c\u044f\u0442\u0438\", \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439.</p> <p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\u043c:</p> RedisRabbitMQKafkaSQSNATS main.py<pre><code>from propan import PropanApp, RedisBroker\n\nbroker = RedisBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n    if msg == \"ping\":\n        return \"pong\"\n    else:\n        return \"wrong\"\n\napp = PropanApp(broker)\n</code></pre> <p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0431\u0435\u0437 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 Redis \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>propan.test.TestRedisBroker</code>:</p> test_ping.py<pre><code>from propan.test import TestRedisBroker\n\nfrom main import broker\n\nasync def test_publish():\n    async with TestRedisBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> main.py<pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n    if msg == \"ping\":\n        return \"pong\"\n    else:\n        return \"wrong\"\n\napp = PropanApp(broker)\n</code></pre> <p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0431\u0435\u0437 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 RabbitMQ \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>propan.test.TestRabbitBroker</code>:</p> test_ping.py<pre><code>from propan.test import TestRabbitBroker\n\nfrom main import broker\n\nasync def test_publish():\n    async with TestRabbitBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> main.py<pre><code>from propan import PropanApp, KafkaBroker\n\nbroker = KafkaBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n    if msg == \"ping\":\n        return \"pong\"\n    else:\n        return \"wrong\"\n\napp = PropanApp(broker)\n</code></pre> <p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0431\u0435\u0437 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 Kafka \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>propan.test.TestKafkaBroker</code>:</p> test_ping.py<pre><code>from propan.test import TestKafkaBroker\n\nfrom main import broker\n\nasync def test_publish():\n    async with TestKafkaBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> main.py<pre><code>from propan import PropanApp, SQSBroker\n\nbroker = SQSBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n    if msg == \"ping\":\n        return \"pong\"\n    else:\n        return \"wrong\"\n\napp = PropanApp(broker)\n</code></pre> <p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0431\u0435\u0437 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 ElasticMQ \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>propan.test.TestSQSBroker</code>:</p> test_ping.py<pre><code>from propan.test import TestSQSBroker\n\nfrom main import broker\n\nasync def test_publish():\n    async with TestSQSBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> main.py<pre><code>from propan import PropanApp, NatsBroker\n\nbroker = NatsBroker()\n\n@broker.handler(\"ping\")\nasync def healthcheck(msg: str) -&gt; str:\n    if msg == \"ping\":\n        return \"pong\"\n    else:\n        return \"wrong\"\n\napp = PropanApp(broker)\n</code></pre> <p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0431\u0435\u0437 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 NATS \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>propan.test.TestNatsBroker</code>:</p> test_ping.py<pre><code>from propan.test import TestNatsBroker\n\nfrom main import broker\n\nasync def test_publish():\n    async with TestNatsBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <p>\u0410 \u0437\u0430\u0442\u0435\u043c \u043c\u044b \u0434\u0435\u043b\u0430\u0435\u0442 RPC \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:</p> RedisRabbitMQKafkaSQSNATS <pre><code>    async with TestRedisBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <pre><code>    async with TestRabbitBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <pre><code>    async with TestKafkaBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <pre><code>    async with TestSQSBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <pre><code>    async with TestNatsBroker(broker) as test_broker:\n        r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <p>Note</p> <p>\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 RPC \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0434\u0430\u0436\u0435 \u0443 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u0438\u0445 \u0432 \u043e\u0431\u044b\u0447\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.</p>"},{"location":"ru/getting_started/7_testing/#_3","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u043a\u0441\u0442\u0443\u0440","text":"<p>\u0412 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f:</p> RedisRabbitMQKafkaSQSNATS test_broker.py<pre><code>import pytest\nfrom propan.test import TestRedisBroker\n\nfrom main import broker\n\n@pytest.fixture()\nasync def test_broker():\n    async with TestRedisBroker(broker) as b:\n        yield b\n\nasync def test_publish(test_broker):\n    r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> test_broker.py<pre><code>import pytest\nfrom propan.test import TestRabbitBroker\n\nfrom main import broker\n\n@pytest.fixture()\nasync def test_broker():\n    async with TestRabbitBroker(broker) as b:\n        yield b\n\nasync def test_publish(test_broker):\n    r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> test_broker.py<pre><code>import pytest\nfrom propan.test import TestKafkaBroker\n\nfrom main import broker\n\n@pytest.fixture()\nasync def test_broker():\n    async with TestKafkaBroker(broker) as b:\n        yield b\n\nasync def test_publish(test_broker):\n    r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> test_broker.py<pre><code>import pytest\nfrom propan.test import TestSQSBroker\n\nfrom main import broker\n\n@pytest.fixture()\ndef test_broker():\n    async with TestSQSBroker(broker) as b:\n        yield b\n\nasync def test_publish(test_broker):\n    r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> test_broker.py<pre><code>import pytest\nfrom propan.test import TestNatsBroker\n\nfrom main import broker\n\n@pytest.fixture()\nasync def test_broker():\n    async with TestNatsBroker(broker) as b:\n        yield b\n\nasync def test_publish(test_broker):\n    r = await test_broker.publish(\"ping\", \"ping\", callback=True)\n    assert r == \"pong\"\n</code></pre> <p>Tip</p> <p>\u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0438\u043c\u0435\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043a: \u043e\u0448\u0438\u0431\u043a\u0438, \u0432\u043e\u0437\u043d\u0438\u043a\u0448\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u0445\u0432\u0430\u0447\u0435\u043d\u044b \u0432\u043d\u0443\u0442\u0440\u0438 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432.</p> <p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0442\u0435\u0441\u0442 \u0432\u0435\u0440\u043d\u0435\u0442 <code>None</code>, \u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 - \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0435\u0442 <code>pydantic.ValidationError</code>:</p> <pre><code>async def test_publish(test_broker):\n    r = await test_broker.publish(\n        {\"msg\": \"ping\"}, \"ping\",\n        callback=True, callback_timeout=1\n    )\n    assert r == None\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u0442\u0435\u0441\u0442 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 <code>callback_timeout</code> (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 30 \u0441\u0435\u043a\u0443\u043d\u0434), \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0434\u0440\u0430\u0436\u0430\u0442\u044c, \u043a\u043e\u0433\u0434\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u043e\u0448\u0438\u0431\u043a\u0438, \u0430 \u0432\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u043e\u0442\u0432\u0430\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0443 \u0441 <code>None</code>.</p>"},{"location":"ru/getting_started/7_testing/#_4","title":"\u041f\u0440\u044f\u043c\u043e\u0439 \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","text":"<p>Propan \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e: \u0442\u0430\u043a, \u043a\u0430\u043a \u0435\u0441\u043b\u0438 \u0431\u044b \u044d\u0442\u043e \u0431\u044b\u043b\u0438 \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.</p> <p>\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 <code>build_message</code> \u0442\u0430\u043a, \u0435\u0441\u043b\u0438 \u0431\u044b \u044d\u0442\u043e \u0431\u044b\u043b <code>publish</code> (\u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442), \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u044d\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0432\u0430\u0448 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.</p> RedisRabbitMQKafkaSQSNATS test_ping.py<pre><code>from propan.test.redis import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message(\"ping\", \"ping\")\n    assert (await healthcheck(msg)) == \"pong\"\n</code></pre> test_ping.py<pre><code>from propan.test.rabbit import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message(\"ping\", \"ping\")\n    assert (await healthcheck(msg)) == \"pong\"\n</code></pre> test_ping.py<pre><code>from propan.test.kafka import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message(\"ping\", \"ping\")\n    assert (await healthcheck(msg)) == \"pong\"\n</code></pre> test_ping.py<pre><code>from propan.test.sqs import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message(\"ping\", \"ping\")\n    assert (await healthcheck(msg)) == \"pong\"\n</code></pre> test_ping.py<pre><code>from propan.test.nats import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message(\"ping\", \"ping\")\n    assert (await healthcheck(msg)) == \"pong\"\n</code></pre> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u043b\u0430\u0433 <code>reraise_exc=True</code> \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435:</p> RedisRabbitMQKafkaSQSNATS test_ping.py<pre><code>import pytest\nimport pydantic\nfrom propan.test.redis import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message({ \"msg\": \"ping\" }, \"ping\")\n    with pytest.raises(pydantic.ValidationError):\n        await healthcheck(msg, reraise_exc=True)\n</code></pre> test_ping.py<pre><code>import pytest\nimport pydantic\nfrom propan.test.rabbit import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message({ \"msg\": \"ping\" }, \"ping\")\n    with pytest.raises(pydantic.ValidationError):\n        await healthcheck(msg, reraise_exc=True)\n</code></pre> test_ping.py<pre><code>import pytest\nimport pydantic\nfrom propan.test.kafka import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message({ \"msg\": \"ping\" }, \"ping\")\n    with pytest.raises(pydantic.ValidationError):\n        await healthcheck(msg, reraise_exc=True)\n</code></pre> test_ping.py<pre><code>import pytest\nimport pydantic\nfrom propan.test.sqs import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message({ \"msg\": \"ping\" }, \"ping\")\n    with pytest.raises(pydantic.ValidationError):\n        await healthcheck(msg, reraise_exc=True)\n</code></pre> test_ping.py<pre><code>import pytest\nimport pydantic\nfrom propan.test.nats import build_message\n\nfrom main import healthcheck\n\nasync def test_publish(test_broker):\n    msg = build_message({ \"msg\": \"ping\" }, \"ping\")\n    with pytest.raises(pydantic.ValidationError):\n        await healthcheck(msg, reraise_exc=True)\n</code></pre> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, Propan \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u043f\u043e\u043b\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0430\u0448\u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432: \u043e\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 RPC \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0434\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u043b\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439.</p>"},{"location":"ru/getting_started/8_logging/","title":"LOGGING","text":"<p>Propan \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f 2 \u0437\u0430\u0440\u0430\u043d\u043d\u0435\u0435 \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043b\u043e\u0433\u0435\u0440\u0430:</p> <ul> <li><code>propan</code> - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f PropanApp</li> <li><code>propan.access</code> - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c</li> </ul>"},{"location":"ru/getting_started/8_logging/#_1","title":"\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":"<p>\u0414\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>access_logger</code> \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430, \u0442.\u043a. \u043e\u043d \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0447\u0435\u0440\u0435\u0437 Context \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <pre><code>from propan import RabbitBroker\nfrom propan.annotations import Logger\n\nbroker = RabbitBroker()\n\n@broker.handle(\"test\")\nasync def func(logger: Logger):\n    logger.info(\"message received\")\n</code></pre> <p>\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043d\u0435\u0441\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432:</p> <ul> <li>\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043b\u043e\u0433\u0435\u0440 \u0443\u0436\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430: \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f</li> <li>\u0437\u0430\u043c\u0435\u043d\u0438\u0432 <code>logger</code> \u043f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0432\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u0432\u0441\u0435 \u043b\u043e\u0433\u0435\u0440\u044b \u0432\u043d\u0443\u0442\u0440\u0438 \u0432\u0430\u0448\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439</li> </ul>"},{"location":"ru/getting_started/8_logging/#_2","title":"\u0423\u0440\u043e\u0432\u043d\u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Propan CLI, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.</p> <p>\u0424\u043b\u0430\u0433 <code>--log-level</code> \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u043a \u0434\u043b\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f PropanApp. \u0422\u0430\u043a \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0443\u0440\u043e\u0432\u043d\u0438 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043b\u043e\u0433\u0435\u0440\u043e\u0432, \u043d\u043e \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445, \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0438\u0445 \u0432\u043d\u0443\u0442\u0440\u0438 Propan</p> <pre><code>$ propan run serve:app --log-level debug\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0436\u0435 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 <code>Propan</code>, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c <code>logger=None</code></p> <pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker(logger=None)    # \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043b\u043e\u0433\u0438 broker'\u0430\napp = PropanApp(broker, logger=None)  # \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043b\u043e\u0433\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n</code></pre> <p>Warning</p> <p>\u0411\u0443\u0434\u044c\u0442\u0435 \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u044b: <code>logger</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>None</code>, \u0435\u0441\u043b\u0438 \u0432\u044b \u0432\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430</p> <p>\u0415\u0441\u043b\u0438 \u0436\u0435 \u0432\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u0442\u0435\u0440\u044f\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a <code>logger</code>'\u0443 \u0432\u043d\u0443\u0442\u0440\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430, \u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043b\u043e\u0433\u043e\u0432 Propan, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043d\u0438\u0437\u0438\u0442\u044c \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0435\u0442 \u0441\u0430\u043c \u0431\u0440\u043e\u043a\u0435\u0440.</p> <pre><code>import logging\nfrom propan import PropanApp, RabbitBroker\n\n# \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u043d\u0430 \u0443\u0440\u043e\u0432\u0435\u043d\u044c DEBUG\nbroker = RabbitBroker(log_level=logging.DEBUG)\n</code></pre>"},{"location":"ru/getting_started/8_logging/#_3","title":"\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0433\u043e\u0432","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u0430\u0441 \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u043e\u0432 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0433\u043e \u043f\u0440\u044f\u043c\u043e \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430</p> <pre><code>from propan import PropanApp, RabbitBroker\nbroker = RabbitBroker(log_fmt=\"%(asctime)s %(levelname)s - %(message)s\")\n</code></pre>"},{"location":"ru/getting_started/8_logging/#_4","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043b\u043e\u0433\u0435\u0440\u043e\u0432","text":"<p>\u0422\u0430\u043a \u043a\u0430\u043a Propan \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c <code>logging.Logger</code>, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0435\u0440\u0430</p> <pre><code>import logging\nfrom propan import PropanApp, RabbitBroker\n\nlogger = logging.getLogger(\"my_logger\")\n\nbroker = RabbitBroker(logger=logger)\napp = PropanApp(broker, logger=logger)\n</code></pre> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u044b \u043f\u043e\u0442\u0435\u0440\u044f\u0435\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u041e\u0434\u043d\u0430\u043a\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0435 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043b\u044e\u0431\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043a\u043e\u0434\u0430:</p> <pre><code>from propan import context\nlog_context: dict[str, str] = context.get_local(\"log_context\")\n</code></pre>"},{"location":"ru/getting_started/8_logging/#logger","title":"\u0414\u043e\u0441\u0442\u0443\u043f \u043a logger","text":"<p>\u0415\u0441\u043b\u0438 \u0436\u0435 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043b\u043e\u0433\u0435\u0440\u043e\u0432, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043d\u0438\u043c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0447\u0435\u0440\u0435\u0437 <code>logging</code>:</p> <p><pre><code>import logging\nlogger = logging.getLogger(\"propan\")\naccess_logger = logging.getLogger(\"propan.access\")\n</code></pre> \u0418\u043b\u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u044f \u0438\u0445 \u0438\u0437 Propan</p> <pre><code>from propan.log import access_logger, logger\n</code></pre>"},{"location":"ru/getting_started/9_documentation/","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>Propan \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u043d\u0435 \u0434\u0443\u043c\u0430\u0442\u044c \u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - \u043e\u043d\u0430 \u0443\u0436\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0438\u0438 \u0441\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 AsyncAPI!</p> <p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438:</p> <pre><code>pip install \"propan[doc]\"\n</code></pre>"},{"location":"ru/getting_started/9_documentation/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.</p> <p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f:</p> <pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.brokers.rabbit import RabbitQueue, RabbitExchange, ExchangeType\n\nbroker = RabbitBroker()\napp = PropanApp(\n    broker=broker,\n    title=\"Smartylighting Streetlights Propan API\",\n    version=\"1.0.0\",\n    description=\"\"\"\n    The Smartylighting Streetlights API.\n    ### Check out its awesome features:\n    * Turn a specific streetlight on/off \ud83c\udf03\n    * Receive real-time information about environmental \ud83d\udcc8\n    \"\"\"\n)\n\n@broker.handle(\n    queue=RabbitQueue(\"*.info\", durable=True),\n    exchange=RabbitExchange(\"logs\", durable=True, type=ExchangeType.TOPIC)\n)\nasync def handle_logs(level: int, message: str = \"\"):\n    \"\"\"Handle all environmental events\"\"\"\n    ...\n</code></pre>"},{"location":"ru/getting_started/9_documentation/#yaml","title":"YAML \u0441\u0445\u0435\u043c\u0430","text":"<p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c AsyncAPI \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>.yaml</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443:</p> <pre><code>$ propan docs gen example:app\n\nYour project AsyncAPI scheme was placed to `./asyncapi.yaml`\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u0445\u0435\u043c\u0430 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430: \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0435 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u043b\u044e\u0431\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u044e\u0449\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 AsyncAPI</p> Asyncapi.yaml <pre><code>asyncapi: 2.6.0\ndefaultContentType: application/json\ninfo:\n  title: Smartylighting Streetlights Propan API\n  version: 1.0.0\n  description: \"\\n    The Smartylighting Streetlights API.\\n    ### Check out its\\\n    \\ awesome features:\\n    * Turn a specific streetlight on/off \\U0001F303\\n   \\\n    \\ * Receive real-time information about environmental \\U0001F4C8\\n    \"\nservers:\n  dev:\n    url: amqp://guest:guest@localhost:5672/\n    protocol: amqp\n    protocolVersion: 0.9.1\nchannels:\n  HandleLogs:\n    servers:\n    - dev\n    bindings:\n      amqp:\n        is: routingKey\n        bindingVersion: 0.2.0\n        queue:\n          name: '*.info'\n          durable: true\n          exclusive: false\n          autoDelete: false\n          vhost: /\n        exchange:\n          name: logs\n          type: topic\n          durable: true\n          autoDelete: false\n          vhost: /\n    subscribe:\n      description: Handle all environmental events\n      bindings:\n        amqp:\n          cc: '*.info'\n          ack: true\n          bindingVersion: 0.2.0\n      message:\n        $ref: '#/components/messages/HandleLogsMessage'\ncomponents:\n  messages:\n    HandleLogsMessage:\n      title: HandleLogsMessage\n      correlationId:\n        location: $message.header#/correlation_id\n      payload:\n        $ref: '#/components/schemas/HandleLogsPayload'\n  schemas:\n    HandleLogsPayload:\n      title: HandleLogsPayload\n      type: object\n      properties:\n        level:\n          title: Level\n          type: integer\n        message:\n          title: Message\n          default: ''\n          type: string\n      required:\n      - level\n      example:\n        level: 4015\n        message: evwWheCeRIGhHEHYxKSJ\n</code></pre>"},{"location":"ru/getting_started/9_documentation/#_3","title":"\u041e\u043d\u043b\u0430\u0439\u043d \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<p>\u0422\u0430\u043a\u0436\u0435, Propan \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c HTML-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439</p> <p>\u041e\u043d\u043b\u0430\u0439\u043d \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u0435\u0437 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f, \u0442\u0430\u043a \u043a\u0430\u043a \u0434\u043b\u044f \u0435\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f CDN \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.</p> <pre><code>$ propan docs serve example:app\n</code></pre> <p>\u0422\u0430\u043a \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432\u0441\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u043d\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443.</p> HTML page <p></p> <p>Tip</p> <p>Propan \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0445\u043e\u0441\u0442\u0438\u0442\u044c <code>asyncapi.yaml</code> \u0444\u0430\u0439\u043b\u044b.</p> <p><pre><code>propan docs serve asyncapi.yaml\n</code></pre> \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e AsyncAPI \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e: \u0432\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b, \u0434\u043e\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0435 \u0435\u0433\u043e \u0438 \u0445\u043e\u0441\u0442\u0438\u0442\u0435!</p> <p>\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043e\u043d\u043b\u0430\u0439\u043d \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0435\u0435 \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043f\u0443\u0442\u044f\u043c:</p> <ul> <li><code>/asyncapi.json</code> - JSON \u0441\u0445\u0435\u043c\u0430 (\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u043f\u0440\u0438 \u0445\u043e\u0441\u0442\u0438\u043d\u0433\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f)</li> <li><code>/asyncapi.yaml</code> - YAML \u0441\u0445\u0435\u043c\u0430 (\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043a\u0430\u043a \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430)</li> </ul>"},{"location":"ru/getting_started/9_documentation/#fastapi-plugin","title":"FastAPI Plugin","text":"<p>\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 Propan \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0434\u043b\u044f FastAPI, \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0445\u043e\u0441\u0442\u0438\u043d\u0433\u0430 AsyncAPI \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432 \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:</p> <pre><code>from propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\n    schema_url=\"/asyncapi\",\n    include_in_schema=True,\n)\n</code></pre>"},{"location":"ru/getting_started/9_documentation/#_4","title":"\u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0445\u043e\u0441\u0442\u0438\u043d\u0433","text":"<p>\u0414\u043b\u044f \u0445\u043e\u0441\u0442\u0438\u043d\u0433\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043e\u043d\u043b\u0430\u0439\u043d Propan \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 FastAPI + uvicorn. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u044b \u0437\u0430\u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u043f\u043e\u043a\u0430\u0437\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438: \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430, \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u0432 \u0437\u0430\u0438\u0432\u0438\u0441\u043c\u043e\u0442\u0438 \u043e\u0442 \u043f\u0440\u0430\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430, \u0432\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0432 \u0441\u0432\u043e\u0435 frontend-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u0442\u0434. \u0414\u043b\u044f \u044d\u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c <code>json</code>/<code>yaml</code>/<code>html</code> \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u0435.</p> <pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.asyncapi.main import AsyncAPISchema\nfrom propan.cli.docs.gen import gen_app_schema_json, gen_app_schema_yaml, get_app_schema\nfrom propan.cli.docs.serving import get_asyncapi_html\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nschema: AsyncAPISchema = get_app_schema(app)\njson_schema = gen_app_schema_json(app)\nyaml_schema = gen_app_schema_yaml(app)\nhtml = get_asyncapi_html(yaml_schema)\n</code></pre>"},{"location":"ru/getting_started/4_broker/1_index/#_1","title":"\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439","text":"<p>Propan \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import RedisBroker\n</code></pre> <pre><code>from propan import RabbitBroker\n</code></pre> <pre><code>from propan import KafkaBroker\n</code></pre> <pre><code>from propan import SQSBroker\n</code></pre> <pre><code>from propan import NatsBroker\n</code></pre> <p>\u0411\u0443\u0434\u044c\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435! \u0420\u0430\u0437\u043d\u044b\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u044b \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438 \u044d\u0442\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0431\u0440\u043e\u043a\u0435\u0440 \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>None</code>.</p> <p>\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 Propan \u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438, \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438</p> RedisRabbitMQKafkaSQSNATS <pre><code>pip install \"propan[async-redis]\"\n</code></pre> <pre><code>pip install \"propan[async-rabbit]\"\n</code></pre> <pre><code>pip install \"propan[async-kafka]\"\n</code></pre> <pre><code>pip install \"propan[async-sqs]\"\n</code></pre> <pre><code>pip install \"propan[async-nats]\"\n</code></pre>"},{"location":"ru/getting_started/4_broker/1_index/#_2","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430","text":"<p>\u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f Propan Broker \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u0431\u0440\u043e\u043a\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b 2\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438:</p> RedisRabbitMQKafkaSQSNATS <ol> <li> <p>\u0412 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430</p> <pre><code>from propan import RedisBroker\nbroker = RedisBroker(\"redis://localhost:6379/\")\n</code></pre> </li> <li> <p>\u0412 \u043c\u0435\u0442\u043e\u0434\u0435 <code>connect</code> <pre><code>from propan import RedisBroker\nbroker = RedisBroker()\n...\nawait broker.connect(\"redis://localhost:6379/\")\n</code></pre></p> </li> </ol> <ol> <li> <p>\u0412 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430</p> <pre><code>from propan import RabbitBroker\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n</code></pre> </li> <li> <p>\u0412 \u043c\u0435\u0442\u043e\u0434\u0435 <code>connect</code></p> <pre><code>from propan import RabbitBroker\nbroker = RabbitBroker()\n...\nawait broker.connect(\"amqp://guest:guest@localhost:5672/\")\n</code></pre> </li> </ol> <ol> <li> <p>\u0412 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430</p> <pre><code>from propan import KafkaBroker\nbroker = KafkaBroker(\"localhost:9092\")\n</code></pre> </li> <li> <p>\u0412 \u043c\u0435\u0442\u043e\u0434\u0435 <code>connect</code></p> <pre><code>from propan import KafkaBroker\nbroker = KafkaBroker()\n...\nawait broker.connect(\"localhost:9092\")\n</code></pre> </li> </ol> <ol> <li> <p>\u0412 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430</p> <pre><code>from propan import SQSBroker\nbroker = SQSBroker(\"http://localhost:9324\")\n</code></pre> </li> <li> <p>\u0412 \u043c\u0435\u0442\u043e\u0434\u0435 <code>connect</code></p> <pre><code>from propan import SQSBroker\nbroker = SQSBroker()\n...\nawait broker.connect(\"http://localhost:9324\")\n</code></pre> </li> </ol> <ol> <li> <p>\u0412 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430</p> <pre><code>from propan import NatsBroker\nbroker = NatsBroker(\"nats://localhost:4222\")\n</code></pre> </li> <li> <p>\u0412 \u043c\u0435\u0442\u043e\u0434\u0435 <code>connect</code></p> <pre><code>from propan import NatsBroker\nbroker = NatsBroker()\n...\nawait broker.connect(\"nats://localhost:4222\")\n</code></pre> </li> </ol> <p>\u0412 \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0430\u043c \u0445\u0432\u0430\u0442\u0438\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f - \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440.</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0432 \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445: \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0432\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043d \u0437\u0434\u0435\u0441\u044c</p> <p>Note</p> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0432 <code>connect</code> \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u043d\u0430\u0434 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440. \u0411\u0443\u0434\u044c\u0442\u0435 \u0441 \u044d\u0442\u0438\u043c \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u044b.</p> <p>\u041a\u0440\u043e\u043c\u0435 \u044d\u0442\u043e\u0433\u043e, \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 <code>connect</code> \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043d\u0438 \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u044d\u0444\u0444\u0435\u043a\u0442\u0443. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0435 \u043e\u043f\u043e\u0441\u0430\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u044b\u0437\u043e\u0432 <code>broker.start()</code> (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u0438 <code>PropanApp</code> \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u0440\u043e\u043a\u0435\u0440\u0430) \u0432\u044b\u0437\u043e\u0432\u0435\u0442 \u043a\u0430\u043a\u0438\u0435-\u043b\u0438\u0431\u043e \u043e\u0448\u0438\u0431\u043a\u0438.</p>"},{"location":"ru/getting_started/4_broker/2_routing/#_1","title":"\u041e\u0431\u0449\u0435\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>\u0414\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 - \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@broker.handle</code></p> <pre><code>@broker.handle(\"test\")\nasync def base_handler(body: str):\n    ...\n</code></pre> <p>\u042d\u0442\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0445\u043e\u0436\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432, \u043e\u0434\u043d\u0430\u043a\u043e, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 <code>@broker.handle</code> - \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b:</p> <ul> <li>RabbitBroker</li> <li>NatsBroker</li> <li>RedisBroker</li> </ul>"},{"location":"ru/getting_started/4_broker/2_routing/#_2","title":"\u041e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043c\u0435\u0448\u0430\u0432\u0430\u0442\u044c \"\u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443\" \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435\u043c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \"\u0431\u0435\u0437 \u0441\u0430\u0445\u0430\u0440\u0430\": \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u0430 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u0435\u0435 \u043f\u043e\u0437\u0436\u0435.</p> <pre><code>async def base_handler(body: str):\n    ...\n\nbroker.handle(\"test\")(base_handler)\n</code></pre>"},{"location":"ru/getting_started/4_broker/2_routing/#brokerrouter","title":"BrokerRouter","text":"<p>\u0418\u043d\u043e\u0433\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u0434\u043e\u0431\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043d\u0430 \u0433\u0440\u0443\u043f\u043f\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432 \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432 Propan \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u044b BrokerRouter: \u0432 \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u043e\u0443\u0442\u0435\u0440\u0430, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0440\u043e\u0443\u0442\u0435\u0440 \u0432 \u0432\u0430\u0448 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043b\u0443\u0447\u0448\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0435\u0433\u043e \u043d\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker, RedisRouter\n\nrouter = RedisRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n    ...\n\nbroker = RedisBroker()\nbroker.include_router(router)\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker, RabbitRouter\n\nrouter = RabbitRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n    ...\n\nbroker = RabbitBroker()\nbroker.include_router(router)\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker, KafkaRouter\n\nrouter = KafkaRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n    ...\n\nbroker = KafkaBroker()\nbroker.include_router(router)\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker, SQSRouter\n\nrouter = SQSRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n    ...\n\nbroker = SQSBroker()\nbroker.include_router(router)\napp = PropanApp(broker)\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker, NatsRouter\n\nrouter = NatsRouter(prefix=\"user/\")\n\n@router.handle(\"created\")\nasync def handle_user_created_event(user_id: str):\n    ...\n\nbroker = NatsBroker()\nbroker.include_router(router)\napp = PropanApp(broker)\n</code></pre> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043a \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0432\u0430\u0448\u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432.</p> <pre><code>@app.after_startup\nasync def publish_test():\n    await broker.publish(\"user-fake-uuid\", \"user/created\")\n</code></pre>"},{"location":"ru/getting_started/4_broker/2_routing/#_3","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a","text":"<p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0432\u0441\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u044b, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0438\u043c\u0435\u044e\u0442 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 <code>@broker.handle</code> \u0444\u043b\u0430\u0433 <code>retry</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a.</p> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u044d\u0442\u043e\u0442 \u0444\u043b\u0430\u0433 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>False</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0432 \u0445\u043e\u0434\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u043e\u0437\u043d\u0438\u043a\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430, \u043e\u043d\u043e \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u043e \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438.</p> <pre><code>@broker.handle(\"test\", retry=False)  # \u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\nasync def base_handler(body: str):\n    ...\n</code></pre> <p>\u041f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u044d\u0442\u043e\u0433\u043e \u0444\u043b\u0430\u0433\u0430 \u0432 <code>True</code> \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043c\u0435\u0449\u0430\u0442\u044c\u0441\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0443\u0439\u0442\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043a\u0430\u043a \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044e (\u0435\u0441\u043b\u0438 \u0438\u0445 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e), \u0442\u0430\u043a \u0438 \u0442\u043e\u043c\u0443 \u0436\u0435 \u0441\u0430\u043c\u043e\u043c\u0443.</p> <pre><code>@broker.handle(\"test\", retry=True)  # \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043d\u043e\u0432\u043e \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\nasync def base_handler(body: str):\n    ...\n</code></pre> <p>\u041f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u043b\u0430\u0433\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f <code>int</code>, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043e \u044d\u0442\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c. <pre><code>@broker.handle(\"test\", retry=3)     # \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043e 3\u0435\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a\nasync def base_handler(body: str):\n    ...\n</code></pre></p> <p>Bug</p> <p>\u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f. \u0415\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0439\u0434\u0435\u0442 \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044e, \u0443 \u0442\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u0432\u043e\u0439 \u0441\u0447\u0435\u0442\u0447\u0438\u043a. \u0412\u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0438 \u044d\u0442\u0430 \u043b\u043e\u0433\u0438\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430.</p> <p>Tip</p> <p>\u0414\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c tenacity</p>"},{"location":"ru/getting_started/4_broker/3_type-casting/","title":"\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432","text":"<p>\u041f\u0435\u0440\u0432\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043e\u0431\u0440\u0430\u043c\u043b\u0435\u043d\u043d\u043e\u0439 \u0432 <code>@broker.handle</code> - \u044d\u0442\u043e \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0442\u0435\u043b\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> <p>\u0422\u0435\u043b\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 Propan \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432:</p> <ul> <li><code>str</code> - \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>content-type: text/plain</code></li> <li><code>dict</code> - \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>content-type: application/json</code></li> <li><code>bytes</code> - \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a</li> </ul> <p>\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043b\u0438\u0431\u043e \u044d\u0442\u0438 \u0442\u0438\u043f\u044b, \u043b\u0438\u0431\u043e \u043b\u044e\u0431\u044b\u0435 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c pydantic \u0441\u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 <code>str -&gt; float</code>).</p> <p>\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432:</p>"},{"location":"ru/getting_started/4_broker/3_type-casting/#textplain","title":"text/plain","text":"<pre><code>@broker.handle(\"test\")\nasync def base_handler(body: str):\n    '''\n    \u041c\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u043c text/plain \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n    \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u0441\u043f\u0440\u043e\u0432\u043e\u0446\u0438\u0440\u0443\u044e\u0442 \u043e\u0448\u0438\u0431\u043a\u0443\n    '''\n</code></pre>"},{"location":"ru/getting_started/4_broker/3_type-casting/#applicationjson","title":"application/json","text":"<pre><code>@broker.handle(\"test\")\nasync def base_handler(body: dict):\n    '''\n    \u041c\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u043c application/json \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n    \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u0441\u043f\u0440\u043e\u0432\u043e\u0446\u0438\u0440\u0443\u044e\u0442 \u043e\u0448\u0438\u0431\u043a\u0443\n    '''\n</code></pre>"},{"location":"ru/getting_started/4_broker/3_type-casting/#any-type","title":"Any type","text":"<pre><code>@broker.handle(\"test\")\nasync def base_handler(body: bytes):\n    '''\n    \u041c\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u043c '\u0441\u044b\u0440\u043e\u0435' \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n    \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u0441\u043f\u0440\u043e\u0432\u043e\u0446\u0438\u0440\u0443\u044e\u0442 \u043e\u0448\u0438\u0431\u043a\u0443\n    '''\n</code></pre>"},{"location":"ru/getting_started/4_broker/3_type-casting/#pydantic","title":"Pydantic","text":"<p>\u0422\u0430\u043a\u0436\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442 <code>pydantic</code>, Propan \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a \u044d\u0442\u043e\u043c\u0443 \u0432\u0438\u0434\u0443, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.</p> <pre><code>from pydantic import BaseModel\n\nclass Message(BaseModel):\n    key: float\n\n@broker.handle(\"test\")\nasync def base_handler(body: Message):\n    '''\n    \u041c\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u043c application/json \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n    \u0412\u0438\u0434\u0430 { key: 1.0 }\n    \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u0441\u043f\u0440\u043e\u0432\u043e\u0446\u0438\u0440\u0443\u044e\u0442 \u043e\u0448\u0438\u0431\u043a\u0443\n    '''\n</code></pre>"},{"location":"ru/getting_started/4_broker/3_type-casting/#_2","title":"\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432","text":"<p>\u041f\u0440\u0438 \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u043e\u0441\u0438\u043b\u0435\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\u0439 <code>pydantic</code> \u043c\u043e\u0434\u0435\u043b\u0438.</p> <pre><code>from pydantic import BaseModel\n\nclass Message(BaseModel):\n    a: int\n    b: float\n\n@broker.handle(\"test\")\nasync def base_handler(a: int, b: float):\n# async def base_handler(body: Message): - \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n    '''\n    \u041c\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u043c application/json \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n    \u0412\u0438\u0434\u0430 { a: 1, b: 1.0 }\n    \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u0441\u043f\u0440\u043e\u0432\u043e\u0446\u0438\u0440\u0443\u044e\u0442 \u043e\u0448\u0438\u0431\u043a\u0443\n    '''\n</code></pre>"},{"location":"ru/getting_started/4_broker/4_custom_serialization/","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0438 \u043f\u0440\u0438\u0435\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 Propan \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0444\u043e\u0440\u043c\u0430\u0442 JSON. \u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0438\u043b\u0438 \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0448\u0430\u0433\u0430\u043c\u0438 \u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 (gzip, Avro, Protobuf, \u0438 \u0442.\u0434.), \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043c\u043e\u0434\u0438\u0446\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p>"},{"location":"ru/getting_started/4_broker/4_custom_serialization/#_2","title":"\u0428\u0430\u0433\u0438 \u043f\u043e \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<p>\u0414\u043e \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u043f\u0430\u0434\u0435\u0442 \u0432 \u0432\u0430\u0448\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, Propan \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u043a \u043d\u0435\u043c\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e 2 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: <code>parse_message</code> \u0438 <code>decode_message</code>. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043c\u043e\u0434\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u043e\u0431\u0430 \u044d\u0442\u0430\u043f\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u0430\u0448\u0438\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0435\u0439.</p>"},{"location":"ru/getting_started/4_broker/4_custom_serialization/#message-parsing","title":"Message Parsing","text":"<p>\u041d\u0430 \u044d\u0442\u043e\u043c \u044d\u0442\u0430\u043f\u0435 Propan \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0442\u043e\u0433\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u0432 \u043e\u0431\u0449\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 - PropanMessage. \u041d\u0430 \u044d\u0442\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0442\u0435\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u044b\u0440\u044b\u0445 \u0431\u0430\u0439\u0442\u043e\u0432.</p> <p>\u0421\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanMessage\n\nasync def parse_message(\n    message: bytes\n) -&gt; PropanMessage[bytes]:\n    return PropanMessage(\n        body=message,\n        raw_message=message,\n    )\n</code></pre> <pre><code>from aio_pika.message import IncomingMessage\nfrom propan import PropanMessage\n\nasync def parse_message(\n    message: IncomingMessage\n) -&gt; PropanMessage[IncomingMessage]:\n    return PropanMessage(\n        body=message.body,\n        headers=message.headers,\n        reply_to=message.reply_to or \"\",\n        message_id=message.message_id,\n        content_type=message.content_type or \"\",\n        raw_message=message,\n    )\n</code></pre> <pre><code>from aiokafka.structs import ConsumerRecord\nfrom propan import PropanMessage\n\nasync def parse_message(\n    message: ConsumerRecord\n) -&gt; PropanMessage[ConsumerRecord]:\n    headers = {i: j.decode() for i, j in message.headers}\n    return PropanMessage(\n        body=message.value,\n        raw_message=message,\n        message_id=f\"{message.offset}-{message.timestamp}\",\n        reply_to=headers.get(\"reply_to\", \"\"),\n        content_type=headers.get(\"content-type\"),\n        headers=headers,\n    )\n</code></pre> <pre><code>from typing import Dict, Any\nfrom propan import PropanMessage\n\nasync def parse_message(\n    message: Dict[str, Any],\n) -&gt; PropanMessage[Dict[str, Any]]:\n    attributes = message.get(\"MessageAttributes\", {})\n    headers = {i: j.get(\"StringValue\") for i, j in attributes.items()}\n    return PropanMessage(\n        body=message.get(\"Body\", \"\").encode(),\n        message_id=message.get(\"MessageId\"),\n        content_type=headers.pop(\"content-type\", None),\n        reply_to=headers.pop(\"reply_to\", None) or \"\",\n        headers=headers,\n        raw_message=message,\n    )\n</code></pre> <pre><code>from nats.aio.msg import Msg\nfrom propan import PropanMessage\n\nasync def parse_message(\n    message: Msg\n) -&gt; PropanMessage[Msg]:\n    return PropanMessage(\n        body=message.data,\n        content_type=message.header.get(\"content-type\", \"\"),\n        headers=message.header,\n        reply_to=message.reply,\n        raw_message=message,\n    )\n</code></pre> <p>\u042d\u0442\u043e\u0442 \u044d\u0442\u0430\u043f \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0438 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f.</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0442\u0430\u043a\u0430\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u0435\u0441\u0442\u044c. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043a\u0430\u043a \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432:</p> <pre><code>from propan import RabbitBroker\n\nasync def custom_parse(msg, original_parser):\n    return original_parser(msg)\n\nbroker = RabbitBroker(parse_message=custom_parse)\n\n@broker.handle(\"test\", parse_message=custom_parse)\nasync def handler(): ...\n</code></pre> <p>\u0412\u0430\u0448\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c 2 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430: \u0441\u0430\u043c\u043e \"\u0441\u044b\u0440\u043e\u0435\" \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043a\u0430\u043a \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0442\u0430\u043a \u0438 \u043c\u043e\u0434\u0438\u0446\u0438\u0444\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e, \u0430 \u0437\u0430\u0442\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c Propan.</p> <p>\u041f\u0430\u0440\u0441\u0435\u0440, \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 <code>broker</code> \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043a\u043e \u0432\u0441\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u043c. \u041f\u0430\u0440\u0441\u0435\u0440, \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 <code>handle</code> - \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043a \u044d\u0442\u043e\u043c\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443 (\u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u043d \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442 \u043f\u0430\u0440\u0441\u0435\u0440 <code>broker</code>'\u0430, \u0435\u0441\u043b\u0438 \u0442\u043e\u0442 \u0431\u044b\u043b \u0443\u043a\u0430\u0437\u0430\u043d \u0440\u0430\u043d\u0435\u0435).</p>"},{"location":"ru/getting_started/4_broker/4_custom_serialization/#message-decoding","title":"Message Decoding","text":"<p>\u041d\u0430 \u044d\u0442\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0442\u0435\u043b\u043e PropanMessage \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u0442\u043e\u043c\u0443 \u0432\u0438\u0434\u0443, \u0432 \u043a\u0430\u043a\u043e\u043c \u043e\u043d\u043e \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0432\u0430\u0448\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a. \u0418\u043c\u0435\u043d\u043d\u043e \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e.</p> <p>\u0412 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u0435 \u0435\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0435\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u0430 (\u0445\u043e\u0442\u044f \u044d\u0442\u043e \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442):</p> <pre><code>import json\nfrom propan import PropanMessage\n\nasync def decode_message(message: PropanMessage):\n    body = message.body\n    if message.content_type is not None:\n        return json.loads(body.decode())\n    else:\n        return body\n</code></pre> <p>\u0414\u043b\u044f \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u0442 \u0436\u0435 \u0441\u0430\u043c\u044b\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c, \u0447\u0442\u043e \u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430:</p> <pre><code>from propan import RabbitBroker\n\nasync def custom_decode(msg, original_decoded):\n    return original_decoded(msg)\n\nbroker = RabbitBroker(decode_message=custom_decode)\n\n@broker.handle(\"test\", decode_message=custom_decode)\nasync def handler(): ...\n</code></pre>"},{"location":"ru/getting_started/4_broker/4_custom_serialization/#protobuf","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0441 Protobuf","text":"<p>\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Protobuf, \u043e\u0434\u043d\u0430\u043a\u043e, \u043e\u043d \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0442\u0430\u043a\u0436\u0435 \u0438 \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.</p> Protobuf <p>Protobuf - \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0432 GRPC. \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0435\u0433\u043e \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e - \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0438\u0439<sup>1</sup> \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0439 \u0441 JSON), \u043e\u0434\u043d\u0430\u043a\u043e \u043e\u043d \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u0445\u0435\u043c\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (<code>.proto</code> \u0444\u0430\u0439\u043b\u043e\u0432) \u043a\u0430\u043a \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u0430\u043a \u0438 \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.</p> <p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438:</p> <pre><code>pip install grpcio-tools\n</code></pre> <p>\u0417\u0430\u0442\u0435\u043c \u043e\u043f\u0438\u0448\u0435\u043c \u0441\u0445\u0435\u043c\u0443 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</p> message.proto<pre><code>syntax = \"proto3\";\n\nmessage Person {\n    string name = 1;\n    float age = 2;\n}\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c Python-\u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 Protobuf</p> <pre><code>python -m grpc_tools.protoc --python_out=. --pyi_out=. -I . message.proto\n</code></pre> <p>\u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c 2 \u0444\u0430\u0439\u043b\u0430: <code>message_pb2.py</code> \u0438 <code>message_pb2.pyi</code>. \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u0433\u043e\u0442\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430\u0448\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p> <pre><code>from message_pb2 import Person\n\nfrom propan import PropanApp, RabbitBroker\nfrom propan.annotations import Logger, NoCast\nfrom propan.brokers.rabbit import RabbitMessage\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nasync def decode_message(msg: RabbitMessage, original) -&gt; Person:\n    decoded = Person()\n    decoded.ParseFromString(msg.body)\n    return decoded\n\n@broker.handle(\"test\", decode_message=decode_message)\nasync def consume(body: NoCast[Person], logger: Logger):\n    logger.info(body)\n\n@app.after_startup\nasync def publish():\n    body = Person(name=\"john\", age=25).SerializeToString()\n    await broker.publish(body, \"test\")\n</code></pre> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e <code>NoCast</code>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 <code>pydantic</code>-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.</p> <pre><code>async def consume(body: NoCast[Person], logger: Logger):\n</code></pre> <ol> <li> <p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0438\u0434\u0430 <code>{ \"name\": \"john\", \"age\": 25 }</code> \u0432 JSON \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 27 \u0431\u0430\u0439\u0442, \u0430 \u0432 Protobuf - 11. \u0421\u043e \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u043c\u0438 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0435\u0449\u0435 \u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 (\u0434\u043e 20\u0445 \u0440\u0430\u0437).\u00a0\u21a9</p> </li> </ol>"},{"location":"ru/getting_started/4_broker/5_publishing/","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0412 Propan \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0443\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434</p> <pre><code>await broker.publish(message, ...)\n</code></pre> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434, \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0431\u0440\u043e\u043a\u0435\u0440\u0430, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c <code>message</code>. \u041e\u0434\u043d\u0430\u043a\u043e, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432.</p> <p>\u041e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044f\u043c\u0438, \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u044b, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0434\u0435\u0441\u044c:</p> <ul> <li>Redis</li> <li>RabbitBroker</li> <li>NatsBroker</li> </ul>"},{"location":"ru/getting_started/4_broker/5_publishing/#_2","title":"\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438","text":"\u0422\u0438\u043f \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0421\u043f\u043e\u0441\u043e\u0431 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043a bytes <code>dict</code> application/json json.dumps(message).encode() <code>Sequence</code> application/json json.dumps(message).encode() <code>pydantic.BaseModel</code> application/json message.json().encode() <code>str</code> text/plain message.encode() <code>bytes</code> message <p>\u0422\u0430\u043a\u0436\u0435, \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u044b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p>"},{"location":"ru/getting_started/4_broker/5_publishing/#_3","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439","text":"<p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u043e\u0447\u0435\u0440\u0435\u043d\u0434\u044c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u043d\u0435\u0439.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0435\u0441\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u0433\u043e Propan \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c: \u0431\u0440\u043e\u043a\u0435\u0440 \u0443\u0436\u0435 \u0437\u0430\u043f\u0443\u0449\u0435\u043d. \u041f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043a \u043d\u0435\u043c\u0443 \u0434\u043e\u0441\u0442\u0443\u043f \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker\n\nbroker = RedisBroker(\"redis://localhost:6379\")\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def handle(m: str):\n    await broker.publish(m, \"another-channel\")\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def handle(m: str):\n    await broker.publish(m, \"another-queue\")\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker\n\nbroker = KafkaBroker(\"localhost:9092\")\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def handle(m: str):\n    await broker.publish(m, \"another-topic\")\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker\n\nbroker = SQSBroker(\"http://localhost:9324\", ...)\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def handle(m: str):\n    await broker.publish(m, \"another-queue\")\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker\n\nbroker = NatsBroker(\"nats://localhost:4222\")\napp = PropanApp(broker)\n\n@broker.handle(\"test\")\nasync def handle(m: str):\n    await broker.publish(m, \"another-subject\")\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0436\u0435 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Propan \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0440\u043e\u043a\u0435\u0440 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438.</p> RedisRabbitMQKafkaSQSNATS <pre><code>async with RedisBroker(\"redis://localhost:6379\") as broker:\n    await broker.publish(m, \"another-channel\")\n</code></pre> <pre><code>async with RabbitBroker(\"amqp://guest:guest@localhost:5672/\") as broker:\n    await broker.publish(m, \"another-queue\")\n</code></pre> <pre><code>async with KafkaBroker(\"localhost:9092\") as broker:\n    await broker.publish(m, \"another-topic\")\n</code></pre> <pre><code>async with SQSBroker(\"http://localhost:9324\", ...) as broker:\n    await broker.publish(m, \"another-queue\")\n</code></pre> <pre><code>async with NatsBroker(\"nats://localhost:4222\") as broker:\n    await broker.publish(m, \"another-subject\")\n</code></pre> <p>Tip</p> <p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445. \u041e\u0434\u043d\u0430\u043a\u043e, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c <code>handle</code>'\u044b \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0435\u043b\u044c\u0437\u044f: \u043e\u043d\u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0442 \u0441\u0432\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043d\u043e \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435.</p>"},{"location":"ru/getting_started/4_broker/6_rpc/#rpc-over-mq","title":"\u0417\u0430\u0447\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c RPC over MQ","text":"<p>\u0418\u043d\u043e\u0433\u0434\u0430 \u0432\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043d\u043e \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430 \u043d\u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0442. \u041e\u0431\u044b\u0447\u043d\u043e \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 HTTP, \u043e\u0434\u043d\u0430\u043a\u043e \u0443 \u043d\u0430\u0441 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043f\u043e\u0447\u0435\u043c\u0443 \u0431\u044b \u043d\u0430\u043c \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0435?</p> <p>RPC \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e\u0432\u0435\u0440\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e: \u043c\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u043e\u0434\u043d\u0443 \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0430 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432 \u0434\u0440\u0443\u0433\u0443\u044e. \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c \u0442\u043e\u043f\u043e\u0440\u043d\u043e, \u043e\u0434\u043d\u0430\u043a\u043e \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043d\u0435\u0441\u0435\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430.</p> <ol> <li>\u0412\u0440\u0435\u043c\u044f \u043c\u0435\u0436\u0434\u0443 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u043c \u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u043d\u0438\u0447\u0435\u043c \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043e: \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441, \u0430 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0441\u0443\u0442\u043a\u0438. HTTP \u0437\u0430\u043f\u0440\u043e\u0441 \u0442\u0430\u043a\u0438\u0445 \u0432\u043e\u043b\u043d\u043e\u0441\u0442\u0435\u0439 \u043d\u0430\u043c \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442.     \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043a\u0440\u0430\u0439\u043d\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443: \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0444\u0430\u0439\u043b\u044b, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 \u0438 \u0442.\u0434.</li> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c: \u043c\u044b \u0441\u0430\u043c\u0438 \u043c\u043e\u0436\u0435\u043c \u0440\u0435\u0448\u0430\u0442\u044c, \u0436\u0434\u0430\u0442\u044c \u043d\u0430\u043c \u043e\u0442\u0432\u0435\u0442 \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441, \u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0433\u043e\u0442\u043e\u0432.</li> <li>\u041e\u0434\u0438\u043d \u0437\u0430\u043f\u0440\u043e\u0441 - \u043c\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u043e\u0432: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043c\u044b \u0432\u043f\u043e\u043b\u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u0434\u0438\u043d \u0437\u0430\u043f\u0440\u043e\u0441. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043d\u0430\u043b \u0441\u0432\u044f\u0437\u0438, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043c\u0435\u0440\u0435 \u0433\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u0438.</li> </ol>"},{"location":"ru/getting_started/4_broker/6_rpc/#_1","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":""},{"location":"ru/getting_started/4_broker/6_rpc/#_2","title":"\u0421\u0435\u0440\u0432\u0435\u0440","text":"<p>\u0421\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0435\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b) \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0438\u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u043a\u043e\u0434: <code>return</code> \u0432\u0430\u0448\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d \u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u0435\u0441\u043b\u0438 \u043e\u043d \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0432\u0430\u0448\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</p> <p>Note</p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u0430\u0448\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u043c \u0442\u0438\u043f\u0430\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 <code>message</code> \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>broker.publish</code>.</p> <p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0435 \u0442\u0438\u043f\u044b: <code>str</code>, <code>dict</code>, <code>Sequence</code>, <code>pydantic.BaseModel</code>, <code>bytes</code>, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u0434\u043b\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</p> RedisRabbitMQNATS <pre><code>from propan import RedisBroker\n\nbroker = RedisBroker(\"redis://localhost:6379\")\n\n@broker.handle(\"ping\")\nasync def ping(m: str):\n    return \"pong!\"  # &lt;-- send RPC response\n</code></pre> <pre><code>from propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@127.0.0.1/\")\n\n@broker.handle(\"ping\")\nasync def ping(m: str):\n    return \"pong!\"  # &lt;-- send RPC response\n</code></pre> <pre><code>from propan import NatsBroker\n\nbroker = NatsBroker(\"nats://localhost:4222\")\n\n@broker.handle(\"ping\")\nasync def ping(m: str):\n    return \"pong!\"  # &lt;-- send RPC response\n</code></pre>"},{"location":"ru/getting_started/4_broker/6_rpc/#_3","title":"\u041a\u043b\u0438\u0435\u043d\u0442","text":""},{"location":"ru/getting_started/4_broker/6_rpc/#_4","title":"\u0411\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441","text":"<p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0436\u0434\u0430\u0442\u044c\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \"\u043f\u0440\u044f\u043c\u043e \u0437\u0434\u0435\u0441\u044c\" (\u043a\u0430\u043a \u0435\u0441\u043b\u0438 \u0431\u044b \u044d\u0442\u043e \u0431\u044b\u043b HTTP \u0437\u0430\u043f\u0440\u043e\u0441) \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0435\u0440 <code>callback=True</code> \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> RedisRabbitMQNATS <pre><code>from propan import RedisBroker\n\nasync def main():\n    async with RedisBroker(\"redis://localhost:6379\") as broker:\n        r = await broker.publish(\n            \"hi!\", \"ping\",\n            callback=True\n        )\n\n    assert r == \"pong\"  # &lt;-- take the RPC response\n</code></pre> <pre><code>from propan import RabbitBroker\n\nasync def main():\n    async with RabbitBroker(\"amqp://guest:guest@127.0.0.1/\") as broker:\n        r = await broker.publish(\n            \"hi!\", \"ping\",\n            callback=True\n        )\n\n    assert r == \"pong\"  # &lt;-- take the RPC response\n</code></pre> <pre><code>from propan import NatsBroker\n\nasync def main():\n    async with NatsBroker(\"nats://localhost:4222\") as broker:\n        r = await broker.publish(\n            \"hi!\", \"ping\",\n            callback=True\n        )\n\n    assert r == \"pong\"  # &lt;-- take the RPC response\n</code></pre> <p>\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043a\u043b\u0438\u0435\u043d\u0442 \u0433\u043e\u0442\u043e\u0432 \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>callback_timeout</code> (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e - 30 \u0441\u0435\u043a\u0443\u043d\u0434)</p> <pre><code>await broker.publish(\n    \"hi!\", \"ping\",\n    callback=True,\n    callback_timeout=3.0  # (1)\n)\n</code></pre> <ol> <li>\u041e\u0436\u0438\u0434\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f 3 \u0441\u0435\u043a\u0443\u043d\u0434\u044b</li> </ol> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0433\u043e\u0442\u043e\u0432\u044b \u0436\u0434\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441\u0442\u043e\u043b\u044c\u043a\u043e, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u043e \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u0438\u0442\u044c <code>callback_timeout=None</code></p> <pre><code>await broker.publish(\n    \"hi!\", \"ping\",\n    callback=True,\n    callback_timeout=None\n)\n</code></pre> <p>Warning</p> <p>\u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f</p> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0435\u0441\u043b\u0438 Propan \u043d\u0435 \u0434\u043e\u0436\u0434\u0430\u043b\u0441\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0435\u0440\u043d\u0435\u0442 <code>None</code>. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u044f\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c <code>TimeoutError</code>, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>raise_timeout</code>.</p> <pre><code>await broker.publish(\n    \"hi!\", \"ping\",\n    callback=True,\n    raise_timeout=True\n)\n</code></pre>"},{"location":"ru/getting_started/4_broker/6_rpc/#_5","title":"\u041d\u0435\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441","text":"<p>\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0432\u043d\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 <code>reply_to</code> \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p> RedisRabbitMQNATS <pre><code>import asyncio\nfrom propan import RedisBroker\n\nbroker = RedisBroker(\"redis://localhost:6379\")\n\n@broker.handle(\"reply\")\nasync def get_message(m: str):\n    assert m == \"pong!\"  # &lt;-- take the RPC response\n\nasync def main():\n    await broker.start()\n\n    await broker.publish(\n        \"hello\", \"ping\",\n        reply_to=\"reply\"\n    )\n\n    try:\n        await asyncio.Future()\n    finally:\n        await broker.close()\n\nasyncio.run(main())\n</code></pre> <pre><code>import asyncio\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@127.0.0.1/\")\n\n@broker.handle(\"reply\")\nasync def get_message(m: str):\n    assert m == \"pong!\"  # &lt;-- take the RPC response\n\nasync def main():\n    await broker.start()\n\n    await broker.publish(\n        \"hello\", \"ping\",\n        reply_to=\"reply\"\n    )\n\n    try:\n        await asyncio.Future()\n    finally:\n        await broker.close()\n\nasyncio.run(main())\n</code></pre> <pre><code>import asyncio\nfrom propan import NatsBroker\n\nbroker = NatsBroker(\"nats://localhost:4222\")\n\n@broker.handle(\"reply\")\nasync def get_message(m: str):\n    assert m == \"pong!\"  # &lt;-- take the RPC response\n\nasync def main():\n    await broker.start()\n\n    await broker.publish(\n        \"hello\", \"ping\",\n        reply_to=\"reply\"\n    )\n\n    try:\n        await asyncio.Future()\n    finally:\n        await broker.close()\n\nasyncio.run(main())\n</code></pre> <p>Note</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0435\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, <code>broker</code> \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u0443\u0449\u0435\u043d. \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>broker</code> \u043a\u0430\u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440.</p>"},{"location":"ru/getting_started/5_dependency/1_di-index/","title":"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438","text":"<p>Propan \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0442\u043e\u0440\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 FastDepends \u0434\u0434\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438. \u042d\u0442\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0431\u0443\u043a\u0432\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0437\u0430\u0438\u043c\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0430 \u0443 FastAPI, \u0442\u0430\u043a \u0447\u0442\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0443\u043c\u0435\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u044d\u0442\u0438\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 - \u0432\u044b \u0443\u043c\u0435\u0435\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 \u0432 Propan.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e FastDepends, \u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0435\u0439, \u043e\u0434\u043d\u0430\u043a\u043e, \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043e\u0441\u0432\u0435\u0449\u0435\u043d\u044b \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/getting_started/5_dependency/1_di-index/#_2","title":"\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432","text":"<p>\u041a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 \u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432 \u0432 Propan \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@apply_types</code> (@inject \u0432 FastDepends).</p> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u043d \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a\u043e \u0432\u0441\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u0435\u0441\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u044b \u043d\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u044e\u0449\u0443\u044e \u043e\u043f\u0446\u0438\u044e \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import RedisBroker\nbroker = RedisBroker(..., apply_types=False)\n</code></pre> <pre><code>from propan import RabbitBroker\nbroker = RabbitBroker(..., apply_types=False)\n</code></pre> <pre><code>from propan import KafkaBroker\nbroker = KafkaBroker(..., apply_types=False)\n</code></pre> <pre><code>from propan import SQSBroker\nbroker = SQSBroker(..., apply_types=False)\n</code></pre> <pre><code>from propan import NatsBroker\nbroker = NatsBroker(..., apply_types=False)\n</code></pre> <p>Warning</p> <p>\u0412\u044b\u0441\u0442\u0430\u0432\u0438\u0432 \u0444\u043b\u0430\u0433 <code>apply_types=False</code> \u0432\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0435 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432, \u043d\u043e \u0438 <code>Depends</code>, <code>Context</code>.</p> <p>\u042d\u0442\u043e\u0442 \u0444\u043b\u0430\u0433 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u0435\u043d, \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Propan \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u0438 \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439.</p>"},{"location":"ru/getting_started/5_dependency/1_di-index/#_3","title":"\u0412\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439","text":"<p>\u0414\u043b\u044f \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0432 Propan \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 Depends</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker, Depends\n\nbroker = RedisBroker(\"redis://localhost:6379\")\napp = PropanApp(broker)\n\ndef simple_dependency():\n    return 1\n\n@broker.handle(\"test\")\nasync def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>from propan import PropanApp, RabbitBroker, Depends\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\napp = PropanApp(broker)\n\ndef simple_dependency():\n    return 1\n\n@broker.handle(\"test\")\nasync def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>from propan import PropanApp, KafkaBroker, Depends\n\nbroker = KafkaBroker(\"localhost:9092\")\napp = PropanApp(broker)\n\ndef simple_dependency():\n    return 1\n\n@broker.handle(\"test\")\nasync def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>from propan import PropanApp, SQSBroker, Depends\n\nbroker = SQSBroker(\"http://localhost:9324\", ...)\napp = PropanApp(broker)\n\ndef simple_dependency():\n    return 1\n\n@broker.handle(\"test\")\nasync def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>from propan import PropanApp, NatsBroker, Depends\n\nbroker = NatsBroker(\"nats://localhost:4222\")\napp = PropanApp(broker)\n\ndef simple_dependency():\n    return 1\n\n@broker.handle(\"test\")\nasync def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <p>\u041f\u0435\u0440\u0432\u044b\u043c \u0448\u0430\u0433\u043e\u043c: \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c - \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u043e\u0439 <code>Callable</code> \u043e\u0431\u044a\u0435\u043a\u0442.</p> Callable <p>\"Callable\" - \u043e\u0431\u044a\u0435\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \"\u0432\u044b\u0437\u0432\u0430\u043d\". \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043b\u0430\u0441\u0441 \u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430.</p> <p>\u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438: \u0435\u0441\u043b\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u0434 <code>my_object()</code> - <code>my_object</code> \u0431\u0443\u0434\u0435\u0442 <code>Callable</code></p> RedisRabbitMQKafkaSQSNATS <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <p>\u0412\u0442\u043e\u0440\u044b\u043c \u0448\u0430\u0433\u043e\u043c: \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>Depends</code></p> RedisRabbitMQKafkaSQSNATS <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <pre><code>async def handler(body: dict, d: int = Depends(simple_dependency)):\n    assert d == 1\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0448\u0430\u0433\u043e\u043c: \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0430\u0448\u0435\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438!</p> <p>\u042d\u0442\u043e \u0432\u0435\u0434\u044c \u043f\u0440\u043e\u0441\u0442\u043e, \u0440\u0430\u0437\u0432\u0435 \u043d\u0435\u0442?</p> <p>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0439 @apply_types</p> <p>\u0412 \u043a\u043e\u0434\u0435 \u0432\u044b\u0448\u0435 \u043c\u044b \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u044d\u0442\u043e\u0442 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u041e\u0434\u043d\u0430\u043a\u043e, \u043e\u043d \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a\u043e \u0432\u0441\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439.</p>"},{"location":"ru/getting_started/5_dependency/1_di-index/#_4","title":"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u0432\u044b, \u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e:</p> <pre><code>@broker.handle(\"test\")\ndef method(_ = Depends(...)): ...\n</code></pre> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043c\u0435\u0442\u043e\u0434\u0430 <code>handle</code></p> <pre><code>@broker.handle(\"test\", dependencies=[Depends(...)])\ndef method(): ...\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430: \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043a\u043e \u0432\u0441\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u044d\u0442\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <pre><code>broker = RabbitBroker(dependencies=[Depends(...)])\n</code></pre>"},{"location":"ru/getting_started/5_dependency/1_di-index/#_5","title":"\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438","text":"<p>\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438. \u042d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u0435 <code>Depends</code> \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from propan import PropanApp, RedisBroker, Depends\n\nbroker = RedisBroker(\"redis://localhost:6379\")\napp = PropanApp(broker)\n\ndef another_dependency():\n    return 1\n\ndef simple_dependency(b: int = Depends(another_dependency)): # (1)\n    return b * 2\n\n@broker.handle(\"test\")\nasync def handler(\n    body: dict,\n    a: int = Depends(another_dependency),\n    b: int = Depends(simple_dependency)):\n    assert (a + b) == 3\n</code></pre> <ol> <li>\u0417\u0434\u0435\u0441\u044c \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c</li> </ol> <pre><code>from propan import PropanApp, RabbitBroker, Depends\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\napp = PropanApp(broker)\n\ndef another_dependency():\n    return 1\n\ndef simple_dependency(b: int = Depends(another_dependency)): # (1)\n    return b * 2\n\n@broker.handle(\"test\")\nasync def handler(\n    body: dict,\n    a: int = Depends(another_dependency),\n    b: int = Depends(simple_dependency)):\n    assert (a + b) == 3\n</code></pre> <ol> <li>\u0417\u0434\u0435\u0441\u044c \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c</li> </ol> <pre><code>from propan import PropanApp, KafkaBroker, Depends\n\nbroker = KafkaBroker(\"localhost:9092\")\napp = PropanApp(broker)\n\ndef another_dependency():\n    return 1\n\ndef simple_dependency(b: int = Depends(another_dependency)): # (1)\n    return b * 2\n\n@broker.handle(\"test\")\nasync def handler(\n    body: dict,\n    a: int = Depends(another_dependency),\n    b: int = Depends(simple_dependency)):\n    assert (a + b) == 3\n</code></pre> <ol> <li>\u0417\u0434\u0435\u0441\u044c \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c</li> </ol> <pre><code>from propan import PropanApp, SQSBroker, Depends\n\nbroker = SQSBroker(\"http://localhost:9324\", ...)\napp = PropanApp(broker)\n\ndef another_dependency():\n    return 1\n\ndef simple_dependency(b: int = Depends(another_dependency)): # (1)\n    return b * 2\n\n@broker.handle(\"test\")\nasync def handler(\n    body: dict,\n    a: int = Depends(another_dependency),\n    b: int = Depends(simple_dependency)):\n    assert (a + b) == 3\n</code></pre> <ol> <li>\u0417\u0434\u0435\u0441\u044c \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c</li> </ol> <pre><code>from propan import PropanApp, NatsBroker, Depends\n\nbroker = NatsBroker(\"nats://localhost:4222\")\napp = PropanApp(broker)\n\ndef another_dependency():\n    return 1\n\ndef simple_dependency(b: int = Depends(another_dependency)): # (1)\n    return b * 2\n\n@broker.handle(\"test\")\nasync def handler(\n    body: dict,\n    a: int = Depends(another_dependency),\n    b: int = Depends(simple_dependency)):\n    assert (a + b) == 3\n</code></pre> <ol> <li>\u0417\u0434\u0435\u0441\u044c \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c</li> </ol> <p>\u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</p> <p>\u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f <code>another_dependency</code> \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u041e\u0414\u0418\u041d \u0420\u0410\u0417!. <code>Propan</code> \u043a\u0435\u0448\u0438\u0440\u0443\u0435\u0442 \u0432\u0441\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u041e\u0414\u041d\u041e\u0413\u041e <code>@apply_stack</code> \u0441\u0442\u0435\u043a\u0430 \u0432\u044b\u0437\u043e\u0432\u0430. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u0441\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442 \u0437\u0430\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438. \u041d\u043e, \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0432\u044b\u0437\u043e\u0432\u0430\u043c\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u044d\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438.</p> <p>\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u044d\u0442\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>Depends(..., cache=False)</code>. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0441\u0442\u0435\u043a\u0435 \u0432\u044b\u0437\u043e\u0432\u0430, \u0433\u0434\u0435 \u043e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f.</p>"},{"location":"ru/getting_started/5_dependency/1_di-index/#_6","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@apply_types</code> \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0432\u0430\u0448\u0438\u043c\u0438 <code>@broker.handle</code>'\u043c\u0438, \u043d\u043e \u0438 \u0441 \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438: \u043a\u0430\u043a \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438, \u0442\u0430\u043a \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438.</p> SyncAsync <pre><code>from propan import Depends, apply_types\n\ndef simple_dependency(a: int, b: int = 3):\n    return a + b\n\n@apply_types\ndef method(a: int, d: int = Depends(simple_dependency)):\n    return a + d\n\nassert method(\"1\") == 5\n</code></pre> <pre><code>import asyncio\nfrom propan import Depends, apply_types\n\nasync def simple_dependency(a: int, b: int = 3):\n    return a + b\n\ndef another_dependency(a: int):\n    return a\n\n@apply_types\nasync def method(\n    a: int,\n    b: int = Depends(simple_dependency),\n    c: int = Depends(another_dependency),\n):\n    return a + b + c\n\nassert asyncio.run(method(\"1\")) == 6\n</code></pre> <p>\u0411\u0443\u0434\u044c\u0442\u0435 \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u044b</p> <p>\u0412 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u043a\u043e\u0434\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435, \u0442\u0430\u043a \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438. \u041d\u043e \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u043a\u043e\u0434\u0435 \u0432\u0430\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.</p>"},{"location":"ru/getting_started/5_dependency/1_di-index/#_7","title":"\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439","text":"<p>FastDepends, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 Propan, \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u0442\u0438\u043f <code>return</code>. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u0431\u0443\u0434\u0435\u0442 \u0434\u0432\u0430\u0436\u0434\u044b \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043a \u0442\u0438\u043f\u0443: \u043a\u0430\u043a <code>return</code> \u044d\u0442\u043e\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u043a\u0430\u043a \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u042d\u0442\u043e \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432, \u0435\u0441\u043b\u0438 \u044d\u0442\u0438 \u0442\u0438\u043f\u044b \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u043d\u0443 \u0438 \u0442\u0443 \u0436\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e. \u041f\u0440\u043e\u0441\u0442\u043e \u0434\u0435\u0440\u0436\u0438\u0442\u0435 \u044d\u0442\u043e \u0432 \u0433\u043e\u043b\u043e\u0432\u0435. \u0418\u043b\u0438 \u043d\u0435\u0442... \u0412 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u044f \u0432\u0430\u0441 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0434\u0438\u043b.</p> <pre><code>from propan import Depends, apply_types\n\ndef simple_dependency(a: int, b: int = 3) -&gt; str:\n    return a + b  # 'return' \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a `str` \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437\n\n@inject\ndef method(a: int, d: int = Depends(simple_dependency)):\n    # 'd' \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a `int` \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0440\u0430\u0437\n    return a + d\n\nassert method(\"1\") == 5\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0435\u0448\u0438\u0440\u0443\u0435\u0442\u0441\u044f. \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u044d\u0442\u0443 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 <code>N</code> \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445, \u044d\u0442\u043e\u0442 \u0437\u0430\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u0442\u0438\u043f\u0443 <code>N</code> \u0440\u0430\u0437 (\u043d\u0430 \u0432\u0445\u043e\u0434\u0435 \u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e).</p> <p>\u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 mypy \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0431\u0443\u0434\u044c\u0442\u0435 \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u044b \u0441 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439 \u0442\u0438\u043f\u043e\u0432 \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435.</p>"},{"location":"ru/getting_started/5_dependency/2_context/","title":"CONTEXT","text":"<p>Propan \u0445\u0440\u0430\u043d\u0438\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0435, \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 <code>Context</code>.</p> <pre><code>from propan import Context\n\n@broker.hanlde(\"test\")\nasync def handler(broker = Context()):\n    await broker.publish(\"response\", \"response-queue\")\n</code></pre>"},{"location":"ru/getting_started/5_dependency/2_context/#_1","title":"\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f","text":"<p>Context \u0443\u0436\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f:</p> <ul> <li>app - \u043e\u0431\u044a\u0435\u043a\u0442 <code>PropanApp</code> \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> <li>broker - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0431\u0440\u043e\u043a\u0435\u0440</li> <li>context - \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441\u0430\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f</li> <li>logger - logger, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 (\u043f\u043e\u043c\u0435\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e message_id)</li> <li>message - \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 (\u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043d\u0435\u043c\u0443)</li> </ul> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f <code>contextlib.ContextVar</code>, message \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</p>"},{"location":"ru/getting_started/5_dependency/2_context/#_2","title":"\u0414\u043e\u0441\u0442\u0443\u043f \u043a \u043f\u043e\u043b\u044f\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430","text":"<p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043a\u0430\u043a \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435, \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0438\u0449\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430.</p> <pre><code>from propan import Context\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    app = Context(),\n    broker = Context(),\n    context = Context(),\n    logger = Context(),\n    message = Context(),\n):\n    ...\n</code></pre>"},{"location":"ru/getting_started/5_dependency/2_context/#_3","title":"\u0414\u043e\u0441\u0442\u0443\u043f \u043f\u043e \u0438\u043c\u0435\u043d\u0438","text":"<p>\u0418\u043d\u043e\u0433\u0434\u0430 \u0443 \u0432\u0430\u0441 \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 (\u043d\u0435 \u0442\u043e, \u043f\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043e\u043d \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435). \u0418\u043b\u0438 \u0434\u0430\u0436\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043d\u0435 \u043a\u043e \u0432\u0441\u0435\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443, \u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043a \u0435\u0433\u043e \u043f\u043e\u043b\u044e \u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434\u0443. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u043f\u043e \u0438\u043c\u0435\u043d\u0438, \u0447\u0442\u043e \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c - \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442.</p> <pre><code>from propan import Context\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    propan_app = Context(\"app\"),\n    publish = Context(\"broker.publish\"),\n    secret_key = Context(\"settings.app.secret_key\"),\n):\n    await publish(secret_key, \"secret-queue\")\n</code></pre>"},{"location":"ru/getting_started/5_dependency/2_context/#annotated","title":"Annotated","text":"<p>\u0421\u043f\u043e\u0441\u043e\u0431 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043d\u0435 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0443\u0434\u043e\u0431\u0435\u043d, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u043d\u043e \u0438 \u0442\u043e \u0436\u0435 \u043f\u043e\u043b\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443. \u0422\u0430\u043a\u0436\u0435, \u043e\u043d\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u044f\u0432\u043d\u043e\u0433\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u043d\u0430\u0448\u0435\u0439 IDE. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u0434\u043b\u0438\u043d\u043d\u044b\u0445 \u0446\u0435\u043f\u043e\u0447\u0435\u043a \u0438\u043c\u043f\u043e\u0440\u0442\u043e\u0432 \u0438 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u0434\u0430, <code>Context</code> \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c \u0441 <code>typing.Annotated</code>.</p> <pre><code>from propan import Context, RabbitBroker\nfrom typing_extension import Annotated\n\nBroker = Annotated[RabbitBroker, Context(\"broker\")]\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    broker: Broker,\n):\n    ...\n</code></pre> <p>\u0414\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 Propan \u0443\u0436\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u043e\u043b\u0435\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0432\u0430\u0448\u0435\u043c \u043a\u043e\u0434\u0435.</p> <pre><code>from propan import annotations\n\n@rabbit_broker.handle(\"test\")\nasync def base_handler(\n    body: dict,\n    app: annotations.App,\n    context: annotations.ContextRepo,\n    logger: annotations.Logger,\n    broker: annotations.RabbitBroker,\n    message: annotations.RabbitMessage,\n):\n    ...\n</code></pre>"},{"location":"ru/getting_started/5_dependency/2_context/#_4","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0415\u0441\u043b\u0438 \u0436\u0435 \u0432\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043f\u043e\u043b\u044e, \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435\u0442 \u0432 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435, \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043e\u0448\u0438\u0431\u043a\u0443 <code>pydantic.ValidationError</code>.</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u044b\u0442\u044b\u0432\u0430\u0435\u0442\u0435 \u0432 \u044d\u0442\u043e\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c.</p> <pre><code>from propan import Context\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    some_field = Context(default=None)\n):\n    assert some_field is None\n</code></pre>"},{"location":"ru/getting_started/5_dependency/2_context/#_5","title":"\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430","text":"<p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043f\u043e\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u041d\u0415 \u041f\u0420\u0418\u0412\u041e\u0414\u042f\u0422\u0421\u042f \u043a \u0442\u0438\u043f\u0443, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0432 \u0438\u0445 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u044d\u0442\u043e\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b, \u0432\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0444\u043b\u0430\u0433.</p> <pre><code>from propan import Context\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    some_field: int = Context(default=\"1\", cast=True)\n):\n    assert some_field == 1\n</code></pre>"},{"location":"ru/getting_started/5_dependency/2_context/#_6","title":"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430","text":""},{"location":"ru/getting_started/5_dependency/2_context/#_7","title":"\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e","text":"<p>\u0414\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 <code>context.set_global</code> \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043a\u043b\u044e\u0447\u0430, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043c\u0435\u0449\u0435\u043d \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442.</p> <pre><code>from propan.annotations import ContextRepo\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    context: ContextRepo\n):\n    context.set_global(\"my_key\", 1)\n</code></pre> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u043e\u043b\u0435 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u043b\u0435\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430: \u043e\u043d\u043e \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 <code>message</code>)</p> <p>\u0414\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>reset_global</code> <pre><code>context.reset_global(\"my_key\")\n</code></pre></p>"},{"location":"ru/getting_started/5_dependency/2_context/#_8","title":"\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e","text":"<p>\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 (\u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432\u043e \u0432\u0441\u0435\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445, \u0432\u044b\u0437\u0432\u0430\u043d\u043d\u044b\u0445 \u0432\u043d\u0443\u0442\u0440\u0438 \u043d\u0435\u0433\u043e) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 <code>scope</code></p> <pre><code>from propan import apply_types, Context\nfrom propan.annotations import ContextRepo\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    context: ContextRepo\n):\n    with context.scope(\"local\", 1):\n        nested_function()\n\n@apply_types\ndef nested_function(local = Context()):\n    assert local == 1\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435, \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e: \u0442\u043e\u0433\u0434\u0430 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u0442\u0435\u043a\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u0432\u044b \u0435\u0433\u043e \u043d\u0435 \u043e\u0447\u0438\u0441\u0442\u0438\u0442\u0435.</p> <pre><code>from propan import apply_types, Context\nfrom propan.annotations import ContextRepo\n\n@broker.hanlde(\"test\")\nasync def handler(\n    body: dict,\n    context: ContextRepo\n):\n    token = context.set_local(\"local\", 1):\n    nested_function()\n    context.reset_local(\"local\", token)\n\n@apply_types\ndef nested_function(local = Context()):\n    assert local == 1\n</code></pre>"},{"location":"ru/getting_started/5_dependency/2_context/#_9","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445","text":"<p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u0430\u043c \u0436\u0435, \u0433\u0434\u0435 \u0438 <code>Depends</code>:</p> <ul> <li>\u0432 \u0445\u0443\u043a\u0430\u0445 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430</li> <li>\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439</li> <li>\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u0445</li> </ul>"},{"location":"ru/getting_started/5_dependency/2_context/#depends","title":"Depends","text":"<p>\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 <code>Context</code> \u0432 <code>Depends</code> \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0438\u0441\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434: \u043a\u0430\u043a \u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 <code>Depends</code>, <code>Context</code> \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. </p> <pre><code>from propan import Context, Depends\n\ndef nested_func(\n    body: dict,\n    logger = Context()\n):\n    logger.info(body)\n    return body\n\n@broker.hanlde(\"test\")\nasync def handler(body: dict, n = Depends(nested_func)):\n    pass\n</code></pre>"},{"location":"ru/getting_started/5_dependency/2_context/#_10","title":"\u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","text":"<p>\u0415\u0441\u043b\u0438 \u0436\u0435 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0438 \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445, \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@apply_types</code>. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d\u0430 \u0432\u044b\u0437\u0432\u0430\u043d\u0430.</p> <pre><code>from propan import apply_types, Context\n\n@broker.hanlde(\"test\")\nasync def handler(body: dict):\n    nested_func()\n\n@apply_types\ndef nested_func(\n    body: dict,\n    logger = Context()\n):\n    logger.info(body)\n</code></pre> <p>\u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435 \u043c\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u043b\u0438 \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>logger</code>, \u043e\u043d \u0431\u044b\u043b \u043f\u043e\u043c\u0435\u0449\u0435\u043d \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.</p>"},{"location":"ru/helpful/in-progress/#_1","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f","text":"<p>Warning</p> <p>\u041f\u0440\u043e\u0441\u0442\u0438\u0442\u0435, \u0441\u0435\u0439\u0447\u0430\u0441 \u044d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u043d\u043e \u0441\u043e\u0432\u0441\u0435\u043c \u0441\u043a\u043e\u0440\u043e \u043e\u043d\u0430 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f. \u0417\u0430\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u043f\u043e\u0437\u0436\u0435...</p>"},{"location":"ru/helpful/missing-translation/#_1","title":"\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442","text":"<p>Warning</p> <p>\u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.</p>"},{"location":"ru/integrations/1_integrations-index/","title":"INTEGRATIONS","text":"<p>\u0411\u0440\u043e\u043a\u0435\u0440\u043e\u0432 Propan \u043e\u0447\u0435\u043d\u044c \u043b\u0435\u0433\u043a\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u043b\u044e\u0431\u044b\u043c \u0432\u0430\u0448\u0438\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c: \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e HTTP \u0444\u0435\u0440\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0445\u0443\u043a\u0438 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430.</p> FastAPIAiohttpBlacksheepFalconQuartSanic <p>Tip</p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Propan \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e \u0441 FastAPI, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u0430\u043c \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043b\u0430\u0433\u0438\u043d</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\napp = FastAPI()\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await broker.start()\n    yield\n    await broker.close()\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n</code></pre> <pre><code>from aiohttp import web\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\nasync def start_broker(app):\n    await broker.start()\n\n\nasync def stop_broker(app):\n    await broker.close()\n\n\nasync def hello(request):\n    return web.Response(text=\"Hello, world\")\n\n\napp = web.Application()\napp.add_routes([web.get(\"/\", hello)])\napp.on_startup.append(start_broker)\napp.on_cleanup.append(stop_broker)\n\n\nif __name__ == \"__main__\":\n    web.run_app(app)\n</code></pre> <pre><code>from blacksheep import Application\nfrom propan import RabbitBroker\n\napp = Application()\n\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\n@app.on_start\nasync def start_broker(application: Application) -&gt; None:\n    await broker.start()\n\n\n@app.on_stop\nasync def stop_broker(application: Application) -&gt; None:\n    await broker.close()\n\n\n@app.route(\"/\")\nasync def home():\n    return \"Hello, World!\"\n</code></pre> <pre><code>import falcon\nimport falcon.asgi\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\nclass ThingsResource:\n    async def on_get(self, req, resp):\n        resp.status = falcon.HTTP_200\n        resp.content_type = falcon.MEDIA_TEXT\n        resp.text = (\n            \"\\nTwo things awe me most, the starry sky \"\n            \"above me and the moral law within me.\\n\"\n            \"\\n\"\n            \"    ~ Immanuel Kant\\n\\n\"\n        )\n\n\nclass PropanMiddleware:\n    async def process_startup(self, scope, event):\n        await broker.start()\n\n    async def process_shutdown(self, scope, event):\n        await broker.close()\n\n\napp = falcon.asgi.App()\napp.add_middleware(PropanMiddleware())\napp.add_route(\"/things\", ThingsResource())\n</code></pre> <pre><code>from quart import Quart\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\napp = Quart(__name__)\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\n@app.before_serving\nasync def start_broker():\n    await broker.start()\n\n\n@app.after_serving\nasync def stop_broker():\n    await broker.close()\n\n\n@app.route(\"/\")\nasync def json():\n    return {\"hello\": \"world\"}\n</code></pre> <pre><code>from sanic import Sanic\nfrom sanic.response import text\nfrom propan import RabbitBroker\n\napp = Sanic(\"MyHelloWorldApp\")\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\n@app.after_server_start\nasync def start_broker(app, loop):\n    await broker.start()\n\n\n@app.after_server_stop\nasync def stop_broker(app, loop):\n    await broker.close()\n\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n</code></pre> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u0445\u0443\u043a\u0430 \u043d\u0435 \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e.</p> Tornado <pre><code>import asyncio\n\nimport tornado.web\nfrom propan import RabbitBroker\n\nbroker = RabbitBroker(\"amqp://guest:guest@localhost:5672/\")\n\n\n@broker.handle(\"test\")\nasync def base_handler(body):\n    print(body)\n\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\n\ndef make_app():\n    return tornado.web.Application(\n        [\n            (r\"/\", MainHandler),\n        ]\n    )\n\n\nasync def main():\n    app = make_app()\n    app.listen(8888)\n\n    await broker.start()\n    try:\n        await asyncio.Event().wait()\n    finally:\n        await broker.close()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/integrations/2_fastapi-plugin/#_1","title":"\u041f\u0440\u0438\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>Propan \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c FastAPI.</p> <p>\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043d\u0443\u0436\u043d\u044b\u0439 \u0432\u0430\u043c PropanRouter \u0438 \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 <code>@event</code>. \u042d\u0442\u043e\u0442 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u0435\u043d \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0443 <code>@handle</code> \u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u044e\u0449\u0438\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432.</p> <p>Tip</p> <p>\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c Propan \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 FastAPI. \u0422.\u0435. \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>Depends</code>, <code>BackgroundTasks</code> \u0438 \u043f\u0440\u043e\u0447\u0438\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b FastAPI \u0442\u0430\u043a, \u0435\u0441\u043b\u0438 \u0431\u044b \u044d\u0442\u043e \u0431\u044b\u043b \u043e\u0431\u044b\u0447\u043d\u044b\u0439 HTTP-endpoint.</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432 \u043a\u043e\u0434\u0435 \u043d\u0438\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>fastapi.Depends</code>, \u0430 \u043d\u0435 <code>propan.Depends</code>.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import RedisRouter\n\nrouter = RedisRouter(\"redis://localhost:6379\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, Redis!\" }\n\n@router.get(\"/\")\nasync def hello_http():\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, Rabbit!\" }\n\n@router.get(\"/\")\nasync def hello_http():\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import KafkaRouter\n\nrouter = KafkaRouter(\"localhost:9092\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, Kafka!\" }\n\n@router.get(\"/\")\nasync def hello_http():\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import SQSRouter\n\nrouter = SQSRouter(\"http://localhost:9324\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, SQS!\" }\n\n@router.get(\"/\")\nasync def hello_http():\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import Depends, FastAPI\nfrom pydantic import BaseModel\nfrom propan.fastapi import NatsRouter\n\nrouter = NatsRouter(\"nats://localhost:4222\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\nclass Incoming(BaseModel):\n    m: dict\n\ndef call():\n    return True\n\n@router.event(\"test\")\nasync def hello(m: Incoming, d = Depends(call)) -&gt; dict:\n    return { \"response\": \"Hello, Nats!\" }\n\n@router.get(\"/\")\nasync def hello_http():\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <p>\u041f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0432\u0441\u0435 \u0442\u0435\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438 \u0432 <code>body</code>, \u0438 \u0432 <code>path</code> \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a \u043d\u0438\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043b\u044e\u0431\u044b\u043c \u0443\u0434\u043e\u0431\u043d\u044b\u043c \u0434\u043b\u044f \u0432\u0430\u0441 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u0432 <code>headers</code>.</p> <p>\u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u0440\u043e\u0443\u0442\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a <code>HttpRouter</code> (\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u043e\u043c \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f). \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0442\u044c \u0441 \u0435\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043b\u044e\u0431\u044b\u0435 <code>get</code>, <code>post</code>, <code>put</code> \u0438 \u043f\u0440\u043e\u0447\u0438\u0435 HTTP \u043c\u0435\u0442\u043e\u0434\u044b. \u041a\u0430\u043a \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 19.</p> <p>Warning</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u0448 ASGI \u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 state \u0432\u043d\u0443\u0442\u0440\u0438 lifespan, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u044d\u0442\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: <pre><code>router = PropanRouter(..., setup_state=False)\n</code></pre> \u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0440\u043e\u043a\u0435\u0440\u0443 \u0438\u0437 state \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u043d\u043e \u043e\u043d \u0432\u0441\u0435 \u0435\u0449\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043a\u0430\u043a \u043f\u043e\u043b\u0435 <code>router.broker</code>)</p>"},{"location":"ru/integrations/2_fastapi-plugin/#_2","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0412\u043d\u0443\u0442\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0435\u0441\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u044e\u0449\u0438\u0439 \u0431\u0440\u043e\u043a\u0435\u0440. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a \u043d\u0435\u043c\u0443 \u0434\u043e\u0441\u0442\u0443\u043f, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 MQ.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import RedisRouter\n\nrouter = RedisRouter(\"redis://localhost:6379\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.get(\"/\")\nasync def hello_http():\n    await router.broker.publish(\"Hello, Redis!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.get(\"/\")\nasync def hello_http():\n    await router.broker.publish(\"Hello, Rabbit!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import KafkaRouter\n\nrouter = KafkaRouter(\"localhost:9092\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.get(\"/\")\nasync def hello_http():\n    await router.broker.publish(\"Hello, Kafka!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import SQSRouter\n\nrouter = SQSRouter(\"http://localhost:9324\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.get(\"/\")\nasync def hello_http():\n    await router.broker.publish(\"Hello, SQS!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import NatsRouter\n\nrouter = NatsRouter(\"nats://localhost:4222\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.get(\"/\")\nasync def hello_http():\n    await router.broker.publish(\"Hello, Nats!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0444\u043e\u0440\u043c\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0440\u043e\u043a\u0435\u0440\u0443 \u0432 \u0432\u0438\u0434\u0435 <code>Depends</code>, \u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0447\u0430\u0441\u0442\u044f\u0445 \u0432\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.</p> RedisRabbitMQKafkaSQSNATS <pre><code>from fastapi import FastAPI, Depends\nfrom propan import RedisBroker\nfrom propan.fastapi import RedisRouter\nfrom typing_extensions import Annotated\n\nrouter = RedisRouter(\"redis://localhost:6379\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\ndef broker():\n    return router.broker\n\n@router.get(\"/\")\nasync def hello_http(broker: Annotated[RedisBroker, Depends(broker)]):\n    await broker.publish(\"Hello, Redis!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI, Depends\nfrom propan import RabbitBroker\nfrom propan.fastapi import RabbitRouter\nfrom typing_extensions import Annotated\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\ndef broker():\n    return router.broker\n\n@router.get(\"/\")\nasync def hello_http(broker: Annotated[RabbitBroker, Depends(broker)]):\n    await broker.publish(\"Hello, Rabbit!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI, Depends\nfrom propan import KafkaBroker\nfrom propan.fastapi import KafkaRouter\nfrom typing_extensions import Annotated\n\nrouter = KafkaRouter(\"localhost:9092\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\ndef broker():\n    return router.broker\n\n@router.get(\"/\")\nasync def hello_http(broker: Annotated[KafkaBroker, Depends(broker)]):\n    await broker.publish(\"Hello, Kafka!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI, Depends\nfrom propan import SQSBroker\nfrom propan.fastapi import SQSRouter\nfrom typing_extensions import Annotated\n\nrouter = SQSRouter(\"http://localhost:9324\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\ndef broker():\n    return router.broker\n\n@router.get(\"/\")\nasync def hello_http(broker: Annotated[SQSBroker, Depends(broker)]):\n    await broker.publish(\"Hello, SQS!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI, Depends\nfrom propan import NatsBroker\nfrom propan.fastapi import NatsRouter\nfrom typing_extensions import Annotated\n\nrouter = NatsRouter(\"nats://localhost:4222\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\ndef broker():\n    return router.broker\n\n@router.get(\"/\")\nasync def hello_http(broker: Annotated[NatsBroker, Depends(broker)]):\n    await broker.publish(\"Hello, Nats!\", \"test\")\n    return \"Hello, HTTP!\"\n\napp.include_router(router)\n</code></pre> <p>\u041b\u0438\u0431\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0440\u043e\u043a\u0435\u0440\u0443 \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI</p> <pre><code>@app.get(\"/\")\ndef main(request: Request):\n    broker = request.state.broker\n</code></pre>"},{"location":"ru/integrations/2_fastapi-plugin/#after_startup","title":"@after_startup","text":"<p>\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 <code>PropanApp</code> \u0438\u043c\u0435\u0435\u0442 \u0445\u0443\u043a <code>after_startup</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u0432\u0430\u0448\u0438\u043c \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043d\u0438\u043c \u0431\u0443\u0434\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043a\u0440\u0430\u0439\u043d\u0435 \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0438/\u0438\u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u042d\u0442\u043e\u0442 \u0445\u0443\u043a \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0438 \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 FastAPI PropanRouter</p> RedisRabbitMQKafkaSQSNATS <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import RedisRouter\n\nrouter = RedisRouter(\"redis://localhost:6379\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.after_startup\ndef do_smth(app: FastAPI):\n    ...\n\n@router.after_startup\nasync def publish_smth(app: FastAPI):\n    await router.broker.publish(...)\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\"amqp://guest:guest@localhost:5672\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.after_startup\ndef do_smth(app: FastAPI):\n    ...\n\n@router.after_startup\nasync def publish_smth(app: FastAPI):\n    await router.broker.publish(...)\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import KafkaRouter\n\nrouter = KafkaRouter(\"localhost:9092\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.after_startup\ndef do_smth(app: FastAPI):\n    ...\n\n@router.after_startup\nasync def publish_smth(app: FastAPI):\n    await router.broker.publish(...)\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import SQSRouter\n\nrouter = SQSRouter(\"http://localhost:9324\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.after_startup\ndef do_smth(app: FastAPI):\n    ...\n\n@router.after_startup\nasync def publish_smth(app: FastAPI):\n    await router.broker.publish(...)\n\napp.include_router(router)\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom propan.fastapi import NatsRouter\n\nrouter = NatsRouter(\"nats://localhost:4222\")\n\napp = FastAPI(lifespan=router.lifespan_context)\n\n@router.after_startup\ndef do_smth(app: FastAPI):\n    ...\n\n@router.after_startup\nasync def publish_smth(app: FastAPI):\n    await router.broker.publish(...)\n\napp.include_router(router)\n</code></pre> <p>Tip</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u0448 \u0445\u0443\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>dict</code> \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043e\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0432 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e yield \u0432 lifespan)</p>"},{"location":"ru/integrations/2_fastapi-plugin/#_3","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<p>\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 Propan \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0434\u043b\u044f FastAPI, \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0445\u043e\u0441\u0442\u0438\u043d\u0433\u0430 AsyncAPI \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432 \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:</p> <pre><code>from propan.fastapi import RabbitRouter\n\nrouter = RabbitRouter(\n    schema_url=\"/asyncapi\",\n    include_in_schema=True,\n)\n</code></pre>"},{"location":"ru/kafka/1_kafka-index/#_1","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f","text":"<p>Warning</p> <p>\u041f\u0440\u043e\u0441\u0442\u0438\u0442\u0435, \u0441\u0435\u0439\u0447\u0430\u0441 \u044d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u043d\u043e \u0441\u043e\u0432\u0441\u0435\u043c \u0441\u043a\u043e\u0440\u043e \u043e\u043d\u0430 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f. \u0417\u0430\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u043f\u043e\u0437\u0436\u0435...</p>"},{"location":"ru/nats/1_nats-index/#_1","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438","text":"<p>NATS -  \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u044b\u0441\u043e\u043a\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 Golang. \u0415\u0441\u043b\u0438 \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438, \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439, \u043f\u0440\u043e\u0441\u0442\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u043d\u0430 \u0436\u0435\u043b\u0435\u0437\u043e, NATS \u0441\u0442\u0430\u043d\u0435\u0442 \u0434\u043b\u044f \u0432\u0430\u0441 \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u043c.</p> <p>Note</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0441 NATS \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0443 NATS \u0435\u0441\u0442\u044c \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u0430\u043c \u0441\u0442\u043e\u0438\u0442 \u0437\u043d\u0430\u0442\u044c:</p> <ul> <li>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0435 \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u044b. \u0415\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043e \u043f\u043e\u043a\u0430 \u0432\u0430\u0448 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d - \u043e\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u043e.</li> <li>\u041e\u0442\u0441\u0442\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438.</li> <li>\u041e\u0442\u0441\u0442\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f.</li> </ul> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u044d\u0442\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f - JetStream. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u044b \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0443\u0449\u0435\u0440\u0431 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u044b\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f NatsJS.</p>"},{"location":"ru/nats/1_nats-index/#_2","title":"\u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438","text":"<p>NATS \u043d\u0435 \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438. \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c\u044e \u0432 NATS \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f <code>subject</code>, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043b\u0438\u0431\u043e \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043f\u043e \u0438\u043c\u0435\u043d\u0438, \u043b\u0438\u0431\u043e \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f.</p> <p>\u041e\u0431\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u044b \u0447\u0443\u0442\u044c \u0434\u0430\u043b\u0435\u0435.</p> <p>\u0421 \u0446\u0435\u043b\u044c\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439, NATS \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b <code>queue group</code>: \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u0432 <code>subject</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u043c \u0438\u0437 <code>queue group</code>, \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439 \u043d\u0430 \u044d\u0442\u043e\u0442 <code>subject</code>. \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 <code>subject</code> \u0432 N \u0440\u0430\u0437 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 N \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u043e\u0439. </p>"},{"location":"ru/nats/2_publishing/","title":"NATS Publishing","text":"<p>\u0414\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 <code>NatsBroker</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0443\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 <code>publish</code>.</p> <pre><code>import asyncio\nfrom propan import NatsBroker\n\nasync def pub():\n    async with NatsBroker() as broker:\n        await broker.publish(\"Hi!\", subject=\"test\")\n\nasyncio.run(pub())\n</code></pre>"},{"location":"ru/nats/2_publishing/#_1","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>publish</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:</p> <ul> <li><code>message</code>: bytes | str | dict | Sequence[Any] | pydantic.BaseModel - \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438</li> <li><code>subject</code>: str - subject, \u043a\u0443\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> </ul>"},{"location":"ru/nats/2_publishing/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f","text":"<ul> <li><code>headers</code>: dict[str, Any] | None = None - \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438)</li> </ul>"},{"location":"ru/nats/2_publishing/#rpc","title":"RPC \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b","text":"<p>\u0422\u0430\u043a\u0436\u0435 <code>publish</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f RPC \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432:</p> <ul> <li><code>reply_to</code>: str = \"\" - \u0432 \u043a\u0430\u043a\u043e\u0439 channel \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 RPC \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432)</li> <li><code>callback</code>: bool = False - \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043b\u0438 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>callback_timeout</code>: float | None = 30.0 - \u0442\u0430\u0439\u043c\u0430\u0443\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 <code>None</code> - \u0436\u0434\u0435\u0442 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e</li> <li><code>raise_timeout</code>: bool = False<ul> <li><code>False</code> - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c None \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430</li> <li><code>True</code> - \u043e\u0448\u0438\u0431\u043a\u0430 <code>TimeoutError</code> \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430</li> </ul> </li> </ul>"},{"location":"ru/nats/4_nats-js/","title":"NATS JetStream","text":"<p>\u041e\u0431\u044b\u0447\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 NATS \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445:</p> <ul> <li><code>publisher</code> \u0438 <code>consumer</code> \u0432\u0441\u0435\u0433\u0434\u0430 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043e\u043d\u043b\u0430\u0439\u043d;</li> <li>\u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u043e\u0442\u0435\u0440\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</li> </ul> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u044b \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e:</p> <ul> <li>\u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (<code>ack</code>/<code>nack</code>);</li> <li>\u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u043f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 <code>consumer</code>'\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043d\u0430\u043a\u0430\u043f\u043b\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u0438).</li> </ul> <p>\u0412\u0430\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 NATS JetStream.</p> <p>\u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 JetStream - \u044d\u0442\u043e \u0442\u043e\u0442 \u0436\u0435 \u0441\u0430\u043c\u044b\u0439 NATS \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u044f \u043d\u0430\u0434 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u0438. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0441\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b \u043e\u0431\u044b\u0447\u043d\u043e\u043c\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e NATS.</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0441\u0430\u043c\u0430 \u043b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043b\u043e\u044f JetStream \u0438\u043c\u0435\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0434\u043b\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: \u043e\u0442 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0440\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0434\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0445\u0440\u0430\u043d\u0438\u043c\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438 JetStream \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430\u043c\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0442\u043e \u0432\u0430\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u043d\u0430\u0442\u044c, \u0447\u0442\u043e \u043b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b JS \u0431\u043b\u0438\u0436\u0435 \u043a Kafka, \u043d\u0435\u0436\u0435\u043b\u0438 \u043a RabbitMQ: \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u0430 \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u0442\u0430\u043c \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0435 \u043d\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0438 \u043d\u0435 \u043d\u0430\u0447\u043d\u0435\u0442 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u043b\u0438\u0431\u043e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u0438).</p> <p>\u041f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 <code>consumer</code>'\u0430 (\u0438, \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e, \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438) \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0430\u043c\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0438\u0438 \u0441 \u043a\u0430\u043a\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f: \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u043d\u0430\u0447\u0430\u043b\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u043e\u0432\u044b\u0435 \u0438 \u0442.\u0434. \u041d\u0435 \u0443\u0434\u0438\u0432\u043b\u044f\u0439\u0442\u0435\u0441\u044c, \u0435\u0441\u043b\u0438 \u043f\u0440\u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0432\u0430\u0448 <code>consumer</code> \u043d\u0430\u0447\u043d\u0435\u0442 \u0437\u0430\u043d\u043e\u0432\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0430\u043d\u0435\u0435 - \u0432\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438 \u044d\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u043e.</p> <p>\u0422\u0430\u043a\u0436\u0435 NATS JetStream \u0438\u043c\u0435\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0435 <code>key-value</code>(c\u0445\u043e\u0436\u0435 \u0441 Redis) \u0438 <code>object</code>(\u0441\u0445\u043e\u0436\u0435 \u0441 Minio) \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435, \u043f\u043e\u043c\u0438\u043c\u043e \u0441\u0432\u043e\u0435\u0433\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c/\u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0438\u043c\u0435\u044e\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043a\u0440\u0430\u0439\u043d\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0432\u043e \u043c\u043d\u043e\u0433\u0438\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445.</p> <p>Propan \u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u044d\u0442\u043e\u043c\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0443 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e, \u043e\u0434\u043d\u0430\u043a\u043e \u043e\u043d \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 nats-py. \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443 JS \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>from propan import PropanApp, NatsJSBroker\nfrom propan.annotations import NatsJS\n\nbroker = NatsJSBroker()\napp = PropanApp(broker)\n\n@app.after_startup\nasync def example(js: NatsJS):\n    # JS Key-Value Storage\n    storage = await js.create_key_value(bucket=\"propan_kv\")\n\n    await storage.put(\"hello\", b\"propan!\")\n    assert (await storage.get(\"hello\")) == b\"propan!\"\n\n    # JS Object Storage\n    storage = await js.create_object_store(\"propan-obs\")\n\n    obj_name = \"file.mp4\"\n    with open(obj_name) as f:\n        await storage.put(obj_name, f)\n\n    with open(f\"copy-{obj_name}\") as f:\n        await storage.get(obj_name, f)\n</code></pre>"},{"location":"ru/nats/3_examples/1_direct/","title":"Direct","text":"<p>Direct Subject - \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 NATS. \u0415\u0433\u043e \u0441\u0443\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u0430: <code>subject</code> \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c, \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c \u043d\u0430 \u043d\u0435\u0433\u043e.</p>"},{"location":"ru/nats/3_examples/1_direct/#_1","title":"\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0415\u0441\u043b\u0438 \u043e\u0434\u0438\u043d <code>subject</code> \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0439 <code>queue group</code>, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u043c\u0443 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044e.</p> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, NATS \u043c\u043e\u0436\u0435\u0442 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u0438. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u0442\u043e\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0432 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0430\u043d\u0441\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u0430-\u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f. \u0412\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b: NATS \u0441\u0430\u043c \u043f\u043e\u0437\u0430\u0431\u043e\u0442\u0438\u0442\u0441\u044f \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0432\u0430\u0448\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438.</p>"},{"location":"ru/nats/3_examples/1_direct/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<p>Direct Subject - \u0442\u0438\u043f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0432 Propan \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c</p> <pre><code>@broker.handler(\"test_subject\")\nasync def handler():\n    ...\n</code></pre> <p>\u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>from propan import PropanApp, NatsBroker\nfrom propan.annotations import Logger\n\nbroker = NatsBroker()\napp = PropanApp(broker)\n\n@broker.handle(\"test-subj-1\", \"workers\")\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(\"test-subj-1\", \"workers\")\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(\"test-subj-2\", \"workers\")\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(\"\", \"test-subj-1\")  # handlers: 1 or 2\n    await broker.publish(\"\", \"test-subj-1\")  # handlers: 1 or 2\n    await broker.publish(\"\", \"test-subj-2\")  # handlers: 3\n</code></pre>"},{"location":"ru/nats/3_examples/1_direct/#_3","title":"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043e\u0431\u044a\u044f\u0432\u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0434\u0432\u0443\u0445 <code>subject</code>: <code>test-subj-1</code> \u0438 <code>test-subj-2</code>:</p> <pre><code>@broker.handle(\"test-subj-1\", \"workers\")\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(\"test-subj-1\", \"workers\")\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(\"test-subj-2\", \"workers\")\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n</code></pre> <p>Note</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432\u0441\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0434\u043d\u043e\u0439 <code>queue_group</code>: \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u044d\u0442\u043e \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u044d\u0442\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e. \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u044d\u043c\u0443\u043b\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0443 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.</p>"},{"location":"ru/nats/3_examples/1_direct/#_4","title":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>    await broker.publish(\"\", \"test-subj-1\")  # handlers: 1 or 2\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>1</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code> \u0438\u043b\u0438 <code>handler2</code>, \u0442.\u043a. \u043e\u043d\u0438 \u0441\u043b\u0443\u0448\u0430\u044e\u0442 \u043e\u0434\u0438\u043d <code>subject</code> \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0439 <code>queue group</code></p> <pre><code>    await broker.publish(\"\", \"test-subj-1\")  # handlers: 1 or 2\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>2</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044e <code>1</code></p> <pre><code>    await broker.publish(\"\", \"test-subj-2\")  # handlers: 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>3</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler3</code>, \u0442.\u043a. \u043e\u043d \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>test-subj-2</code></p>"},{"location":"ru/nats/3_examples/2_pattern/","title":"Pattern","text":"<p>Pattern Subject - \u043c\u043e\u0449\u043d\u044b\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 NATS. \u0414\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f <code>subject</code> \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0438\u0438 \u0441 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u043c, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438 \u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a <code>subject</code> \u0438 \u043a\u043b\u044e\u0447\u043e\u043c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p>"},{"location":"ru/nats/3_examples/2_pattern/#_1","title":"\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0415\u0441\u043b\u0438 \u043e\u0434\u0438\u043d <code>subject</code> \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0439 <code>queue group</code>, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u043c\u0443 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044e.</p> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, NATS \u043c\u043e\u0436\u0435\u0442 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u0438. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u0442\u043e\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0432 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0430\u043d\u0441\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u0430-\u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f. \u0412\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b: NATS \u0441\u0430\u043c \u043f\u043e\u0437\u0430\u0431\u043e\u0442\u0438\u0442\u0441\u044f \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0432\u0430\u0448\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438.</p>"},{"location":"ru/nats/3_examples/2_pattern/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from propan import PropanApp, NatsBroker\nfrom propan.annotations import Logger\n\nbroker = NatsBroker()\napp = PropanApp(broker)\n\n@broker.handle(\"*.info\", \"workers\")\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(\"*.info\", \"workers\")\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(\"*.error\", \"workers\")\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(\"\", \"logs.info\")  # handlers: 1 or 2\n    await broker.publish(\"\", \"logs.info\")  # handlers: 1 or 2\n    await broker.publish(\"\", \"logs.error\") # handlers: 3\n</code></pre>"},{"location":"ru/nats/3_examples/2_pattern/#_3","title":"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043e\u0431\u044a\u044f\u0432\u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0434\u0432\u0443\u0445 <code>subject</code>: <code>*.info</code> \u0438 <code>*.error</code>:</p> <pre><code>@broker.handle(\"*.info\", \"workers\")\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(\"*.info\", \"workers\")\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(\"*.error\", \"workers\")\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n</code></pre> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 <code>subject</code> \u043d\u0430\u0448\u0438\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u043c\u044b \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0430\u0442\u0442\u0435\u0440\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0443\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u0438\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u043c\u044f.</p> <p>Note</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432\u0441\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0434\u043d\u043e\u0439 <code>queue_group</code>: \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u044d\u0442\u043e \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u044d\u0442\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e. \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u044d\u043c\u0443\u043b\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0443 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.</p>"},{"location":"ru/nats/3_examples/2_pattern/#_4","title":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>    await broker.publish(\"\", \"logs.info\")  # handlers: 1 or 2\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>1</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code> \u0438\u043b\u0438 <code>handler2</code>, \u0442.\u043a. \u043e\u043d\u0438 \u0441\u043b\u0443\u0448\u0430\u044e\u0442 \u043e\u0434\u0438\u043d \u0448\u0430\u0431\u043b\u043e\u043d <code>subject</code> \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0439 <code>queue group</code></p> <pre><code>    await broker.publish(\"\", \"logs.info\")  # handlers: 1 or 2\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>2</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044e <code>1</code></p> <pre><code>    await broker.publish(\"\", \"logs.error\") # handlers: 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>3</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler3</code>, \u0442.\u043a. \u043e\u043d \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d <code>*.error*</code></p>"},{"location":"ru/rabbit/1_routing/","title":"RabbitMQ","text":""},{"location":"ru/rabbit/1_routing/#_1","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430","text":"<p>\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u043c RabbitMQ \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0433\u0438\u0431\u043a\u0438\u0435 \u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p> <p>RabbitMQ \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0432\u0435\u0441\u044c \u0441\u043f\u0435\u043a\u0442\u0440 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u043e\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432: \u043e\u0434\u043d\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u044c - \u043e\u0434\u0438\u043d \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c, \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c\u0438, \u0433\u0434\u0435 \u043e\u0434\u0438\u043d \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u0440\u0430\u0437\u0443 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432, \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0437\u0443 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p> <p>Note</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 RabbitMQ \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435</p> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u043d \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0442\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043e\u0442\u043c\u0435\u0447\u0430\u0442\u044c \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u043c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 (\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c, \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0438 \u043e\u0442 Kafka), \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0430 \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043b\u0435\u0434\u0438\u0442\u044c \u0437\u0430 \u0435\u0433\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u043c \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u043c.</p> <p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043b\u0435\u0434\u0438\u0442\u044c \u0437\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u043c \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u043c \u0432\u0441\u0435\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043f\u0440\u043e\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 RabbitMQ. \u041f\u0440\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0431\u044a\u0435\u043c\u0430\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, RabbitMQ \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0434\u0435\u0433\u0440\u0430\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0431\u044b\u043b \"\u0440\u0430\u0437\u043e\u0432\u044b\u0439 \u043d\u0430\u043f\u043b\u044b\u0432\", \u0442\u043e \u043f\u043e \u043c\u0435\u0440\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0438 \u0431\u0443\u0434\u0443\u0442 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0442\u044c \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \"\u0441\u0430\u043c\u043e\u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0435\" RabbitMQ \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c\u0441\u044f.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u0448 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u043d\u0435 \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 - RabbitMQ \u0431\u0443\u0434\u0435\u0442 \u0434\u043b\u044f \u0432\u0430\u0441 \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u043c.</p>"},{"location":"ru/rabbit/1_routing/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0434\u043e\u0441\u043a\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0442\u043e\u043c, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 RabbitMQ, \u0432\u0430\u043c \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u044c \u0438\u0445 \u043e\u0444\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442. \u0417\u0434\u0435\u0441\u044c \u0436\u0435 \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439 \u0440\u0430\u0437\u0431\u043e\u0440 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043f\u043e\u043d\u044f\u0442\u0438\u0439 \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f.</p>"},{"location":"ru/rabbit/1_routing/#_3","title":"\u0421\u0443\u0449\u043d\u043e\u0441\u0442\u0438","text":"<p>RabbitMQ \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0442\u0440\u0435\u043c\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044f\u043c\u0438:</p> <ul> <li><code>Exchange</code> - (\"\u043e\u0431\u043c\u0435\u043d\u043d\u0438\u043a\") \u0442\u043e\u0447\u043a\u0430 \u043f\u0440\u0438\u0435\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 publisher'\u043e\u0432</li> <li><code>Queue</code> - (\u043e\u0447\u0435\u0440\u0435\u0434\u044c) \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f consumer'\u0430\u043c</li> <li><code>Binding</code> - (\u0441\u0432\u044f\u0437\u044c) \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 queue-exchange \u0438\u043b\u0438 exchange-exchange</li> </ul>"},{"location":"ru/rabbit/1_routing/#_4","title":"\u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438","text":"<p>\u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0434\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0442\u0438\u043f\u0430 exchange \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 binding. \u0412\u0441\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u044b \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445.</p> <p>\u0412 \u043e\u0431\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0443\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <ol> <li>Publisher \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 <code>exchange</code>, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044f \u0435\u0433\u043e <code>routing_key</code> \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f</li> <li><code>exchange</code> \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0432 \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043d\u0435\u0433\u043e <code>bindings</code> \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>binding</code> \u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e <code>queue</code> \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0433\u043e <code>exchange</code> (\u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u043d \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442 \u0435\u0433\u043e \u0434\u0430\u043b\u044c\u0448\u0435 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0438\u0438 \u0441\u043e \u0441\u0432\u043e\u0438\u043c\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438)</li> <li><code>queue</code>, \u043f\u043e\u043b\u0443\u0447\u0438\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u043e\u0434\u043d\u043e\u043c\u0443 (\u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u043c\u0443 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442)  \u0438\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 (PUSH API)</li> </ol> <p>Tip</p> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u0441\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0438\u043c\u0435\u044e\u0442 <code>binding</code> \u043a <code>default exchange</code> (\u0442\u0438\u043f Direct) \u0441 routing key, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u044e\u0449\u0438\u043c \u0438\u0445 \u0438\u043c\u0435\u043d\u0438. \u0412 Propan \u0438\u043c\u0435\u043d\u043d\u043e \u0432 \u044d\u0442\u043e\u0442 <code>exchange</code> \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0434\u0440\u0443\u0433\u043e\u0439 <code>exchange</code> \u044f\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c.</p> <p>\u041f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u043a \u043b\u044e\u0431\u043e\u043c\u0443 \u0434\u0440\u0443\u0433\u043e\u043c\u0443 <code>exchange</code>, \u043e\u043d\u0430 \u0432\u0441\u0435 \u0442\u0430\u043a\u0436\u0435 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439 \u043d\u0430 <code>default exchange</code>. \u0411\u0443\u0434\u044c\u0442\u0435 \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u044b \u0441 \u044d\u0442\u0438\u043c.</p> <p>\u041d\u0430 \u044d\u0442\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 - \u0438 \u0432\u044b \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u0435\u0442\u0435 \u043a \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435.</p>"},{"location":"ru/rabbit/1_routing/#_5","title":"\u0421\u0442\u0430\u0442\u0443\u0441\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>RabbitMQ \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043e\u043d \u0441\u043c\u043e\u0436\u0435\u0442 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0435\u0433\u043e \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438.</p> <p>\u0422\u0430\u043a\u043e\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u044b\u043c (<code>Acknowledgement - ack</code>), \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e, \u0442\u0430\u043a \u0438 \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u044b\u043c (<code>Negative Acknowledgement - nack</code>), \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.</p> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u043e \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 (<code>reject</code>), \u0438\u043d\u0430\u0447\u0435, \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043e\u043d\u043e \u0443\u0439\u0434\u0435\u0442 \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043d\u043e\u0432\u0430.</p> <p>\u0412 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 Propan \u0441\u0430\u043c \u0441\u043e\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f: \u043e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0436\u0438\u0437\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u0430\u043c\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0443 \"at most once\" \u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u043e \u0435\u0433\u043e \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</p>"},{"location":"ru/rabbit/1_routing/#propan","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 Propan","text":"<p>Propan \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c <code>bindings</code> \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e, \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0443 \u0432\u0430\u0441 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e <code>exchange</code> \u0438\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c <code>exchange</code> \u0434\u0440\u0443\u0433 \u043d\u0430 \u0434\u0440\u0443\u0433\u0430. \u041d\u0430\u043f\u0440\u043e\u0442\u0438\u0432, \u0442\u0430\u043a\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u043f\u0435\u0440\u0435\u0443\u0441\u043b\u043e\u0436\u043d\u0435\u043d\u0438\u044e \u0441\u0445\u0435\u043c\u044b \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0447\u0442\u043e \u0437\u0430\u0442\u0440\u0443\u0434\u043d\u044f\u0435\u0442 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0435 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0435 \u0432\u0441\u0435\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432.</p> <p>Propan \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0432\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u0445\u0435\u043c\u044b \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f <code>exchange:queue</code> \u043a\u0430\u043a <code>1:N</code>, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0441\u0445\u0435\u043c\u0443 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0432\u0430\u0448\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u041b\u0443\u0447\u0448\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 <code>exchange</code>, \u0447\u0435\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430 \u043d\u0435\u0433\u043e \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e.</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u043c RabbitMQ, \u0438 \u0442\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c (\u0438\u043b\u0438 \u0432\u044b \u0442\u043e\u0447\u043d\u043e \u0437\u043d\u0430\u0435\u0442\u0435 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0435), Propan \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c <code>bindings</code> \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e. \u0412 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u043e\u0442\u044a\u0435\u043c\u043b\u0435\u043c\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 RabbitQueue \u0438 RabbitExchange \u0432 Propan.</p>"},{"location":"ru/rabbit/2_exchanges/","title":"EXCHANGES","text":"<p>\u0414\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f <code>Exchange</code> \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0432 <code>Propan</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 <code>propan.brokers.rabbit.RabbitExchange</code>.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u043a \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0442\u0430\u043a \u0438 \u043f\u0440\u0438 \u0438\u0445 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435:</p> <pre><code>from propan.brokers.rabbit import RabbitBroker, RabbitExchange\n\nbroker = RabbitBroker()\n\n@broker.handler(\"test\", exchange=RabbitExchange(\"test\"))\nasync def handler():\n    ...\n\n...\n    await broker.publish(\"Hi!\", \"test\", exchange=RabbitExchange(\"test\"))\n</code></pre> <p>\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 <code>RabbitExchange</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:</p> <ul> <li><code>name</code>: str - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 exchange</li> <li><code>type</code>: propan.brokers.rabbit.RabbitExchange = RabbitExchange.DIRECT - \u0442\u0438\u043f \u0432\u0430\u0448\u0435\u0433\u043e exchange</li> <li><code>durable</code>: bool = False - \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 True, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 exchange \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 RabbitMQ</li> <li><code>auto_delete</code>: bool = False - \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 True, exchange \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d \u043f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0438\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0433\u043e \u0441\u043b\u0443\u0448\u0430\u044e\u0442</li> <li><code>passive</code>: bool = False<ul> <li>\u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 <code>False</code>, Propan \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u0442\u044c exchange \u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043b\u0438\u0431\u043e \u043f\u0440\u043e\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0438\u0435 \u044d\u0442\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c\u0443 exchange \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c.</li> <li>\u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 <code>True</code>, Propan \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c exchange, \u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0441\u044f \u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c\u0443. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e exchange \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0430</li> </ul> </li> <li><code>internal</code>: bool = False - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 exchange \u0432 \u0440\u0430\u043d\u0442\u0430\u0439\u043c\u0435 \u0438 \u043d\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0442\u044c RabbitMQ \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 exchange</li> <li><code>robust</code>: bool = True - \u043f\u0435\u0440\u0435\u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c exchange \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a RabbitMQ</li> <li><code>timeout</code>: int | float - \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 RabbitMQ</li> <li><code>arguments</code>: dict[str, Any] | None = None - \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f exchange</li> </ul> <p>\u0410 \u0442\u0430\u043a\u0436\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0433\u043e exchange \u043a \u0434\u0440\u0443\u0433\u043e\u043c\u0443</p> <ul> <li><code>bind_to</code>: RabbitExchange | None = None - \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 exchange, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f</li> <li><code>bind_arguments</code>: dict[str, Any] | None = None - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f header exchange \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438)</li> <li><code>routing_key</code>: str = \"\" - \u043a\u043b\u044e\u0447 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435 \u043d\u0430 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 exchange</li> </ul>"},{"location":"ru/rabbit/3_queues/","title":"QUEUES","text":"<p>\u0414\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f <code>Queue</code> \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0432 <code>Propan</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 <code>propan.brokers.rabbit.RabbitQueue</code>.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u043a \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0442\u0430\u043a \u0438 \u043f\u0440\u0438 \u0438\u0445 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435:</p> <pre><code>from propan.brokers.rabbit import RabbitBroker, RabbitQueue\n\nbroker = RabbitBroker()\n\n@broker.handler(RabbitQueue(\"test\"))\nasync def handler():\n    ...\n\n...\n    await broker.publish(\"Hi!\", RabbitQueue(\"test\"))\n</code></pre> <p>\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 <code>RabbitQueue</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:</p> <ul> <li><code>name</code>: str - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438</li> <li><code>durable</code>: bool = False - \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 True, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 RabbitMQ</li> <li><code>auto_delete</code>: bool = False - \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 True, \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u0430 \u043f\u0440\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043e\u0442 RabbitMQ</li> <li><code>exclusive</code>: bool = False - \u043a \u044d\u0442\u043e\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f. \u0422\u0430\u043a\u0430\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u0430 \u043f\u0440\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043e\u0442 RabbitMQ.</li> <li><code>passive</code>: bool = False<ul> <li>\u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 <code>False</code>, Propan \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043b\u0438\u0431\u043e \u043f\u0440\u043e\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0438\u0435 \u044d\u0442\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c.</li> <li>\u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0432 <code>True</code>, Propan \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0441\u044f \u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0430</li> </ul> </li> <li><code>robust</code>: bool = True - \u043f\u0435\u0440\u0435\u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a RabbitMQ</li> <li><code>timeout</code>: int | float - \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 RabbitMQ</li> <li><code>arguments</code>: dict[str, Any] | None = None - \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0447\u0435\u0440\u0435\u0434\u0438</li> </ul> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u043a exchange \u0442\u0430\u043a\u0436\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0435\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435:</p> <ul> <li><code>routing_key</code>: str - \u043a\u043b\u044e\u0447 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a exchange. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0430\u0433\u0440\u0443\u043c\u0435\u043d\u0442 <code>name</code></li> <li><code>bind_arguments</code>: dict[str, Any] | None = None - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f header exchange \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438)</li> </ul>"},{"location":"ru/rabbit/4_publishing/","title":"Rabbit Publishing","text":"<p>\u0414\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 <code>RabbitBroker</code> \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0443\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 <code>publish</code>. \u041e\u0434\u043d\u0430\u043a\u043e, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u043f\u043e\u043c\u0438\u043c\u043e <code>str</code>, <code>bytes</code>, <code>dict</code>, <code>pydantic.BaseModel</code>) \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 <code>aio_pika.Message</code> (\u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438).</p> <pre><code>import asyncio\nfrom propan import RabbitBroker\n\nasync def pub():\n    async with RabbitBroker() as broker:\n        await broker.publish(\"Hi!\", queue=\"test\", exchange=\"test\")\n\nasyncio.run(pub())\n</code></pre>"},{"location":"ru/rabbit/4_publishing/#_1","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>publish</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:</p> <ul> <li><code>message</code>: bytes | str | dict | Sequence[Any] | pydantic.BaseModel | aio_pika.Message = \"\" - \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438</li> <li><code>exchange</code>: str | RabbitExchange | None = None - exchange, \u043a\u0443\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f default</li> <li><code>queue</code>: str | RabbitQueue = \"\" - \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u043a\u0443\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 (\u0442.\u043a. \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0441\u0432\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u044e\u0447\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438, \u044d\u0442\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 <code>routing_key</code>)</li> <li><code>routing_key</code>: str = \"\" - \u0442\u043e\u0436\u0435 \u043a\u043b\u044e\u0447 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 <code>queue</code></li> </ul>"},{"location":"ru/rabbit/4_publishing/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f","text":"<p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u0444\u043b\u0430\u0433\u0430\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 RabbitMQ</p> <ul> <li><code>headers</code>: dict[str, Any] | None = None - \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438)</li> <li><code>content_type</code>: str | None = None - content_type \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0412 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f Propan \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438)</li> <li><code>content_encoding</code>: str | None = None - \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438)</li> <li><code>persist</code>: bool = False - \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 RabbitMQ</li> <li><code>priority</code>: int | None = None - \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u0438</li> <li><code>correlation_id</code>: str | None = None - id \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u043d\u0430 \u043d\u0435\u0433\u043e (\u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f Propan \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438)</li> <li><code>reply_to</code>: str | None = None - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u043a\u0443\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 (\u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e RPC \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438)</li> <li><code>message_id</code>: str | None = None - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f RabbitMQ \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438)</li> <li><code>timestamp</code>: int | float | timedelta | datetime | None - \u0432\u0440\u0435\u043c\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 RabbitMQ \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438)</li> <li><code>expiration</code>: int | float | timedelta | datetime | None - \u0432\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445)</li> <li><code>type</code>: str | None = None - \u0442\u0438\u043f \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438)</li> <li><code>user_id</code>: str | None - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f RabbitMQ, \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>app_id</code>: str | None - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0432\u0448\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438)</li> </ul>"},{"location":"ru/rabbit/4_publishing/#_3","title":"\u0424\u043b\u0430\u0433\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438","text":"<p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f:</p> <ul> <li><code>mandatory</code>: bool = True - \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u043e \u0432 \u043a\u0430\u043a\u0443\u044e-\u043b\u0438\u0431\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u044c (\u0435\u0441\u043b\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u043d\u0435\u0442 - \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044e)</li> <li><code>immediate</code>: bool = False - \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u0442, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c, \u0433\u043e\u0442\u043e\u0432\u044b\u0439 \u0432\u0437\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0440\u0430\u0431\u043e\u0442\u0443 \"\u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441\" (\u0435\u0441\u043b\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f \u043d\u0435\u0442 - \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044e)</li> <li><code>timeout</code>: int | float | None = None - \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442 RabbitMQ</li> </ul>"},{"location":"ru/rabbit/4_publishing/#rpc","title":"RPC \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b","text":"<p>\u0422\u0430\u043a\u0436\u0435 <code>publish</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f RPC \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432:</p> <ul> <li><code>callback</code>: bool = False - \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043b\u0438 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>callback_timeout</code>: float | None = 30.0 - \u0442\u0430\u0439\u043c\u0430\u0443\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 <code>None</code> - \u0436\u0434\u0435\u0442 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e</li> <li><code>raise_timeout</code>: bool = False<ul> <li><code>False</code> - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c None \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430</li> <li><code>True</code> - \u043e\u0448\u0438\u0431\u043a\u0430 <code>TimeoutError</code> \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430</li> </ul> </li> </ul>"},{"location":"ru/rabbit/5_examples/1_direct/","title":"Direct Exchange","text":"<p>Direct Exchange - \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 RabbitMQ. \u0415\u0433\u043e \u0441\u0443\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u0430: <code>exchange</code> \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0442\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438, <code>routing_key</code> \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 <code>routing_key</code> \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> <p>Note</p> <p>Default Exchange, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u044b \u0432\u0441\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0432 RabbitMQ \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f Direct</p>"},{"location":"ru/rabbit/5_examples/1_direct/#_1","title":"\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0415\u0441\u043b\u0438 \u043e\u0434\u043d\u0443 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u043d\u043e\u0432\u043e\u043c\u0443 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044e. \u042d\u0442\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 <code>exchange</code>, \u0442.\u043a. \u043e\u043d\u043e \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u0441\u0430\u043c\u043e\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u0438. \u0422\u0438\u043f <code>exchange</code> \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0442\u043e, \u0432 \u043a\u0430\u043a\u0438\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u043f\u043e\u043f\u0430\u0434\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</p> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, RabbitMQ \u043c\u043e\u0436\u0435\u0442 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u0438. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u0442\u043e\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0432 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0430\u043d\u0441\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u0430-\u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f. \u0412\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b: RabbitMQ \u0441\u0430\u043c \u043f\u043e\u0437\u0430\u0431\u043e\u0442\u0438\u0442\u0441\u044f \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0432\u0430\u0448\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438.</p>"},{"location":"ru/rabbit/5_examples/1_direct/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<p>Direct Exchange - \u0442\u0438\u043f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0432 Propan \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c</p> <pre><code>@broker.handler(\"test_queue\", \"test_exchange\")\nasync def handler():\n    ...\n</code></pre> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442 <code>auto_delete=True</code> \u0432 \u044d\u0442\u043e\u043c \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 RabbitMQ \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430</p> <pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import Logger\nfrom propan.brokers.rabbit import RabbitExchange, RabbitQueue\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nexch = RabbitExchange(\"exchange\", auto_delete=True)\n\nqueue_1 = RabbitQueue(\"test-q-1\", auto_delete=True)\nqueue_2 = RabbitQueue(\"test-q-2\", auto_delete=True)\n\n@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 1\n    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 2\n    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 1\n    await broker.publish(queue=\"test-q-2\", exchange=exch)  # handlers: 3\n</code></pre>"},{"location":"ru/rabbit/5_examples/1_direct/#_3","title":"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043e\u0431\u044a\u044f\u0432\u0438\u043b\u0438 \u043d\u0430\u0448 Direct exchange \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0435\u0433\u043e \u0441\u043b\u0443\u0448\u0430\u0442\u044c:</p> <pre><code>exch = RabbitExchange(\"exchange\", auto_delete=True)\n\nqueue_1 = RabbitQueue(\"test-q-1\", auto_delete=True)\nqueue_2 = RabbitQueue(\"test-q-2\", auto_delete=True)\n</code></pre> <p>\u0417\u0430\u0442\u0435\u043c \u043c\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043d\u0430\u043c\u0438 <code>exchange</code></p> <pre><code>@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n</code></pre> <p>Note</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e <code>handler1</code> \u0438 <code>handler2</code> \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0430 \u043e\u0434\u0438\u043d <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438: \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u044d\u0442\u043e \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u044d\u0442\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e. \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u044d\u043c\u0443\u043b\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0443 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.</p>"},{"location":"ru/rabbit/5_examples/1_direct/#_4","title":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 1\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>1</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code>, \u0442.\u043a. \u043e\u043d \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0441 \u043a\u043b\u044e\u0447\u043e\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 <code>test-q-1</code></p> <pre><code>    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 2\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>2</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler2</code>, \u0442.\u043a. \u043e\u043d \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u043e\u0439 \u0436\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u043d\u043e <code>handler1</code> \u0437\u0430\u043d\u044f\u0442</p> <pre><code>    await broker.publish(queue=\"test-q-1\", exchange=exch)  # handlers: 1\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>3</code> \u0441\u043d\u043e\u0432\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code>, \u0442.\u043a. \u043e\u043d \u043e\u0441\u0432\u043e\u0431\u043e\u0434\u0438\u043b\u0441\u044f \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442</p> <pre><code>    await broker.publish(queue=\"test-q-2\", exchange=exch)  # handlers: 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>4</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler3</code>, \u0442.\u043a. \u043e\u043d \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0441 \u043a\u043b\u044e\u0447\u043e\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 <code>test-q-2</code></p>"},{"location":"ru/rabbit/5_examples/2_fanout/","title":"Fanout Exchange","text":"<p>Fanout Exchange - \u0435\u0449\u0435 \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439, \u043d\u043e \u0447\u0443\u0442\u044c \u043c\u0435\u043d\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0432 RabbitMQ. \u0414\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f <code>exchange</code> \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043d\u0435\u0433\u043e, \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044f \u043b\u044e\u0431\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0435\u0441\u043b\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435 \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.</p>"},{"location":"ru/rabbit/5_examples/2_fanout/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import Logger\nfrom propan.brokers.rabbit import RabbitExchange, RabbitQueue, ExchangeType\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nexch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.FANOUT)\n\nqueue_1 = RabbitQueue(\"test-q-1\", auto_delete=True)\nqueue_2 = RabbitQueue(\"test-q-2\", auto_delete=True)\n\n@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(exchange=exch)  # handlers: 1, 3\n    await broker.publish(exchange=exch)  # handlers: 2, 3\n    await broker.publish(exchange=exch)  # handlers: 1, 3\n    await broker.publish(exchange=exch)  # handlers: 2, 3\n</code></pre>"},{"location":"ru/rabbit/5_examples/2_fanout/#_2","title":"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043e\u0431\u044a\u044f\u0432\u0438\u043b\u0438 \u043d\u0430\u0448 Fanout exchange \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0435\u0433\u043e \u0441\u043b\u0443\u0448\u0430\u0442\u044c:</p> <pre><code>exch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.FANOUT)\n\nqueue_1 = RabbitQueue(\"test-q-1\", auto_delete=True)\nqueue_2 = RabbitQueue(\"test-q-2\", auto_delete=True)\n</code></pre> <p>\u0417\u0430\u0442\u0435\u043c \u043c\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043d\u0430\u043c\u0438 <code>exchange</code></p> <pre><code>@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n</code></pre> <p>Note</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e <code>handler1</code> \u0438 <code>handler2</code> \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0430 \u043e\u0434\u0438\u043d <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438: \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u044d\u0442\u043e \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u044d\u0442\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e. \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u044d\u043c\u0443\u043b\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0443 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.</p>"},{"location":"ru/rabbit/5_examples/2_fanout/#_3","title":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>    await broker.publish(exchange=exch)  # handlers: 1, 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>1</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code> \u0438 <code>handler3</code>, \u0442.\u043a. \u043e\u043d\u0438 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0430\u0437\u043d\u044b\u0445 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439</p> <pre><code>    await broker.publish(exchange=exch)  # handlers: 2, 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>2</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler2</code> \u0438 <code>handler3</code>, \u0442.\u043a. <code>handler2</code> \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u043e\u0439 \u0436\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u0447\u0442\u043e \u0438 <code>handler1</code></p> <pre><code>    await broker.publish(exchange=exch)  # handlers: 1, 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>3</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code> \u0438 <code>handler3</code></p> <pre><code>    await broker.publish(exchange=exch)  # handlers: 2, 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>4</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler3</code> \u0438 <code>handler3</code></p> <p>Note</p> <p>\u041f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 Fanout exchange \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b <code>queue</code> \u0438\u043b\u0438 <code>routing_key</code>, \u0442.\u043a. \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u044b</p>"},{"location":"ru/rabbit/5_examples/3_topic/","title":"Topic Exchange","text":"<p>Topic Exchange - \u043c\u043e\u0449\u043d\u044b\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 RabbitMQ. \u0414\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f <code>exchange</code> \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u043c, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438 \u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a <code>exchange</code> \u0438 <code>routing_key</code> \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0435\u0441\u043b\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435 \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.</p>"},{"location":"ru/rabbit/5_examples/3_topic/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import Logger\nfrom propan.brokers.rabbit import RabbitExchange, RabbitQueue, ExchangeType\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nexch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.TOPIC)\n\nqueue_1 = RabbitQueue(\"test-queue-1\", auto_delete=True, routing_key=\"*.info\")\nqueue_2 = RabbitQueue(\"test-queue-2\", auto_delete=True, routing_key=\"*.debug\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 1\n    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 2\n    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 1\n    await broker.publish(routing_key=\"logs.debug\", exchange=exch) # handlers: 3\n</code></pre>"},{"location":"ru/rabbit/5_examples/3_topic/#_2","title":"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043e\u0431\u044a\u044f\u0432\u0438\u043b\u0438 \u043d\u0430\u0448 Topic exchange \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0435\u0433\u043e \u0441\u043b\u0443\u0448\u0430\u0442\u044c:</p> <pre><code>exch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.TOPIC)\n\nqueue_1 = RabbitQueue(\"test-queue-1\", auto_delete=True, routing_key=\"*.info\")\nqueue_2 = RabbitQueue(\"test-queue-2\", auto_delete=True, routing_key=\"*.debug\")\n</code></pre> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 <code>routing_key</code> \u043d\u0430\u0448\u0438\u0445 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u043c\u044b \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043a\u043b\u044e\u0447\u0435\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u043e\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u044c\u044e.</p> <p>\u0417\u0430\u0442\u0435\u043c \u043c\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043d\u0430\u043c\u0438 <code>exchange</code></p> <pre><code>@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n</code></pre> <p>Note</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e <code>handler1</code> \u0438 <code>handler2</code> \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0430 \u043e\u0434\u0438\u043d <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438: \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u044d\u0442\u043e \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u044d\u0442\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e. \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u044d\u043c\u0443\u043b\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0443 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.</p>"},{"location":"ru/rabbit/5_examples/3_topic/#_3","title":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 1\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>1</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code>, \u0442.\u043a. \u043e\u043d \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0441 \u043a\u043b\u044e\u0447\u043e\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 <code>*.info</code></p> <pre><code>    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 2\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>2</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler2</code>, \u0442.\u043a. \u043e\u043d \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u043e\u0439 \u0436\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u043d\u043e <code>handler1</code> \u0437\u0430\u043d\u044f\u0442</p> <pre><code>    await broker.publish(routing_key=\"logs.info\", exchange=exch)  # handlers: 1\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>3</code> \u0441\u043d\u043e\u0432\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code>, \u0442.\u043a. \u043e\u043d \u043e\u0441\u0432\u043e\u0431\u043e\u0434\u0438\u043b\u0441\u044f \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442</p> <pre><code>    await broker.publish(routing_key=\"logs.debug\", exchange=exch) # handlers: 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>4</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler3</code>, \u0442.\u043a. \u043e\u043d \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0441 \u043a\u043b\u044e\u0447\u043e\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 <code>*.debug</code></p>"},{"location":"ru/rabbit/5_examples/4_header/","title":"Header Exchange","text":"<p>Header Exchange - \u0441\u0430\u043c\u044b\u0439 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u0438 \u0433\u0438\u0431\u043a\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 RabbitMQ. \u0414\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f <code>exchange</code> \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u044d\u0442\u0438\u0445 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u043a <code>exchange</code> \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0435\u0441\u043b\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435 \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.</p>"},{"location":"ru/rabbit/5_examples/4_header/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from propan import PropanApp, RabbitBroker\nfrom propan.annotations import Logger\nfrom propan.brokers.rabbit import RabbitExchange, RabbitQueue, ExchangeType\n\nbroker = RabbitBroker()\napp = PropanApp(broker)\n\nexch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.HEADERS)\n\nqueue_1 = RabbitQueue(\n    \"test-queue-1\", auto_delete=True,\n    bind_arguments={ \"key\": 1 }\n)\nqueue_2 = RabbitQueue(\n    \"test-queue-2\", auto_delete=True,\n    bind_arguments={ \"key\": 2, \"key2\": 2, \"x-match\": \"any\" }\n)\nqueue_3 = RabbitQueue(\n    \"test-queue-3\", auto_delete=True,\n    bind_arguments={ \"key\": 2, \"key2\": 2, \"x-match\": \"all\" }\n)\n\n@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@broker.handle(queue_3, exch)\nasync def base_handler4(logger: Logger):\n    logger.info(\"base_handler4\")\n\n@app.after_startup\nasync def send_messages():\n    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 1\n    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 2\n    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 1\n    await broker.publish(exchange=exch, headers={ \"key\": 2 })  # handlers: 3\n    await broker.publish(exchange=exch, headers={ \"key2\": 2 }) # handlers: 3\n    await broker.publish(exchange=exch, headers={ \"key\": 2,    # handlers: 3, 4\n                                                  \"key2\": 2 })\n</code></pre>"},{"location":"ru/rabbit/5_examples/4_header/#_2","title":"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043e\u0431\u044a\u044f\u0432\u0438\u043b\u0438 \u043d\u0430\u0448 Fanout exchange \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0435\u0433\u043e \u0441\u043b\u0443\u0448\u0430\u0442\u044c:</p> <pre><code>exch = RabbitExchange(\"exchange\", auto_delete=True, type=ExchangeType.HEADERS)\n\nqueue_1 = RabbitQueue(\n    \"test-queue-1\", auto_delete=True,\n    bind_arguments={ \"key\": 1 }\n)\nqueue_2 = RabbitQueue(\n    \"test-queue-2\", auto_delete=True,\n    bind_arguments={ \"key\": 2, \"key2\": 2, \"x-match\": \"any\" }\n)\nqueue_3 = RabbitQueue(\n    \"test-queue-3\", auto_delete=True,\n    bind_arguments={ \"key\": 2, \"key2\": 2, \"x-match\": \"all\" }\n)\n</code></pre> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442 <code>x-match</code> \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u043f\u0430\u0434\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u043b\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e.</p> <p>\u0417\u0430\u0442\u0435\u043c \u043c\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043d\u0430\u043c\u0438 <code>exchange</code></p> <pre><code>@broker.handle(queue_1, exch)\nasync def base_handler1(logger: Logger):\n    logger.info(\"base_handler1\")\n\n@broker.handle(queue_1, exch)\nasync def base_handler2(logger: Logger):\n    logger.info(\"base_handler2\")\n\n@broker.handle(queue_2, exch)\nasync def base_handler3(logger: Logger):\n    logger.info(\"base_handler3\")\n\n@broker.handle(queue_3, exch)\nasync def base_handler4(logger: Logger):\n    logger.info(\"base_handler4\")\n</code></pre> <p>Note</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e <code>handler1</code> \u0438 <code>handler2</code> \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0430 \u043e\u0434\u0438\u043d <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438: \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u044d\u0442\u043e \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u044d\u0442\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e. \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u044d\u043c\u0443\u043b\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0443 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.</p>"},{"location":"ru/rabbit/5_examples/4_header/#_3","title":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 1\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>1</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code>, \u0442.\u043a. \u043e\u043d \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>key</code> \u043a\u043e\u0442\u043e\u0440\u043e\u0439, \u0441\u043e\u0432\u043f\u0430\u043b \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c <code>key</code> \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 2\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>2</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler2</code>, \u0442.\u043a. \u043e\u043d \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>exchange</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u043e\u0439 \u0436\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u043d\u043e <code>handler1</code> \u0437\u0430\u043d\u044f\u0442</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key\": 1 })  # handlers: 1\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>3</code> \u0441\u043d\u043e\u0432\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code>, \u0442.\u043a. \u043e\u043d \u043e\u0441\u0432\u043e\u0431\u043e\u0434\u0438\u043b\u0441\u044f \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key\": 2 })  # handlers: 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>4</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler3</code>, \u0442.\u043a. \u043e\u043d \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>key</code> \u043a\u043e\u0442\u043e\u0440\u043e\u0439, \u0441\u043e\u0432\u043f\u0430\u043b \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c <code>key</code> \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key2\": 2 }) # handlers: 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>5</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler3</code>, \u0442.\u043a. \u043e\u043d \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>key2</code> \u043a\u043e\u0442\u043e\u0440\u043e\u0439, \u0441\u043e\u0432\u043f\u0430\u043b \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c <code>key2</code> \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</p> <pre><code>    await broker.publish(exchange=exch, headers={ \"key\": 2,    # handlers: 3, 4\n                                                  \"key2\": 2 })\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>6</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler3</code> \u0438 <code>handler4</code>, \u0442.\u043a. \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0432\u043f\u0430\u043b\u0438 \u0441 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439</p> <p>Note</p> <p>\u041f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 Header exchange \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b <code>queue</code> \u0438\u043b\u0438 <code>routing_key</code>, \u0442.\u043a. \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u044b</p> <p>Warning</p> <p>\u0414\u043b\u044f \u043d\u0435\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c <code>exchange</code> \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 <code>exchange</code> \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043a\u043b\u044e\u0447\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0442 \u0432\u0441\u0435 \u0442\u0435 \u0436\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430, \u0447\u0442\u043e \u0438 \u0434\u043b\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439, \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 <code>exchange</code>. \u041e\u0442\u043b\u0438\u0447\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 <code>exchange</code> \u043c\u043e\u0436\u0435\u0442 \u0434\u0430\u043b\u044c\u0448\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e \u0441\u0432\u043e\u0438\u043c\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438.</p> <p>\u0422\u0430\u043a, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u0442\u044c Topic \u0438 Header \u0442\u0438\u043f\u044b.</p>"},{"location":"ru/redis/1_redis-index/#_1","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438","text":"<p>\u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0443\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Redis. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043d\u043e \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u0432\u043d\u0435\u0434\u0440\u044f\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0442\u044f\u0436\u0435\u043b\u043e\u0432\u0435\u0441\u043d\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c (Kafka, RabbitMQ, Nats \u0438 \u0442\u0434) \u0432 \u0441\u0432\u043e\u044e \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443, \u0432\u0430\u043c \u0441\u0442\u043e\u0438\u0442 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p> <p>Redis \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u043e, \u043d\u0435 \u0434\u0435\u0433\u0440\u0430\u0434\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u0441\u0430\u043c\u043e\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 - \u043e\u043d \u0443\u0436\u0435 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c!</p> <p>Note</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 Redis Pub/Sub \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e, Redis \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0430\u043c\u0438:</p> <ul> <li>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0435 \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u044b. \u0415\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043e \u043f\u043e\u043a\u0430 \u0432\u0430\u0448 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d - \u043e\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u043e.</li> <li>\u041e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439.</li> <li>\u041e\u0442\u0441\u0442\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438.</li> <li>\u041e\u0442\u0441\u0442\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f.</li> <li>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u044b\u0440\u044b\u043c\u0438 \u0431\u0430\u0439\u0442\u0430\u043c\u0438 \u0431\u0435\u0437 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438.</li> </ul> <p>\u0414\u0430\u043b\u0435\u043a\u043e \u043d\u0435 \u0432\u0441\u0435 \u044d\u0442\u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435, \u043d\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0438\u0445 \u0432 \u0432\u0438\u0434\u0443, \u043a\u043e\u0433\u0434\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0435 Redis \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p> <p>\u0412 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043a\u043e\u0434 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f Propan \u0441\u043b\u0430\u0431\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f \u0441\u0432\u043e\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043d\u0430 \u0431\u0430\u0437\u0435 Redis, \u0430 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 - \u0431\u044b\u0441\u0442\u0440\u043e \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0435 \u043f\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <p>\u0422\u0430\u043a\u0436\u0435, Redis 5.0+ \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c Streams, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0432 \u0440\u043e\u043b\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 Redis Pub/Sub: \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439.</p>"},{"location":"ru/redis/1_redis-index/#_2","title":"\u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438","text":"<p>Redis \u043d\u0435 \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438. \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c\u044e \u0432 Redis Pub/Sub \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f <code>channel</code>, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043b\u0438\u0431\u043e \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043f\u043e \u0438\u043c\u0435\u043d\u0438, \u043b\u0438\u0431\u043e \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f.</p> <p>\u041e\u0431\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u044b \u0447\u0443\u0442\u044c \u0434\u0430\u043b\u0435\u0435.</p>"},{"location":"ru/redis/1_redis-index/#propan","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 Propan","text":"<p>\u0422\u0430\u043a \u043a\u0430\u043a Redis \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0431\u0430\u0439\u0442 \u0431\u0435\u0437 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438 \u043f\u0440\u043e\u0447\u0435\u0439 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, Propan \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 json \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439:</p> <pre><code>{\n    \"data\": \"\",\n    \"headers\": {},\n    \"reply_to\": \"\"\n}\n</code></pre> <p>\u042d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u0442\u043a\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f content-type \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f) \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 RPC \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> <p>\u0415\u0441\u043b\u0438 Propan \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0440\u0443\u0433\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438\u043b\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 (\u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430), \u0432\u0441\u0435 \u0442\u0435\u043b\u043e \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0441\u043f\u0440\u0438\u043d\u044f\u0442\u043e \u043a\u0430\u043a \u043f\u043e\u043b\u0435 <code>data</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0430 <code>content-type</code> \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438.</p> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c RPC \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043d\u0435\u0442 \u043f\u043e\u043b\u044f <code>reply_to</code>.</p>"},{"location":"ru/redis/2_publishing/","title":"Redis Publishing","text":"<p>\u0414\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 <code>RedisBroker</code> \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0443\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 <code>publish</code>.</p> <pre><code>import asyncio\nfrom propan import RedisBroker\n\nasync def pub():\n    async with RedisBroker() as broker:\n        await broker.publish(\"Hi!\", channel=\"test\")\n\nasyncio.run(pub())\n</code></pre>"},{"location":"ru/redis/2_publishing/#_1","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>publish</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:</p> <ul> <li><code>message</code>: bytes | str | dict | Sequence[Any] | pydantic.BaseModel - \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438</li> <li><code>channel</code>: str = \"\" - channel, \u043a\u0443\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> </ul>"},{"location":"ru/redis/2_publishing/#_2","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f","text":"<p>Redis \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u044b\u0440\u044b\u0445 <code>bytes</code>. Propan \u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f: \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 <code>publish</code> \u0432 Redis \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f json \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438:</p> <pre><code>{\n    \"data\": \"\",\n    \"headers\": {},\n    \"reply_to\": \"\"\n}\n</code></pre> <p>\u0421\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0442\u0430\u043c \u0436\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f <code>content-type</code>, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 Propan \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435)</p> <ul> <li><code>headers</code>: dict[str, Any] | None = None - \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438)</li> </ul> <p>\u0415\u0441\u043b\u0438 Propan \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0440\u0443\u0433\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438\u043b\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 (\u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430), \u0432\u0441\u0435 \u0442\u0435\u043b\u043e \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0441\u043f\u0440\u0438\u043d\u044f\u0442\u043e \u043a\u0430\u043a \u043f\u043e\u043b\u0435 <code>data</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0430 <code>content-type</code> \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438.</p> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c RPC \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043d\u0435\u0442 \u043f\u043e\u043b\u044f <code>reply_to</code>.</p>"},{"location":"ru/redis/2_publishing/#rpc","title":"RPC \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b","text":"<p>\u0422\u0430\u043a\u0436\u0435 <code>publish</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0449\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f RPC \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432:</p> <ul> <li><code>reply_to</code>: str = \"\" - \u0432 \u043a\u0430\u043a\u043e\u0439 channel \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 RPC \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432)</li> <li><code>callback</code>: bool = False - \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043b\u0438 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435</li> <li><code>callback_timeout</code>: float | None = 30.0 - \u0442\u0430\u0439\u043c\u0430\u0443\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 <code>None</code> - \u0436\u0434\u0435\u0442 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e</li> <li><code>raise_timeout</code>: bool = False<ul> <li><code>False</code> - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c None \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430</li> <li><code>True</code> - \u043e\u0448\u0438\u0431\u043a\u0430 <code>TimeoutError</code> \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430</li> </ul> </li> </ul>"},{"location":"ru/redis/3_examples/1_direct/","title":"Direct","text":"<p>Direct Channel - \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 Redis. \u0415\u0433\u043e \u0441\u0443\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u0430: <code>channel</code> \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c, \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c \u043d\u0430 \u043d\u0435\u0433\u043e.</p>"},{"location":"ru/redis/3_examples/1_direct/#_1","title":"\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0415\u0441\u043b\u0438 \u043e\u0434\u0438\u043d \u043a\u0430\u043d\u0430\u043b \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u044d\u0442\u043e\u0433\u043e \u043a\u0430\u043d\u0430\u043b\u0430. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0435\u043c \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432-\u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Redis Pub/Sub.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 Redis Streams \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Nats \u0438\u043b\u0438 RabbitMQ).</p>"},{"location":"ru/redis/3_examples/1_direct/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<p>Direct Channel - \u0442\u0438\u043f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0432 Propan \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c</p> <pre><code>@broker.handler(\"test_channel\")\nasync def handler():\n    ...\n</code></pre> <p>\u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>from propan import PropanApp, RedisBroker\nfrom propan.annotations import Logger\n\nbroker = RedisBroker()\napp = PropanApp(broker)\n\n\n@broker.handle(\"test\")\nasync def handler1(logger: Logger):\n    logger.info(\"handler1\")\n\n\n@broker.handle(\"test\")\nasync def handler2(logger: Logger):\n    logger.info(\"handler2\")\n\n\n@broker.handle(\"test2\")\nasync def handler3(logger: Logger):\n    logger.info(\"handler3\")\n\n\n@app.after_startup\nasync def publish_smth():\n    await broker.publish(\"\", \"test\")  # handlers: 1, 2\n    await broker.publish(\"\", \"test2\") # handlers: 3\n</code></pre>"},{"location":"ru/redis/3_examples/1_direct/#_3","title":"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043e\u0431\u044a\u044f\u0432\u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 <code>test</code> \u0438 <code>test2</code>:</p> <pre><code>@broker.handle(\"test\")\nasync def handler1(logger: Logger):\n    logger.info(\"handler1\")\n\n\n@broker.handle(\"test\")\nasync def handler2(logger: Logger):\n    logger.info(\"handler2\")\n\n\n@broker.handle(\"test2\")\nasync def handler3(logger: Logger):\n    logger.info(\"handler3\")\n</code></pre> <p>Note</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e <code>handler1</code> \u0438 <code>handler2</code> \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0430 \u043e\u0434\u0438\u043d <code>channel</code>: c\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u043e\u0431\u0430 \u044d\u0442\u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.</p>"},{"location":"ru/redis/3_examples/1_direct/#_4","title":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>    await broker.publish(\"\", \"test\")  # handlers: 1, 2\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>1</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code> \u0438 <code>handler2</code>, \u0442.\u043a. \u043e\u043d\u0438 \u0441\u043b\u0443\u0448\u0430\u044e\u0442 <code>channel</code> \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c <code>test</code></p> <pre><code>    await broker.publish(\"\", \"test2\") # handlers: 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>2</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler3</code>, \u0442.\u043a. \u043e\u043d \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>channel</code> \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c <code>test2</code></p>"},{"location":"ru/redis/3_examples/2_pattern/","title":"Pattern","text":"<p>Pattern Channel - \u043c\u043e\u0449\u043d\u044b\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 Redis. \u0414\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f <code>channel</code> \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0438\u0438 \u0441 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u043c, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438 \u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a <code>channel</code> \u0438 \u043a\u043b\u044e\u0447\u043e\u043c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p>"},{"location":"ru/redis/3_examples/2_pattern/#_1","title":"\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0415\u0441\u043b\u0438 \u043a\u043b\u044e\u0447 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439, \u043e\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432\u0441\u0435\u043c \u0438\u043c. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0435\u043c \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432-\u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Redis Pub/Sub.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 Redis Streams \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Nats \u0438\u043b\u0438 RabbitMQ).</p>"},{"location":"ru/redis/3_examples/2_pattern/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from propan import PropanApp, RedisBroker\nfrom propan.annotations import Logger\n\nbroker = RedisBroker()\napp = PropanApp(broker)\n\n\n@broker.handle(\"*.info\", pattern=True)\nasync def handler1(b: str, logger: Logger):\n    logger.info(\"handler1\")\n\n\n@broker.handle(\"*.info\", pattern=True)\nasync def handler2(b: str, logger: Logger):\n    logger.info(\"handler2\")\n\n\n@broker.handle(\"*.error\", pattern=True)\nasync def handler3(logger: Logger):\n    logger.info(\"handler3\")\n\n\n@app.after_startup\nasync def publish_smth():\n    await broker.publish(\"\", \"logs.info\")  # handlers: 1, 2\n    await broker.publish(\"\", \"logs.error\") # handlers: 3\n</code></pre>"},{"location":"ru/redis/3_examples/2_pattern/#_3","title":"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043e\u0431\u044a\u044f\u0432\u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 <code>*.info*</code> \u0438 <code>*.error</code>:</p> <pre><code>@broker.handle(\"*.info\", pattern=True)\nasync def handler1(b: str, logger: Logger):\n    logger.info(\"handler1\")\n\n\n@broker.handle(\"*.info\", pattern=True)\nasync def handler2(b: str, logger: Logger):\n    logger.info(\"handler2\")\n\n\n@broker.handle(\"*.error\", pattern=True)\nasync def handler3(logger: Logger):\n    logger.info(\"handler3\")\n</code></pre> <p>Note</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e <code>handler1</code> \u0438 <code>handler2</code> \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0430 \u043e\u0434\u0438\u043d <code>channel</code>: c\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u043e\u0431\u0430 \u044d\u0442\u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.</p>"},{"location":"ru/redis/3_examples/2_pattern/#_4","title":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>    await broker.publish(\"\", \"logs.info\")  # handlers: 1, 2\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>1</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler1</code> \u0438 <code>handler2</code>, \u0442.\u043a. \u043e\u043d\u0438 \u0441\u043b\u0443\u0448\u0430\u044e\u0442 <code>channel</code> \u0441 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u043c <code>*.info*</code></p> <pre><code>    await broker.publish(\"\", \"logs.error\") # handlers: 3\n</code></pre> <p>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>2</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 <code>handler3</code>, \u0442.\u043a. \u043e\u043d \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>channel</code> \u0441 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u043c <code>*.error</code></p>"},{"location":"ru/sqs/1_sqs-index/#_1","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f","text":"<p>Warning</p> <p>\u041f\u0440\u043e\u0441\u0442\u0438\u0442\u0435, \u0441\u0435\u0439\u0447\u0430\u0441 \u044d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u043d\u043e \u0441\u043e\u0432\u0441\u0435\u043c \u0441\u043a\u043e\u0440\u043e \u043e\u043d\u0430 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f. \u0417\u0430\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u043f\u043e\u0437\u0436\u0435...</p>"}]}