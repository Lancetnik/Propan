name: Test

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        pydantic-version: ["pydantic-v1", "pydantic-v2"]
      fail-fast: false

    services:
      kafka:
        image: bitnami/kafka:3.5.0
        ports:
          - 9092:9092
        env:
          KAFKA_ENABLE_KRAFT: "true"
          KAFKA_CFG_NODE_ID: "1"
          KAFKA_CFG_PROCESS_ROLES: "broker,controller"
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
          KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
          KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://127.0.0.1:9092"
          KAFKA_BROKER_ID: "1"
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
          ALLOW_PLAINTEXT_LISTENER: "true"

      rabbitmq:
        image: rabbitmq:alpine
        ports:
          - 5672:5672

      sqs:
        image: softwaremill/elasticmq-native
        ports:
          - 9324:9324

      nats:
        image: diementros/nats:js
        ports:
          - 4222:4222

      redis:
        image: redis:alpine3.18
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-test-v03
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.test.txt .[async-rabbit,async-kafka,async-nats,async-redis,async-sqs,doc] 
      - name: Install Pydantic v1
        if: matrix.pydantic-version == 'pydantic-v1'
        run: pip install "pydantic>=1.10.0,<2.0.0"
      - name: Install Pydantic v2
        if: matrix.pydantic-version == 'pydantic-v2'
        run: pip install --pre "pydantic>=2.0.0b2,<3.0.0"
      - run: mkdir coverage
      - name: Test
        run: bash scripts/test.sh -x
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}
      - name: Store coverage files
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage

  test-e2e-nats:
    runs-on: ubuntu-latest
    services:
      nats:
        image: diementros/nats:js
        ports:
          - 4222:4222

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.test.txt .[async-nats]
      - run: mkdir coverage
      - name: Test
        run: coverage run -m pytest -m "run and nats" tests/cli/test_run.py
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}
      - name: Store coverage files
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage
    
  test-e2e-rabbit:
    runs-on: ubuntu-latest
    services:
      rabbitmq:
        image: rabbitmq:alpine
        ports:
          - 5672:5672
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.test.txt .[async-rabbit]
      - run: mkdir coverage
      - name: Test
        run: coverage run -m pytest -m "run and rabbit" tests/cli/test_run.py
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}
      - name: Store coverage files
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage
  
  test-e2e-kafka:
    runs-on: ubuntu-latest
    services:
      kafka:
        image: bitnami/kafka:3.5.0
        ports:
          - 9092:9092
        env:
          KAFKA_ENABLE_KRAFT: "true"
          KAFKA_CFG_NODE_ID: "1"
          KAFKA_CFG_PROCESS_ROLES: "broker,controller"
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
          KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
          KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://127.0.0.1:9092"
          KAFKA_BROKER_ID: "1"
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
          ALLOW_PLAINTEXT_LISTENER: "true"
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.test.txt .[async-kafka]
      - run: mkdir coverage
      - name: Test
        run: coverage run -m pytest -m "run and kafka" tests/cli/test_run.py
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}
      - name: Store coverage files
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage

  test-e2e-sqs:
    runs-on: ubuntu-latest
    services:
      sqs:
        image: softwaremill/elasticmq-native
        ports:
          - 9324:9324
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.test.txt .[async-sqs]
      - run: mkdir coverage
      - name: Test
        run: coverage run -m pytest -m "run and sqs" tests/cli/test_run.py
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}
      - name: Store coverage files
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage
  
  test-e2e-redis:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:alpine3.18
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.test.txt .[async-redis]
      - run: mkdir coverage
      - name: Test
        run: coverage run -m pytest -m "run and redis" tests/cli/test_run.py
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}
      - name: Store coverage files
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage

  coverage-combine:
    needs: [test,test-e2e-nats,test-e2e-rabbit,test-e2e-kafka,test-e2e-sqs,test-e2e-redis]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"
          cache-dependency-path: pyproject.toml

      - name: Get coverage files
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage

      - run: pip install coverage[toml]

      - run: ls -la coverage
      - run: coverage combine coverage
      - run: coverage report
      - run: coverage html --show-contexts --title "Propan coverage for ${{ github.sha }}"

      - name: Store coverage html
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html
          path: htmlcov

  # https://github.com/marketplace/actions/alls-green#why
  check: # This job does nothing and is only used for the branch protection
    if: always()

    needs:
      - coverage-combine

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}